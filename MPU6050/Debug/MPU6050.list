
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007438  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08007608  08007608  00008608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c50  08007c50  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c58  08007c58  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c58  08007c58  00008c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007c60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001d4  08007e34  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08007e34  000093ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b66d  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c27  00000000  00000000  00014871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00016498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000819  00000000  00000000  00016f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022663  00000000  00000000  00017719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e143  00000000  00000000  00039d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd323  00000000  00000000  00047ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001151e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb0  00000000  00000000  00115228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00118ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075f0 	.word	0x080075f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080075f0 	.word	0x080075f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 if (ch == '\n') {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d102      	bne.n	8000fc8 <__io_putchar+0x14>
   __io_putchar('\r');
 8000fc2:	200d      	movs	r0, #13
 8000fc4:	f7ff fff6 	bl	8000fb4 <__io_putchar>
 }
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000fc8:	1d39      	adds	r1, r7, #4
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <__io_putchar+0x2c>)
 8000fd2:	f002 feef 	bl	8003db4 <HAL_UART_Transmit>
 return 1;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000244 	.word	0x20000244

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fcd0 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f810 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f8c6 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ff4:	f000 f86c 	bl	80010d0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ff8:	f000 f898 	bl	800112c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_init();
 8000ffc:	f000 f8ee 	bl	80011dc <mpu6050_init>
  while (1)
  {
//	  mpu6050_read();
//	  mpu6050_read_all();
//	  HAL_Delay(500);
	  mpu6050_complementary_filter();
 8001000:	f000 f98a 	bl	8001318 <mpu6050_complementary_filter>
	  HAL_Delay(10);  // or better: run in a timer interrupt
 8001004:	200a      	movs	r0, #10
 8001006:	f000 fd33 	bl	8001a70 <HAL_Delay>
	  mpu6050_complementary_filter();
 800100a:	bf00      	nop
 800100c:	e7f8      	b.n	8001000 <main+0x1c>
	...

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	@ 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2234      	movs	r2, #52	@ 0x34
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f004 f8e4 	bl	80051ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <SystemClock_Config+0xb8>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	4a22      	ldr	r2, [pc, #136]	@ (80010c8 <SystemClock_Config+0xb8>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	@ 0x40
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <SystemClock_Config+0xb8>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001050:	2300      	movs	r3, #0
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <SystemClock_Config+0xbc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800105c:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <SystemClock_Config+0xbc>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <SystemClock_Config+0xbc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fba7 	bl	80037d8 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001090:	f000 f89e 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 f8ce 	bl	8003250 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ba:	f000 f889 	bl	80011d0 <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3750      	adds	r7, #80	@ 0x50
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <MX_I2C1_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_I2C1_Init+0x58>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_I2C1_Init+0x50>)
 800110e:	f000 ff4d 	bl	8001fac <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 f85a 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001f0 	.word	0x200001f0
 8001124:	40005400 	.word	0x40005400
 8001128:	00061a80 	.word	0x00061a80

0800112c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <MX_USART2_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_USART2_UART_Init+0x4c>)
 8001164:	f002 fdd6 	bl	8003d14 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f82f 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000244 	.word	0x20000244
 800117c:	40004400 	.word	0x40004400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <MX_GPIO_Init+0x4c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <MX_GPIO_Init+0x4c>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <MX_GPIO_Init+0x4c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_GPIO_Init+0x4c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <MX_GPIO_Init+0x4c>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_GPIO_Init+0x4c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <mpu6050_init>:
// Stores the last update time in milliseconds
uint32_t last_time = 0;

extern I2C_HandleTypeDef hi2c1;

void mpu6050_init(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af04      	add	r7, sp, #16
	  printf(".................................................\n");
 80011e2:	4841      	ldr	r0, [pc, #260]	@ (80012e8 <mpu6050_init+0x10c>)
 80011e4:	f003 ff22 	bl	800502c <puts>
	printf("Checking connection...\n");
 80011e8:	4840      	ldr	r0, [pc, #256]	@ (80012ec <mpu6050_init+0x110>)
 80011ea:	f003 ff1f 	bl	800502c <puts>
	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 100);
 80011ee:	2364      	movs	r3, #100	@ 0x64
 80011f0:	2201      	movs	r2, #1
 80011f2:	21d0      	movs	r1, #208	@ 0xd0
 80011f4:	483e      	ldr	r0, [pc, #248]	@ (80012f0 <mpu6050_init+0x114>)
 80011f6:	f001 fb49 	bl	800288c <HAL_I2C_IsDeviceReady>
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK){
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <mpu6050_init+0x30>
		  printf("Device ready!\n");
 8001204:	483b      	ldr	r0, [pc, #236]	@ (80012f4 <mpu6050_init+0x118>)
 8001206:	f003 ff11 	bl	800502c <puts>
 800120a:	e008      	b.n	800121e <mpu6050_init+0x42>
	  }
	  else{
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 800120c:	483a      	ldr	r0, [pc, #232]	@ (80012f8 <mpu6050_init+0x11c>)
 800120e:	f003 ff0d 	bl	800502c <puts>
		  printf("Device not detected. Check connection.\n");
 8001212:	483a      	ldr	r0, [pc, #232]	@ (80012fc <mpu6050_init+0x120>)
 8001214:	f003 ff0a 	bl	800502c <puts>
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001218:	4837      	ldr	r0, [pc, #220]	@ (80012f8 <mpu6050_init+0x11c>)
 800121a:	f003 ff07 	bl	800502c <puts>
	  }
	  uint8_t temp_data = 0b00001000; // set to
 800121e:	2308      	movs	r3, #8
 8001220:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_GYRO, 1, &temp_data, 1, 100);
 8001222:	2364      	movs	r3, #100	@ 0x64
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	221b      	movs	r2, #27
 8001232:	21d0      	movs	r1, #208	@ 0xd0
 8001234:	482e      	ldr	r0, [pc, #184]	@ (80012f0 <mpu6050_init+0x114>)
 8001236:	f000 fffd 	bl	8002234 <HAL_I2C_Mem_Write>
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK){
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <mpu6050_init+0x70>
		  printf("Gyroscope configured!\n");
 8001244:	482e      	ldr	r0, [pc, #184]	@ (8001300 <mpu6050_init+0x124>)
 8001246:	f003 fef1 	bl	800502c <puts>
 800124a:	e008      	b.n	800125e <mpu6050_init+0x82>
	  }
	  else{
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 800124c:	482a      	ldr	r0, [pc, #168]	@ (80012f8 <mpu6050_init+0x11c>)
 800124e:	f003 feed 	bl	800502c <puts>
		  printf("Cannot configure gyroscope.\n");
 8001252:	482c      	ldr	r0, [pc, #176]	@ (8001304 <mpu6050_init+0x128>)
 8001254:	f003 feea 	bl	800502c <puts>
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001258:	4827      	ldr	r0, [pc, #156]	@ (80012f8 <mpu6050_init+0x11c>)
 800125a:	f003 fee7 	bl	800502c <puts>
	  }
	   temp_data = 0b00001000; // set to +- 4g
 800125e:	2308      	movs	r3, #8
 8001260:	71bb      	strb	r3, [r7, #6]
		  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_ACC, 1, &temp_data, 1, 100);
 8001262:	2364      	movs	r3, #100	@ 0x64
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	2301      	movs	r3, #1
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	1dbb      	adds	r3, r7, #6
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	221c      	movs	r2, #28
 8001272:	21d0      	movs	r1, #208	@ 0xd0
 8001274:	481e      	ldr	r0, [pc, #120]	@ (80012f0 <mpu6050_init+0x114>)
 8001276:	f000 ffdd 	bl	8002234 <HAL_I2C_Mem_Write>
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
		  if (ret == HAL_OK){
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d103      	bne.n	800128c <mpu6050_init+0xb0>
			  printf("Accelerometer configured!\n");
 8001284:	4820      	ldr	r0, [pc, #128]	@ (8001308 <mpu6050_init+0x12c>)
 8001286:	f003 fed1 	bl	800502c <puts>
 800128a:	e008      	b.n	800129e <mpu6050_init+0xc2>
		  }
		  else{
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 800128c:	481a      	ldr	r0, [pc, #104]	@ (80012f8 <mpu6050_init+0x11c>)
 800128e:	f003 fecd 	bl	800502c <puts>
			  printf("Cannot configure accelerometer.\n");
 8001292:	481e      	ldr	r0, [pc, #120]	@ (800130c <mpu6050_init+0x130>)
 8001294:	f003 feca 	bl	800502c <puts>
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001298:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <mpu6050_init+0x11c>)
 800129a:	f003 fec7 	bl	800502c <puts>
		  }

	  temp_data = 0b00001000; // set to +- 4g
 800129e:	2308      	movs	r3, #8
 80012a0:	71bb      	strb	r3, [r7, #6]
		  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MANAGEMENT, 1, &temp_data, 1, 100);
 80012a2:	2364      	movs	r3, #100	@ 0x64
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	226b      	movs	r2, #107	@ 0x6b
 80012b2:	21d0      	movs	r1, #208	@ 0xd0
 80012b4:	480e      	ldr	r0, [pc, #56]	@ (80012f0 <mpu6050_init+0x114>)
 80012b6:	f000 ffbd 	bl	8002234 <HAL_I2C_Mem_Write>
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
		  if (ret == HAL_OK){
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <mpu6050_init+0xf0>
			  printf("Power management successful,thermometer turned off, exit sleep mode!\n");
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <mpu6050_init+0x134>)
 80012c6:	f003 feb1 	bl	800502c <puts>
		  else{
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
			  printf("Cannot configure power management.\n");
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
		  }
}
 80012ca:	e008      	b.n	80012de <mpu6050_init+0x102>
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 80012cc:	480a      	ldr	r0, [pc, #40]	@ (80012f8 <mpu6050_init+0x11c>)
 80012ce:	f003 fead 	bl	800502c <puts>
			  printf("Cannot configure power management.\n");
 80012d2:	4810      	ldr	r0, [pc, #64]	@ (8001314 <mpu6050_init+0x138>)
 80012d4:	f003 feaa 	bl	800502c <puts>
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <mpu6050_init+0x11c>)
 80012da:	f003 fea7 	bl	800502c <puts>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	08007608 	.word	0x08007608
 80012ec:	0800763c 	.word	0x0800763c
 80012f0:	200001f0 	.word	0x200001f0
 80012f4:	08007654 	.word	0x08007654
 80012f8:	08007664 	.word	0x08007664
 80012fc:	08007690 	.word	0x08007690
 8001300:	080076b8 	.word	0x080076b8
 8001304:	080076d0 	.word	0x080076d0
 8001308:	080076ec 	.word	0x080076ec
 800130c:	08007708 	.word	0x08007708
 8001310:	08007728 	.word	0x08007728
 8001314:	08007770 	.word	0x08007770

08001318 <mpu6050_complementary_filter>:
    printf("Accel (g): X=%.2f Y=%.2f Z=%.2f\n", ax_g, ay_g, az_g);
    printf("Gyro  (°/s): X=%.2f Y=%.2f Z=%.2f\n", gx_dps, gy_dps, gz_dps);
    printf("Temp  (°C): %.2f\n", temp_c);
}

void mpu6050_complementary_filter() {
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af04      	add	r7, sp, #16
    // Read sensor data
    int16_t acc_x, acc_y, acc_z;
    int16_t gyro_x, gyro_y, gyro_z;

    uint8_t data[14];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, DATA_START_ADDR, 1, data, 14, 100);
 800131e:	2364      	movs	r3, #100	@ 0x64
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	230e      	movs	r3, #14
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	463b      	mov	r3, r7
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	223b      	movs	r2, #59	@ 0x3b
 800132e:	21d0      	movs	r1, #208	@ 0xd0
 8001330:	4897      	ldr	r0, [pc, #604]	@ (8001590 <mpu6050_complementary_filter+0x278>)
 8001332:	f001 f879 	bl	8002428 <HAL_I2C_Mem_Read>

    acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001336:	783b      	ldrb	r3, [r7, #0]
 8001338:	b21b      	sxth	r3, r3
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	787b      	ldrb	r3, [r7, #1]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    acc_y = (int16_t)(data[2] << 8 | data[3]);
 8001346:	78bb      	ldrb	r3, [r7, #2]
 8001348:	b21b      	sxth	r3, r3
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    acc_z = (int16_t)(data[4] << 8 | data[5]);
 8001356:	793b      	ldrb	r3, [r7, #4]
 8001358:	b21b      	sxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	797b      	ldrb	r3, [r7, #5]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	877b      	strh	r3, [r7, #58]	@ 0x3a
    gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8001366:	7a3b      	ldrb	r3, [r7, #8]
 8001368:	b21b      	sxth	r3, r3
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7a7b      	ldrb	r3, [r7, #9]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	873b      	strh	r3, [r7, #56]	@ 0x38
    gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8001376:	7abb      	ldrb	r3, [r7, #10]
 8001378:	b21b      	sxth	r3, r3
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	7afb      	ldrb	r3, [r7, #11]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	86fb      	strh	r3, [r7, #54]	@ 0x36
    gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8001386:	7b3b      	ldrb	r3, [r7, #12]
 8001388:	b21b      	sxth	r3, r3
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	86bb      	strh	r3, [r7, #52]	@ 0x34

    // Convert to physical values (adjust if using different ranges)
    float ax = acc_x / 8192.0f;   // ±4g range (acc sensitivity = 8192 LSB/g)
 8001396:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8001594 <mpu6050_complementary_filter+0x27c>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float ay = acc_y / 8192.0f;
 80013ae:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ba:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001594 <mpu6050_complementary_filter+0x27c>
 80013be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float az = acc_z / 8192.0f;
 80013c6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001594 <mpu6050_complementary_filter+0x27c>
 80013d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float gx = gyro_x / 65.5f;    // ±500°/s range (gyro sensitivity = 65.5 LSB/°/s)
 80013de:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ea:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001598 <mpu6050_complementary_filter+0x280>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = gyro_y / 65.5f;
 80013f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001402:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001598 <mpu6050_complementary_filter+0x280>
 8001406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140a:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute delta time in seconds
    uint32_t now = HAL_GetTick();
 800140e:	f000 fb23 	bl	8001a58 <HAL_GetTick>
 8001412:	61f8      	str	r0, [r7, #28]
    float dt = (now - last_time) / 1000.0f;
 8001414:	4b61      	ldr	r3, [pc, #388]	@ (800159c <mpu6050_complementary_filter+0x284>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001424:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80015a0 <mpu6050_complementary_filter+0x288>
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	edc7 7a06 	vstr	s15, [r7, #24]
    last_time = now;
 8001430:	4a5a      	ldr	r2, [pc, #360]	@ (800159c <mpu6050_complementary_filter+0x284>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	6013      	str	r3, [r2, #0]

    // Compute angles from accelerometer
    float acc_roll = atan2(ay, az) * RAD_TO_DEG;
 8001436:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001438:	f7ff f8a6 	bl	8000588 <__aeabi_f2d>
 800143c:	4604      	mov	r4, r0
 800143e:	460d      	mov	r5, r1
 8001440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001442:	f7ff f8a1 	bl	8000588 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	ec43 2b11 	vmov	d1, r2, r3
 800144e:	ec45 4b10 	vmov	d0, r4, r5
 8001452:	f005 fd5f 	bl	8006f14 <atan2>
 8001456:	ec51 0b10 	vmov	r0, r1, d0
 800145a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001588 <mpu6050_complementary_filter+0x270>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8ea 	bl	8000638 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fbbc 	bl	8000be8 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	617b      	str	r3, [r7, #20]
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * RAD_TO_DEG;
 8001474:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001478:	eef1 7a67 	vneg.f32	s15, s15
 800147c:	ee17 3a90 	vmov	r3, s15
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	4604      	mov	r4, r0
 8001488:	460d      	mov	r5, r1
 800148a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800148e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001492:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001496:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149e:	ee17 0a90 	vmov	r0, s15
 80014a2:	f7ff f871 	bl	8000588 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	ec43 2b10 	vmov	d0, r2, r3
 80014ae:	f005 fd33 	bl	8006f18 <sqrt>
 80014b2:	eeb0 7a40 	vmov.f32	s14, s0
 80014b6:	eef0 7a60 	vmov.f32	s15, s1
 80014ba:	eeb0 1a47 	vmov.f32	s2, s14
 80014be:	eef0 1a67 	vmov.f32	s3, s15
 80014c2:	ec45 4b10 	vmov	d0, r4, r5
 80014c6:	f005 fd25 	bl	8006f14 <atan2>
 80014ca:	ec51 0b10 	vmov	r0, r1, d0
 80014ce:	a32e      	add	r3, pc, #184	@ (adr r3, 8001588 <mpu6050_complementary_filter+0x270>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f8b0 	bl	8000638 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb82 	bl	8000be8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

    // Complementary filter
    roll = ALPHA * (roll + gx * dt) + (1 - ALPHA) * acc_roll;
 80014e8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <mpu6050_complementary_filter+0x28c>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80015a8 <mpu6050_complementary_filter+0x290>
 8001502:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001506:	edd7 7a05 	vldr	s15, [r7, #20]
 800150a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80015ac <mpu6050_complementary_filter+0x294>
 800150e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <mpu6050_complementary_filter+0x28c>)
 8001518:	edc3 7a00 	vstr	s15, [r3]
    pitch = ALPHA * (pitch + gy * dt) + (1 - ALPHA) * acc_pitch;
 800151c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001520:	edd7 7a06 	vldr	s15, [r7, #24]
 8001524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <mpu6050_complementary_filter+0x298>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80015a8 <mpu6050_complementary_filter+0x290>
 8001536:	ee27 7a87 	vmul.f32	s14, s15, s14
 800153a:	edd7 7a04 	vldr	s15, [r7, #16]
 800153e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80015ac <mpu6050_complementary_filter+0x294>
 8001542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <mpu6050_complementary_filter+0x298>)
 800154c:	edc3 7a00 	vstr	s15, [r3]

    // Debug output
    printf("ROLL: %.2f\tPITCH: %.2f\n", roll, pitch);
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <mpu6050_complementary_filter+0x28c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f817 	bl	8000588 <__aeabi_f2d>
 800155a:	4604      	mov	r4, r0
 800155c:	460d      	mov	r5, r1
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <mpu6050_complementary_filter+0x298>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f810 	bl	8000588 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9cd 2300 	strd	r2, r3, [sp]
 8001570:	4622      	mov	r2, r4
 8001572:	462b      	mov	r3, r5
 8001574:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <mpu6050_complementary_filter+0x29c>)
 8001576:	f003 fcf1 	bl	8004f5c <iprintf>
}
 800157a:	bf00      	nop
 800157c:	3740      	adds	r7, #64	@ 0x40
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	20000000 	.word	0x20000000
 800158c:	404ca5dc 	.word	0x404ca5dc
 8001590:	200001f0 	.word	0x200001f0
 8001594:	46000000 	.word	0x46000000
 8001598:	42830000 	.word	0x42830000
 800159c:	20000294 	.word	0x20000294
 80015a0:	447a0000 	.word	0x447a0000
 80015a4:	2000028c 	.word	0x2000028c
 80015a8:	3f7ae148 	.word	0x3f7ae148
 80015ac:	3ca3d700 	.word	0x3ca3d700
 80015b0:	20000290 	.word	0x20000290
 80015b4:	08007828 	.word	0x08007828

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <HAL_MspInit+0x4c>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_I2C_MspInit+0x84>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12b      	bne.n	8001682 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001646:	23c0      	movs	r3, #192	@ 0xc0
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001656:	2304      	movs	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <HAL_I2C_MspInit+0x8c>)
 8001662:	f000 fb0f 	bl	8001c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	@ 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40005400 	.word	0x40005400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400

08001698 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	@ (800171c <HAL_UART_MspInit+0x84>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12b      	bne.n	8001712 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f2:	230c      	movs	r3, #12
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001702:	2307      	movs	r3, #7
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <HAL_UART_MspInit+0x8c>)
 800170e:	f000 fab9 	bl	8001c84 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40004400 	.word	0x40004400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <NMI_Handler+0x4>

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <MemManage_Handler+0x4>

08001740 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <UsageFault_Handler+0x4>

08001750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 f957 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_kill>:

int _kill(int pid, int sig)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a0:	f003 fd76 	bl	8005290 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2216      	movs	r2, #22
 80017a8:	601a      	str	r2, [r3, #0]
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_exit>:

void _exit (int status)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017be:	f04f 31ff 	mov.w	r1, #4294967295
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffe7 	bl	8001796 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <_exit+0x12>

080017cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e00a      	b.n	80017f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017de:	f3af 8000 	nop.w
 80017e2:	4601      	mov	r1, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf0      	blt.n	80017de <_read+0x12>
  }

  return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e009      	b.n	800182c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fbc7 	bl	8000fb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf1      	blt.n	8001818 <_write+0x12>
  }
  return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001866:	605a      	str	r2, [r3, #4]
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	@ (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f003 fcda 	bl	8005290 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	@ (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	20000298 	.word	0x20000298
 8001910:	200003f0 	.word	0x200003f0

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001970 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800193c:	f7ff ffea 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	@ (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	@ (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001966:	f003 fc99 	bl	800529c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff fb3b 	bl	8000fe4 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800197c:	08007c60 	.word	0x08007c60
  ldr r2, =_sbss
 8001980:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001984:	200003ec 	.word	0x200003ec

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f931 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fdfa 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f93b 	bl	8001c6a <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 f911 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_IncTick+0x24>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <HAL_IncTick+0x24>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	2000029c 	.word	0x2000029c

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <HAL_GetTick+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000029c 	.word	0x2000029c

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	@ (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	@ (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	@ 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	@ 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff47 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff5c 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff8e 	bl	8001b70 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffb0 	bl	8001bd8 <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e165      	b.n	8001f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	f040 8154 	bne.w	8001f66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d005      	beq.n	8001cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d130      	bne.n	8001d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 0201 	and.w	r2, r3, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d017      	beq.n	8001d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80ae 	beq.w	8001f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a5c      	ldr	r2, [pc, #368]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e26:	4a58      	ldr	r2, [pc, #352]	@ (8001f88 <HAL_GPIO_Init+0x304>)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f8c <HAL_GPIO_Init+0x308>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d025      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4e      	ldr	r2, [pc, #312]	@ (8001f90 <HAL_GPIO_Init+0x30c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <HAL_GPIO_Init+0x216>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f94 <HAL_GPIO_Init+0x310>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	@ (8001f98 <HAL_GPIO_Init+0x314>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <HAL_GPIO_Init+0x318>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x20a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa0 <HAL_GPIO_Init+0x31c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x206>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a49      	ldr	r2, [pc, #292]	@ (8001fa4 <HAL_GPIO_Init+0x320>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x202>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00c      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e00a      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x21c>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	@ (8001f88 <HAL_GPIO_Init+0x304>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a31      	ldr	r2, [pc, #196]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f12:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f36:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_GPIO_Init+0x324>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f ae96 	bls.w	8001ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e12b      	b.n	8002216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fb18 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800200e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002010:	f001 fa10 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8002014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a81      	ldr	r2, [pc, #516]	@ (8002220 <HAL_I2C_Init+0x274>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d807      	bhi.n	8002030 <HAL_I2C_Init+0x84>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a80      	ldr	r2, [pc, #512]	@ (8002224 <HAL_I2C_Init+0x278>)
 8002024:	4293      	cmp	r3, r2
 8002026:	bf94      	ite	ls
 8002028:	2301      	movls	r3, #1
 800202a:	2300      	movhi	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e006      	b.n	800203e <HAL_I2C_Init+0x92>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a7d      	ldr	r2, [pc, #500]	@ (8002228 <HAL_I2C_Init+0x27c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	bf94      	ite	ls
 8002038:	2301      	movls	r3, #1
 800203a:	2300      	movhi	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0e7      	b.n	8002216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a78      	ldr	r2, [pc, #480]	@ (800222c <HAL_I2C_Init+0x280>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0c9b      	lsrs	r3, r3, #18
 8002050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a6a      	ldr	r2, [pc, #424]	@ (8002220 <HAL_I2C_Init+0x274>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d802      	bhi.n	8002080 <HAL_I2C_Init+0xd4>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3301      	adds	r3, #1
 800207e:	e009      	b.n	8002094 <HAL_I2C_Init+0xe8>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	4a69      	ldr	r2, [pc, #420]	@ (8002230 <HAL_I2C_Init+0x284>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	3301      	adds	r3, #1
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	430b      	orrs	r3, r1
 800209a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	495c      	ldr	r1, [pc, #368]	@ (8002220 <HAL_I2C_Init+0x274>)
 80020b0:	428b      	cmp	r3, r1
 80020b2:	d819      	bhi.n	80020e8 <HAL_I2C_Init+0x13c>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1e59      	subs	r1, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c2:	1c59      	adds	r1, r3, #1
 80020c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020c8:	400b      	ands	r3, r1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_I2C_Init+0x138>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e59      	subs	r1, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e2:	e051      	b.n	8002188 <HAL_I2C_Init+0x1dc>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e04f      	b.n	8002188 <HAL_I2C_Init+0x1dc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d111      	bne.n	8002114 <HAL_I2C_Init+0x168>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	440b      	add	r3, r1
 80020fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e012      	b.n	800213a <HAL_I2C_Init+0x18e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	0099      	lsls	r1, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x196>
 800213e:	2301      	movs	r3, #1
 8002140:	e022      	b.n	8002188 <HAL_I2C_Init+0x1dc>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10e      	bne.n	8002168 <HAL_I2C_Init+0x1bc>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e58      	subs	r0, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	440b      	add	r3, r1
 8002158:	fbb0 f3f3 	udiv	r3, r0, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002166:	e00f      	b.n	8002188 <HAL_I2C_Init+0x1dc>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1e58      	subs	r0, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	0099      	lsls	r1, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	6809      	ldr	r1, [r1, #0]
 800218c:	4313      	orrs	r3, r2
 800218e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6911      	ldr	r1, [r2, #16]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68d2      	ldr	r2, [r2, #12]
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	000186a0 	.word	0x000186a0
 8002224:	001e847f 	.word	0x001e847f
 8002228:	003d08ff 	.word	0x003d08ff
 800222c:	431bde83 	.word	0x431bde83
 8002230:	10624dd3 	.word	0x10624dd3

08002234 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	460b      	mov	r3, r1
 8002248:	813b      	strh	r3, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800224e:	f7ff fc03 	bl	8001a58 <HAL_GetTick>
 8002252:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b20      	cmp	r3, #32
 800225e:	f040 80d9 	bne.w	8002414 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2319      	movs	r3, #25
 8002268:	2201      	movs	r2, #1
 800226a:	496d      	ldr	r1, [pc, #436]	@ (8002420 <HAL_I2C_Mem_Write+0x1ec>)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fdb9 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
 800227a:	e0cc      	b.n	8002416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_I2C_Mem_Write+0x56>
 8002286:	2302      	movs	r3, #2
 8002288:	e0c5      	b.n	8002416 <HAL_I2C_Mem_Write+0x1e2>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d007      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2221      	movs	r2, #33	@ 0x21
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a3a      	ldr	r2, [r7, #32]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002424 <HAL_I2C_Mem_Write+0x1f0>)
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022f2:	88f8      	ldrh	r0, [r7, #6]
 80022f4:	893a      	ldrh	r2, [r7, #8]
 80022f6:	8979      	ldrh	r1, [r7, #10]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4603      	mov	r3, r0
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fbf0 	bl	8002ae8 <I2C_RequestMemoryWrite>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d052      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e081      	b.n	8002416 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fe7e 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	2b04      	cmp	r3, #4
 8002328:	d107      	bne.n	800233a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06b      	b.n	8002416 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_I2C_Mem_Write+0x180>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1aa      	bne.n	8002312 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fe71 	bl	80030a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00d      	beq.n	80023e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d107      	bne.n	80023e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e016      	b.n	8002416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000

08002428 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	@ 0x30
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	813b      	strh	r3, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002442:	f7ff fb09 	bl	8001a58 <HAL_GetTick>
 8002446:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b20      	cmp	r3, #32
 8002452:	f040 8214 	bne.w	800287e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2319      	movs	r3, #25
 800245c:	2201      	movs	r2, #1
 800245e:	497b      	ldr	r1, [pc, #492]	@ (800264c <HAL_I2C_Mem_Read+0x224>)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fcbf 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
 800246e:	e207      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_I2C_Mem_Read+0x56>
 800247a:	2302      	movs	r3, #2
 800247c:	e200      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d007      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2222      	movs	r2, #34	@ 0x22
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2240      	movs	r2, #64	@ 0x40
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002650 <HAL_I2C_Mem_Read+0x228>)
 80024e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024e6:	88f8      	ldrh	r0, [r7, #6]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4603      	mov	r3, r0
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fb8c 	bl	8002c14 <I2C_RequestMemoryRead>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1bc      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d113      	bne.n	8002536 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e190      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253a:	2b01      	cmp	r3, #1
 800253c:	d11b      	bne.n	8002576 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e170      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	2b02      	cmp	r3, #2
 800257c:	d11b      	bne.n	80025b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800258c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800259c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	e150      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025cc:	e144      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	f200 80f1 	bhi.w	80027ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d123      	bne.n	8002628 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fda7 	bl	8003138 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e145      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002626:	e117      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	2b02      	cmp	r3, #2
 800262e:	d14e      	bne.n	80026ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002636:	2200      	movs	r2, #0
 8002638:	4906      	ldr	r1, [pc, #24]	@ (8002654 <HAL_I2C_Mem_Read+0x22c>)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fbd2 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e11a      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
 800264a:	bf00      	nop
 800264c:	00100002 	.word	0x00100002
 8002650:	ffff0000 	.word	0xffff0000
 8002654:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026cc:	e0c4      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	2200      	movs	r2, #0
 80026d6:	496c      	ldr	r1, [pc, #432]	@ (8002888 <HAL_I2C_Mem_Read+0x460>)
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fb83 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0cb      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002730:	2200      	movs	r2, #0
 8002732:	4955      	ldr	r1, [pc, #340]	@ (8002888 <HAL_I2C_Mem_Read+0x460>)
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fb55 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e09d      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b8:	e04e      	b.n	8002858 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fcba 	bl	8003138 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e058      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d124      	bne.n	8002858 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002812:	2b03      	cmp	r3, #3
 8002814:	d107      	bne.n	8002826 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002824:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	f47f aeb6 	bne.w	80025ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3728      	adds	r7, #40	@ 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	00010004 	.word	0x00010004

0800288c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	460b      	mov	r3, r1
 800289a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff f8dc 	bl	8001a58 <HAL_GetTick>
 80028a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	f040 8111 	bne.w	8002ad6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2319      	movs	r3, #25
 80028ba:	2201      	movs	r2, #1
 80028bc:	4988      	ldr	r1, [pc, #544]	@ (8002ae0 <HAL_I2C_IsDeviceReady+0x254>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa90 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	e104      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_I2C_IsDeviceReady+0x50>
 80028d8:	2302      	movs	r3, #2
 80028da:	e0fd      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d007      	beq.n	8002902 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2224      	movs	r2, #36	@ 0x24
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a70      	ldr	r2, [pc, #448]	@ (8002ae4 <HAL_I2C_IsDeviceReady+0x258>)
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002934:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa4e 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800295c:	d103      	bne.n	8002966 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0b6      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002978:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff f86d 	bl	8001a58 <HAL_GetTick>
 800297e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029ae:	e025      	b.n	80029fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029b0:	f7ff f852 	bl	8001a58 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d302      	bcc.n	80029c6 <HAL_I2C_IsDeviceReady+0x13a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	22a0      	movs	r2, #160	@ 0xa0
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a06:	d005      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0x188>
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_I2C_IsDeviceReady+0x188>
 8002a0e:	7dbb      	ldrb	r3, [r7, #22]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0cd      	beq.n	80029b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d129      	bne.n	8002a7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	4921      	ldr	r1, [pc, #132]	@ (8002ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f9c2 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e036      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e02c      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2319      	movs	r3, #25
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	490f      	ldr	r1, [pc, #60]	@ (8002ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f99e 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e012      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f4ff af32 	bcc.w	8002926 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	00100002 	.word	0x00100002
 8002ae4:	ffff0000 	.word	0xffff0000

08002ae8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f960 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b38:	d103      	bne.n	8002b42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e05f      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	492d      	ldr	r1, [pc, #180]	@ (8002c10 <I2C_RequestMemoryWrite+0x128>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f9bb 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e04c      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa46 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e02b      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	e021      	b.n	8002c04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa20 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e005      	b.n	8002c06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	00010002 	.word	0x00010002

08002c14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	460b      	mov	r3, r1
 8002c28:	813b      	strh	r3, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8c2 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c74:	d103      	bne.n	8002c7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0aa      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	4952      	ldr	r1, [pc, #328]	@ (8002de0 <I2C_RequestMemoryRead+0x1cc>)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f91d 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e097      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f9a8 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e076      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	e021      	b.n	8002d40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f982 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e050      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d42:	6a39      	ldr	r1, [r7, #32]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f967 	bl	8003018 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e035      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f82b 	bl	8002de4 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e013      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002db0:	897b      	ldrh	r3, [r7, #10]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	4906      	ldr	r1, [pc, #24]	@ (8002de0 <I2C_RequestMemoryRead+0x1cc>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f886 	bl	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	00010002 	.word	0x00010002

08002de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df4:	e048      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d044      	beq.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe fe2b 	bl	8001a58 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d139      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10d      	bne.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	43da      	mvns	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	e00c      	b.n	8002e54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d116      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e023      	b.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	e00c      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d093      	beq.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee6:	e071      	b.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d123      	bne.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e067      	b.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d041      	beq.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7fe fd86 	bl	8001a58 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d136      	bne.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10c      	bne.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e00b      	b.n	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e021      	b.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10c      	bne.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e00b      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f af6d 	bne.w	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003024:	e034      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f8e3 	bl	80031f2 <I2C_IsAcknowledgeFailed>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e034      	b.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d028      	beq.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe fd0b 	bl	8001a58 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11d      	bne.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305e:	2b80      	cmp	r3, #128	@ 0x80
 8003060:	d016      	beq.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b80      	cmp	r3, #128	@ 0x80
 800309c:	d1c3      	bne.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f89b 	bl	80031f2 <I2C_IsAcknowledgeFailed>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e034      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d028      	beq.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fcc3 	bl	8001a58 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11d      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d016      	beq.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e007      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d1c3      	bne.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003144:	e049      	b.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b10      	cmp	r3, #16
 8003152:	d119      	bne.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0210 	mvn.w	r2, #16
 800315c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e030      	b.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fe fc66 	bl	8001a58 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11d      	bne.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d016      	beq.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e007      	b.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e4:	2b40      	cmp	r3, #64	@ 0x40
 80031e6:	d1ae      	bne.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003208:	d11b      	bne.n	8003242 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003212:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fe fb8a 	bl	8001a58 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fb86 	bl	8001a58 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f855 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe faea 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08007840 	.word	0x08007840
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08007850 	.word	0x08007850

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff ffdc 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0b5b      	lsrs	r3, r3, #13
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08007850 	.word	0x08007850

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b0a6      	sub	sp, #152	@ 0x98
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034aa:	4bc8      	ldr	r3, [pc, #800]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	f200 817e 	bhi.w	80037b4 <HAL_RCC_GetSysClockFreq+0x330>
 80034b8:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080037b5 	.word	0x080037b5
 80034c8:	080037b5 	.word	0x080037b5
 80034cc:	080037b5 	.word	0x080037b5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	080037b5 	.word	0x080037b5
 80034d8:	080037b5 	.word	0x080037b5
 80034dc:	080037b5 	.word	0x080037b5
 80034e0:	08003505 	.word	0x08003505
 80034e4:	080037b5 	.word	0x080037b5
 80034e8:	080037b5 	.word	0x080037b5
 80034ec:	080037b5 	.word	0x080037b5
 80034f0:	0800366f 	.word	0x0800366f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4bb6      	ldr	r3, [pc, #728]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80034fa:	e15f      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fc:	4bb5      	ldr	r3, [pc, #724]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80034fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003502:	e15b      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	4bb1      	ldr	r3, [pc, #708]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800350c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003510:	4bae      	ldr	r3, [pc, #696]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d031      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351c:	4bab      	ldr	r3, [pc, #684]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	2200      	movs	r2, #0
 8003524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003526:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800352a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003530:	2300      	movs	r3, #0
 8003532:	667b      	str	r3, [r7, #100]	@ 0x64
 8003534:	4ba7      	ldr	r3, [pc, #668]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003536:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800353a:	462a      	mov	r2, r5
 800353c:	fb03 f202 	mul.w	r2, r3, r2
 8003540:	2300      	movs	r3, #0
 8003542:	4621      	mov	r1, r4
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	4aa2      	ldr	r2, [pc, #648]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800354c:	4621      	mov	r1, r4
 800354e:	fba1 1202 	umull	r1, r2, r1, r2
 8003552:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003554:	460a      	mov	r2, r1
 8003556:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003558:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800355a:	4413      	add	r3, r2
 800355c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003562:	2200      	movs	r2, #0
 8003564:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003566:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003568:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800356c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003570:	f7fd fb8a 	bl	8000c88 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800357e:	e064      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	2200      	movs	r2, #0
 8003588:	653b      	str	r3, [r7, #80]	@ 0x50
 800358a:	657a      	str	r2, [r7, #84]	@ 0x54
 800358c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003594:	2300      	movs	r3, #0
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003598:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800359c:	4622      	mov	r2, r4
 800359e:	462b      	mov	r3, r5
 80035a0:	f04f 0000 	mov.w	r0, #0
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	0159      	lsls	r1, r3, #5
 80035aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ae:	0150      	lsls	r0, r2, #5
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4621      	mov	r1, r4
 80035b6:	1a51      	subs	r1, r2, r1
 80035b8:	6139      	str	r1, [r7, #16]
 80035ba:	4629      	mov	r1, r5
 80035bc:	eb63 0301 	sbc.w	r3, r3, r1
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035ce:	4659      	mov	r1, fp
 80035d0:	018b      	lsls	r3, r1, #6
 80035d2:	4651      	mov	r1, sl
 80035d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d8:	4651      	mov	r1, sl
 80035da:	018a      	lsls	r2, r1, #6
 80035dc:	4651      	mov	r1, sl
 80035de:	ebb2 0801 	subs.w	r8, r2, r1
 80035e2:	4659      	mov	r1, fp
 80035e4:	eb63 0901 	sbc.w	r9, r3, r1
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fc:	4690      	mov	r8, r2
 80035fe:	4699      	mov	r9, r3
 8003600:	4623      	mov	r3, r4
 8003602:	eb18 0303 	adds.w	r3, r8, r3
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	462b      	mov	r3, r5
 800360a:	eb49 0303 	adc.w	r3, r9, r3
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361c:	4629      	mov	r1, r5
 800361e:	028b      	lsls	r3, r1, #10
 8003620:	4621      	mov	r1, r4
 8003622:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003626:	4621      	mov	r1, r4
 8003628:	028a      	lsls	r2, r1, #10
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003632:	2200      	movs	r2, #0
 8003634:	643b      	str	r3, [r7, #64]	@ 0x40
 8003636:	647a      	str	r2, [r7, #68]	@ 0x44
 8003638:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800363c:	f7fd fb24 	bl	8000c88 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800364a:	4b60      	ldr	r3, [pc, #384]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	3301      	adds	r3, #1
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800365c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800366c:	e0a6      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800366e:	4b57      	ldr	r3, [pc, #348]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003676:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367a:	4b54      	ldr	r3, [pc, #336]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02a      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b51      	ldr	r3, [pc, #324]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	2200      	movs	r2, #0
 800368e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003690:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003698:	2100      	movs	r1, #0
 800369a:	4b4e      	ldr	r3, [pc, #312]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800369c:	fb03 f201 	mul.w	r2, r3, r1
 80036a0:	2300      	movs	r3, #0
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80036aa:	fba0 1202 	umull	r1, r2, r0, r2
 80036ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80036b0:	460a      	mov	r2, r1
 80036b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80036b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036b6:	4413      	add	r3, r2
 80036b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80036ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036be:	2200      	movs	r2, #0
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80036c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80036c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80036cc:	f7fd fadc 	bl	8000c88 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036da:	e05b      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036dc:	4b3b      	ldr	r3, [pc, #236]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	2200      	movs	r2, #0
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036f8:	4642      	mov	r2, r8
 80036fa:	464b      	mov	r3, r9
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	0159      	lsls	r1, r3, #5
 8003706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370a:	0150      	lsls	r0, r2, #5
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4641      	mov	r1, r8
 8003712:	ebb2 0a01 	subs.w	sl, r2, r1
 8003716:	4649      	mov	r1, r9
 8003718:	eb63 0b01 	sbc.w	fp, r3, r1
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800372c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003730:	ebb2 040a 	subs.w	r4, r2, sl
 8003734:	eb63 050b 	sbc.w	r5, r3, fp
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	464b      	mov	r3, r9
 8003754:	eb45 0303 	adc.w	r3, r5, r3
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003766:	4629      	mov	r1, r5
 8003768:	028b      	lsls	r3, r1, #10
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003770:	4621      	mov	r1, r4
 8003772:	028a      	lsls	r2, r1, #10
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377c:	2200      	movs	r2, #0
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	61fa      	str	r2, [r7, #28]
 8003782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003786:	f7fd fa7f 	bl	8000c88 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4613      	mov	r3, r2
 8003790:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0f1b      	lsrs	r3, r3, #28
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80037a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80037b2:	e003      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80037b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80037ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3798      	adds	r7, #152	@ 0x98
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	017d7840 	.word	0x017d7840

080037d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e28d      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8083 	beq.w	80038fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037f8:	4b94      	ldr	r3, [pc, #592]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b04      	cmp	r3, #4
 8003802:	d019      	beq.n	8003838 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003804:	4b91      	ldr	r3, [pc, #580]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
        || \
 800380c:	2b08      	cmp	r3, #8
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003810:	4b8e      	ldr	r3, [pc, #568]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800381c:	d00c      	beq.n	8003838 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d112      	bne.n	8003850 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003836:	d10b      	bne.n	8003850 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	4b84      	ldr	r3, [pc, #528]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05b      	beq.n	80038fc <HAL_RCC_OscConfig+0x124>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d157      	bne.n	80038fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e25a      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003858:	d106      	bne.n	8003868 <HAL_RCC_OscConfig+0x90>
 800385a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e01d      	b.n	80038a4 <HAL_RCC_OscConfig+0xcc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0xb4>
 8003872:	4b76      	ldr	r3, [pc, #472]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b73      	ldr	r3, [pc, #460]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a72      	ldr	r2, [pc, #456]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0xcc>
 800388c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6e      	ldr	r2, [pc, #440]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b6c      	ldr	r3, [pc, #432]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800389e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe f8d4 	bl	8001a58 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fe f8d0 	bl	8001a58 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	@ 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e21f      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b61      	ldr	r3, [pc, #388]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0xdc>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f8c0 	bl	8001a58 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fe f8bc 	bl	8001a58 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	@ 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e20b      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	4b57      	ldr	r3, [pc, #348]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x104>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06f      	beq.n	80039ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800390a:	4b50      	ldr	r3, [pc, #320]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b00      	cmp	r3, #0
 8003914:	d017      	beq.n	8003946 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003916:	4b4d      	ldr	r3, [pc, #308]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
        || \
 800391e:	2b08      	cmp	r3, #8
 8003920:	d105      	bne.n	800392e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003922:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b44      	ldr	r3, [pc, #272]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x186>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1d3      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4937      	ldr	r1, [pc, #220]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <HAL_RCC_OscConfig+0x278>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe f869 	bl	8001a58 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7fe f865 	bl	8001a58 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1b4      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4925      	ldr	r1, [pc, #148]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	@ (8003a50 <HAL_RCC_OscConfig+0x278>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe f848 	bl	8001a58 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe f844 	bl	8001a58 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e193      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fe f828 	bl	8001a58 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fe f824 	bl	8001a58 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e173      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x234>
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <HAL_RCC_OscConfig+0x27c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe f811 	bl	8001a58 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00e      	b.n	8003a58 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe f80d 	bl	8001a58 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d907      	bls.n	8003a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e15c      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b8a      	ldr	r3, [pc, #552]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ea      	bne.n	8003a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8097 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b83      	ldr	r3, [pc, #524]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b7f      	ldr	r3, [pc, #508]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b7c      	ldr	r3, [pc, #496]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b79      	ldr	r3, [pc, #484]	@ (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	@ (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fd ffcd 	bl	8001a58 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fd ffc9 	bl	8001a58 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e118      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c88 <HAL_RCC_OscConfig+0x4b0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x31e>
 8003ae8:	4b66      	ldr	r3, [pc, #408]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x358>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x340>
 8003afe:	4b61      	ldr	r3, [pc, #388]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a60      	ldr	r2, [pc, #384]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x358>
 8003b18:	4b5a      	ldr	r3, [pc, #360]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a59      	ldr	r2, [pc, #356]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b24:	4b57      	ldr	r3, [pc, #348]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	4a56      	ldr	r2, [pc, #344]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd ff8e 	bl	8001a58 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd ff8a 	bl	8001a58 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0d7      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b4b      	ldr	r3, [pc, #300]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x368>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd ff78 	bl	8001a58 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd ff74 	bl	8001a58 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0c1      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b40      	ldr	r3, [pc, #256]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	4a3a      	ldr	r2, [pc, #232]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80ad 	beq.w	8003d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003baa:	4b36      	ldr	r3, [pc, #216]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d060      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d145      	bne.n	8003c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b33      	ldr	r3, [pc, #204]	@ (8003c8c <HAL_RCC_OscConfig+0x4b4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd ff48 	bl	8001a58 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fd ff44 	bl	8001a58 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e093      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b29      	ldr	r3, [pc, #164]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	071b      	lsls	r3, r3, #28
 8003c16:	491b      	ldr	r1, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c8c <HAL_RCC_OscConfig+0x4b4>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fd ff19 	bl	8001a58 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fd ff15 	bl	8001a58 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e064      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x452>
 8003c48:	e05c      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <HAL_RCC_OscConfig+0x4b4>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd ff02 	bl	8001a58 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fd fefe 	bl	8001a58 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04d      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_RCC_OscConfig+0x4ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x480>
 8003c76:	e045      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e040      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <HAL_RCC_OscConfig+0x538>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d030      	beq.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d129      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d122      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d119      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d10f      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e042      	b.n	8003dac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd fcac 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	@ 0x24
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f973 	bl	8004044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	@ 0x28
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d175      	bne.n	8003ec0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_UART_Transmit+0x2c>
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e06e      	b.n	8003ec2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2221      	movs	r2, #33	@ 0x21
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df2:	f7fd fe31 	bl	8001a58 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0c:	d108      	bne.n	8003e20 <HAL_UART_Transmit+0x6c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e003      	b.n	8003e28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e28:	e02e      	b.n	8003e88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2180      	movs	r1, #128	@ 0x80
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f848 	bl	8003eca <UART_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e03a      	b.n	8003ec2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3302      	adds	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e007      	b.n	8003e7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1cb      	bne.n	8003e2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2140      	movs	r1, #64	@ 0x40
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f814 	bl	8003eca <UART_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eda:	e03b      	b.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d037      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fd fdb8 	bl	8001a58 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e03a      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d023      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d020      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b40      	cmp	r3, #64	@ 0x40
 8003f16:	d01d      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d116      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f81d 	bl	8003f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2208      	movs	r2, #8
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e00f      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d0b4      	beq.n	8003edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b095      	sub	sp, #84	@ 0x54
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003faa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3314      	adds	r3, #20
 8003fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d119      	bne.n	8004028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60bb      	str	r3, [r7, #8]
   return(result);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	647b      	str	r3, [r7, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004014:	61ba      	str	r2, [r7, #24]
 8004016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	613b      	str	r3, [r7, #16]
   return(result);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004036:	bf00      	nop
 8004038:	3754      	adds	r7, #84	@ 0x54
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b0c0      	sub	sp, #256	@ 0x100
 800404a:	af00      	add	r7, sp, #0
 800404c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	ea40 0301 	orr.w	r3, r0, r1
 800406c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800409c:	f021 010c 	bic.w	r1, r1, #12
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040aa:	430b      	orrs	r3, r1
 80040ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	ea40 0301 	orr.w	r3, r0, r1
 80040ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004310 <UART_SetConfig+0x2cc>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0xa0>
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8d      	ldr	r3, [pc, #564]	@ (8004314 <UART_SetConfig+0x2d0>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d104      	bne.n	80040ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7ff f9ba 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80040e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040ec:	e003      	b.n	80040f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7ff f9a1 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 80040f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004100:	f040 810c 	bne.w	800431c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800410e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800411e:	415b      	adcs	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004126:	4621      	mov	r1, r4
 8004128:	eb12 0801 	adds.w	r8, r2, r1
 800412c:	4629      	mov	r1, r5
 800412e:	eb43 0901 	adc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004154:	462b      	mov	r3, r5
 8004156:	eb49 0303 	adc.w	r3, r9, r3
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800416a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800416e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004172:	460b      	mov	r3, r1
 8004174:	18db      	adds	r3, r3, r3
 8004176:	653b      	str	r3, [r7, #80]	@ 0x50
 8004178:	4613      	mov	r3, r2
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004188:	f7fc fd7e 	bl	8000c88 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <UART_SetConfig+0x2d4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b4:	415b      	adcs	r3, r3
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041bc:	4641      	mov	r1, r8
 80041be:	eb12 0a01 	adds.w	sl, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0b01 	adc.w	fp, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	4692      	mov	sl, r2
 80041de:	469b      	mov	fp, r3
 80041e0:	4643      	mov	r3, r8
 80041e2:	eb1a 0303 	adds.w	r3, sl, r3
 80041e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb4b 0303 	adc.w	r3, fp, r3
 80041f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004200:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	647b      	str	r3, [r7, #68]	@ 0x44
 8004216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800421a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800421e:	f7fc fd33 	bl	8000c88 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4611      	mov	r1, r2
 8004228:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2301 	umull	r2, r3, r3, r1
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2264      	movs	r2, #100	@ 0x64
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	1acb      	subs	r3, r1, r3
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800423e:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <UART_SetConfig+0x2d4>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800424c:	441c      	add	r4, r3
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004258:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800425c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004268:	415b      	adcs	r3, r3
 800426a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800426c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6339      	str	r1, [r7, #48]	@ 0x30
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042da:	f7fc fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <UART_SetConfig+0x2d4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	@ 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3332      	adds	r3, #50	@ 0x32
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <UART_SetConfig+0x2d4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4422      	add	r2, r4
 800430a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800430c:	e106      	b.n	800451c <UART_SetConfig+0x4d8>
 800430e:	bf00      	nop
 8004310:	40011000 	.word	0x40011000
 8004314:	40011400 	.word	0x40011400
 8004318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800431c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004326:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800432a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	1891      	adds	r1, r2, r2
 8004334:	6239      	str	r1, [r7, #32]
 8004336:	415b      	adcs	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
 800433a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433e:	4641      	mov	r1, r8
 8004340:	1854      	adds	r4, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0501 	adc.w	r5, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	00eb      	lsls	r3, r5, #3
 8004352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	4643      	mov	r3, r8
 800435e:	18e3      	adds	r3, r4, r3
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004364:	464b      	mov	r3, r9
 8004366:	eb45 0303 	adc.w	r3, r5, r3
 800436a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800437a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438a:	4629      	mov	r1, r5
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004394:	4621      	mov	r1, r4
 8004396:	008a      	lsls	r2, r1, #2
 8004398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800439c:	f7fc fc74 	bl	8000c88 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b60      	ldr	r3, [pc, #384]	@ (8004528 <UART_SetConfig+0x4e4>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	61b9      	str	r1, [r7, #24]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d0:	4641      	mov	r1, r8
 80043d2:	1851      	adds	r1, r2, r1
 80043d4:	6139      	str	r1, [r7, #16]
 80043d6:	4649      	mov	r1, r9
 80043d8:	414b      	adcs	r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4651      	mov	r1, sl
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4642      	mov	r2, r8
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800441a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800443a:	f7fc fc25 	bl	8000c88 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <UART_SetConfig+0x4e4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	@ 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	@ 0x32
 8004458:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <UART_SetConfig+0x4e4>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004464:	441c      	add	r4, r3
 8004466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446a:	2200      	movs	r2, #0
 800446c:	673b      	str	r3, [r7, #112]	@ 0x70
 800446e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	415b      	adcs	r3, r3
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b6:	464b      	mov	r3, r9
 80044b8:	460a      	mov	r2, r1
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044d8:	4649      	mov	r1, r9
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	4641      	mov	r1, r8
 80044de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e2:	4641      	mov	r1, r8
 80044e4:	008a      	lsls	r2, r1, #2
 80044e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044ea:	f7fc fbcd 	bl	8000c88 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <UART_SetConfig+0x4e4>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	@ 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	3332      	adds	r3, #50	@ 0x32
 8004506:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <UART_SetConfig+0x4e4>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004522:	46bd      	mov	sp, r7
 8004524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <__cvt>:
 800452c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004530:	ec57 6b10 	vmov	r6, r7, d0
 8004534:	2f00      	cmp	r7, #0
 8004536:	460c      	mov	r4, r1
 8004538:	4619      	mov	r1, r3
 800453a:	463b      	mov	r3, r7
 800453c:	bfbb      	ittet	lt
 800453e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004542:	461f      	movlt	r7, r3
 8004544:	2300      	movge	r3, #0
 8004546:	232d      	movlt	r3, #45	@ 0x2d
 8004548:	700b      	strb	r3, [r1, #0]
 800454a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800454c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004550:	4691      	mov	r9, r2
 8004552:	f023 0820 	bic.w	r8, r3, #32
 8004556:	bfbc      	itt	lt
 8004558:	4632      	movlt	r2, r6
 800455a:	4616      	movlt	r6, r2
 800455c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004560:	d005      	beq.n	800456e <__cvt+0x42>
 8004562:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004566:	d100      	bne.n	800456a <__cvt+0x3e>
 8004568:	3401      	adds	r4, #1
 800456a:	2102      	movs	r1, #2
 800456c:	e000      	b.n	8004570 <__cvt+0x44>
 800456e:	2103      	movs	r1, #3
 8004570:	ab03      	add	r3, sp, #12
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	ab02      	add	r3, sp, #8
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	ec47 6b10 	vmov	d0, r6, r7
 800457c:	4653      	mov	r3, sl
 800457e:	4622      	mov	r2, r4
 8004580:	f000 ff3e 	bl	8005400 <_dtoa_r>
 8004584:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004588:	4605      	mov	r5, r0
 800458a:	d119      	bne.n	80045c0 <__cvt+0x94>
 800458c:	f019 0f01 	tst.w	r9, #1
 8004590:	d00e      	beq.n	80045b0 <__cvt+0x84>
 8004592:	eb00 0904 	add.w	r9, r0, r4
 8004596:	2200      	movs	r2, #0
 8004598:	2300      	movs	r3, #0
 800459a:	4630      	mov	r0, r6
 800459c:	4639      	mov	r1, r7
 800459e:	f7fc fab3 	bl	8000b08 <__aeabi_dcmpeq>
 80045a2:	b108      	cbz	r0, 80045a8 <__cvt+0x7c>
 80045a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80045a8:	2230      	movs	r2, #48	@ 0x30
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	454b      	cmp	r3, r9
 80045ae:	d31e      	bcc.n	80045ee <__cvt+0xc2>
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045b4:	1b5b      	subs	r3, r3, r5
 80045b6:	4628      	mov	r0, r5
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	b004      	add	sp, #16
 80045bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045c4:	eb00 0904 	add.w	r9, r0, r4
 80045c8:	d1e5      	bne.n	8004596 <__cvt+0x6a>
 80045ca:	7803      	ldrb	r3, [r0, #0]
 80045cc:	2b30      	cmp	r3, #48	@ 0x30
 80045ce:	d10a      	bne.n	80045e6 <__cvt+0xba>
 80045d0:	2200      	movs	r2, #0
 80045d2:	2300      	movs	r3, #0
 80045d4:	4630      	mov	r0, r6
 80045d6:	4639      	mov	r1, r7
 80045d8:	f7fc fa96 	bl	8000b08 <__aeabi_dcmpeq>
 80045dc:	b918      	cbnz	r0, 80045e6 <__cvt+0xba>
 80045de:	f1c4 0401 	rsb	r4, r4, #1
 80045e2:	f8ca 4000 	str.w	r4, [sl]
 80045e6:	f8da 3000 	ldr.w	r3, [sl]
 80045ea:	4499      	add	r9, r3
 80045ec:	e7d3      	b.n	8004596 <__cvt+0x6a>
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	9103      	str	r1, [sp, #12]
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e7d9      	b.n	80045aa <__cvt+0x7e>

080045f6 <__exponent>:
 80045f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045f8:	2900      	cmp	r1, #0
 80045fa:	bfba      	itte	lt
 80045fc:	4249      	neglt	r1, r1
 80045fe:	232d      	movlt	r3, #45	@ 0x2d
 8004600:	232b      	movge	r3, #43	@ 0x2b
 8004602:	2909      	cmp	r1, #9
 8004604:	7002      	strb	r2, [r0, #0]
 8004606:	7043      	strb	r3, [r0, #1]
 8004608:	dd29      	ble.n	800465e <__exponent+0x68>
 800460a:	f10d 0307 	add.w	r3, sp, #7
 800460e:	461d      	mov	r5, r3
 8004610:	270a      	movs	r7, #10
 8004612:	461a      	mov	r2, r3
 8004614:	fbb1 f6f7 	udiv	r6, r1, r7
 8004618:	fb07 1416 	mls	r4, r7, r6, r1
 800461c:	3430      	adds	r4, #48	@ 0x30
 800461e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004622:	460c      	mov	r4, r1
 8004624:	2c63      	cmp	r4, #99	@ 0x63
 8004626:	f103 33ff 	add.w	r3, r3, #4294967295
 800462a:	4631      	mov	r1, r6
 800462c:	dcf1      	bgt.n	8004612 <__exponent+0x1c>
 800462e:	3130      	adds	r1, #48	@ 0x30
 8004630:	1e94      	subs	r4, r2, #2
 8004632:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004636:	1c41      	adds	r1, r0, #1
 8004638:	4623      	mov	r3, r4
 800463a:	42ab      	cmp	r3, r5
 800463c:	d30a      	bcc.n	8004654 <__exponent+0x5e>
 800463e:	f10d 0309 	add.w	r3, sp, #9
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	42ac      	cmp	r4, r5
 8004646:	bf88      	it	hi
 8004648:	2300      	movhi	r3, #0
 800464a:	3302      	adds	r3, #2
 800464c:	4403      	add	r3, r0
 800464e:	1a18      	subs	r0, r3, r0
 8004650:	b003      	add	sp, #12
 8004652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004654:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004658:	f801 6f01 	strb.w	r6, [r1, #1]!
 800465c:	e7ed      	b.n	800463a <__exponent+0x44>
 800465e:	2330      	movs	r3, #48	@ 0x30
 8004660:	3130      	adds	r1, #48	@ 0x30
 8004662:	7083      	strb	r3, [r0, #2]
 8004664:	70c1      	strb	r1, [r0, #3]
 8004666:	1d03      	adds	r3, r0, #4
 8004668:	e7f1      	b.n	800464e <__exponent+0x58>
	...

0800466c <_printf_float>:
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b08d      	sub	sp, #52	@ 0x34
 8004672:	460c      	mov	r4, r1
 8004674:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004678:	4616      	mov	r6, r2
 800467a:	461f      	mov	r7, r3
 800467c:	4605      	mov	r5, r0
 800467e:	f000 fdbd 	bl	80051fc <_localeconv_r>
 8004682:	6803      	ldr	r3, [r0, #0]
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb fe12 	bl	80002b0 <strlen>
 800468c:	2300      	movs	r3, #0
 800468e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004690:	f8d8 3000 	ldr.w	r3, [r8]
 8004694:	9005      	str	r0, [sp, #20]
 8004696:	3307      	adds	r3, #7
 8004698:	f023 0307 	bic.w	r3, r3, #7
 800469c:	f103 0208 	add.w	r2, r3, #8
 80046a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046a4:	f8d4 b000 	ldr.w	fp, [r4]
 80046a8:	f8c8 2000 	str.w	r2, [r8]
 80046ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046b4:	9307      	str	r3, [sp, #28]
 80046b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80046ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004934 <_printf_float+0x2c8>)
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	f7fc fa50 	bl	8000b6c <__aeabi_dcmpun>
 80046cc:	bb70      	cbnz	r0, 800472c <_printf_float+0xc0>
 80046ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046d2:	4b98      	ldr	r3, [pc, #608]	@ (8004934 <_printf_float+0x2c8>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	f7fc fa2a 	bl	8000b30 <__aeabi_dcmple>
 80046dc:	bb30      	cbnz	r0, 800472c <_printf_float+0xc0>
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4640      	mov	r0, r8
 80046e4:	4649      	mov	r1, r9
 80046e6:	f7fc fa19 	bl	8000b1c <__aeabi_dcmplt>
 80046ea:	b110      	cbz	r0, 80046f2 <_printf_float+0x86>
 80046ec:	232d      	movs	r3, #45	@ 0x2d
 80046ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f2:	4a91      	ldr	r2, [pc, #580]	@ (8004938 <_printf_float+0x2cc>)
 80046f4:	4b91      	ldr	r3, [pc, #580]	@ (800493c <_printf_float+0x2d0>)
 80046f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046fa:	bf8c      	ite	hi
 80046fc:	4690      	movhi	r8, r2
 80046fe:	4698      	movls	r8, r3
 8004700:	2303      	movs	r3, #3
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f02b 0304 	bic.w	r3, fp, #4
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	f04f 0900 	mov.w	r9, #0
 800470e:	9700      	str	r7, [sp, #0]
 8004710:	4633      	mov	r3, r6
 8004712:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004714:	4621      	mov	r1, r4
 8004716:	4628      	mov	r0, r5
 8004718:	f000 f9d2 	bl	8004ac0 <_printf_common>
 800471c:	3001      	adds	r0, #1
 800471e:	f040 808d 	bne.w	800483c <_printf_float+0x1d0>
 8004722:	f04f 30ff 	mov.w	r0, #4294967295
 8004726:	b00d      	add	sp, #52	@ 0x34
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	4640      	mov	r0, r8
 8004732:	4649      	mov	r1, r9
 8004734:	f7fc fa1a 	bl	8000b6c <__aeabi_dcmpun>
 8004738:	b140      	cbz	r0, 800474c <_printf_float+0xe0>
 800473a:	464b      	mov	r3, r9
 800473c:	2b00      	cmp	r3, #0
 800473e:	bfbc      	itt	lt
 8004740:	232d      	movlt	r3, #45	@ 0x2d
 8004742:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004746:	4a7e      	ldr	r2, [pc, #504]	@ (8004940 <_printf_float+0x2d4>)
 8004748:	4b7e      	ldr	r3, [pc, #504]	@ (8004944 <_printf_float+0x2d8>)
 800474a:	e7d4      	b.n	80046f6 <_printf_float+0x8a>
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004752:	9206      	str	r2, [sp, #24]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	d13b      	bne.n	80047d0 <_printf_float+0x164>
 8004758:	2306      	movs	r3, #6
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004760:	2300      	movs	r3, #0
 8004762:	6022      	str	r2, [r4, #0]
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	ab0a      	add	r3, sp, #40	@ 0x28
 8004768:	e9cd a301 	strd	sl, r3, [sp, #4]
 800476c:	ab09      	add	r3, sp, #36	@ 0x24
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	6861      	ldr	r1, [r4, #4]
 8004772:	ec49 8b10 	vmov	d0, r8, r9
 8004776:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800477a:	4628      	mov	r0, r5
 800477c:	f7ff fed6 	bl	800452c <__cvt>
 8004780:	9b06      	ldr	r3, [sp, #24]
 8004782:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004784:	2b47      	cmp	r3, #71	@ 0x47
 8004786:	4680      	mov	r8, r0
 8004788:	d129      	bne.n	80047de <_printf_float+0x172>
 800478a:	1cc8      	adds	r0, r1, #3
 800478c:	db02      	blt.n	8004794 <_printf_float+0x128>
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	4299      	cmp	r1, r3
 8004792:	dd41      	ble.n	8004818 <_printf_float+0x1ac>
 8004794:	f1aa 0a02 	sub.w	sl, sl, #2
 8004798:	fa5f fa8a 	uxtb.w	sl, sl
 800479c:	3901      	subs	r1, #1
 800479e:	4652      	mov	r2, sl
 80047a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80047a6:	f7ff ff26 	bl	80045f6 <__exponent>
 80047aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047ac:	1813      	adds	r3, r2, r0
 80047ae:	2a01      	cmp	r2, #1
 80047b0:	4681      	mov	r9, r0
 80047b2:	6123      	str	r3, [r4, #16]
 80047b4:	dc02      	bgt.n	80047bc <_printf_float+0x150>
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	07d2      	lsls	r2, r2, #31
 80047ba:	d501      	bpl.n	80047c0 <_printf_float+0x154>
 80047bc:	3301      	adds	r3, #1
 80047be:	6123      	str	r3, [r4, #16]
 80047c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0a2      	beq.n	800470e <_printf_float+0xa2>
 80047c8:	232d      	movs	r3, #45	@ 0x2d
 80047ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ce:	e79e      	b.n	800470e <_printf_float+0xa2>
 80047d0:	9a06      	ldr	r2, [sp, #24]
 80047d2:	2a47      	cmp	r2, #71	@ 0x47
 80047d4:	d1c2      	bne.n	800475c <_printf_float+0xf0>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1c0      	bne.n	800475c <_printf_float+0xf0>
 80047da:	2301      	movs	r3, #1
 80047dc:	e7bd      	b.n	800475a <_printf_float+0xee>
 80047de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047e2:	d9db      	bls.n	800479c <_printf_float+0x130>
 80047e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047e8:	d118      	bne.n	800481c <_printf_float+0x1b0>
 80047ea:	2900      	cmp	r1, #0
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	dd0b      	ble.n	8004808 <_printf_float+0x19c>
 80047f0:	6121      	str	r1, [r4, #16]
 80047f2:	b913      	cbnz	r3, 80047fa <_printf_float+0x18e>
 80047f4:	6822      	ldr	r2, [r4, #0]
 80047f6:	07d0      	lsls	r0, r2, #31
 80047f8:	d502      	bpl.n	8004800 <_printf_float+0x194>
 80047fa:	3301      	adds	r3, #1
 80047fc:	440b      	add	r3, r1
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004802:	f04f 0900 	mov.w	r9, #0
 8004806:	e7db      	b.n	80047c0 <_printf_float+0x154>
 8004808:	b913      	cbnz	r3, 8004810 <_printf_float+0x1a4>
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	07d2      	lsls	r2, r2, #31
 800480e:	d501      	bpl.n	8004814 <_printf_float+0x1a8>
 8004810:	3302      	adds	r3, #2
 8004812:	e7f4      	b.n	80047fe <_printf_float+0x192>
 8004814:	2301      	movs	r3, #1
 8004816:	e7f2      	b.n	80047fe <_printf_float+0x192>
 8004818:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800481c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800481e:	4299      	cmp	r1, r3
 8004820:	db05      	blt.n	800482e <_printf_float+0x1c2>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	6121      	str	r1, [r4, #16]
 8004826:	07d8      	lsls	r0, r3, #31
 8004828:	d5ea      	bpl.n	8004800 <_printf_float+0x194>
 800482a:	1c4b      	adds	r3, r1, #1
 800482c:	e7e7      	b.n	80047fe <_printf_float+0x192>
 800482e:	2900      	cmp	r1, #0
 8004830:	bfd4      	ite	le
 8004832:	f1c1 0202 	rsble	r2, r1, #2
 8004836:	2201      	movgt	r2, #1
 8004838:	4413      	add	r3, r2
 800483a:	e7e0      	b.n	80047fe <_printf_float+0x192>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	055a      	lsls	r2, r3, #21
 8004840:	d407      	bmi.n	8004852 <_printf_float+0x1e6>
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	4642      	mov	r2, r8
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	d12b      	bne.n	80048a8 <_printf_float+0x23c>
 8004850:	e767      	b.n	8004722 <_printf_float+0xb6>
 8004852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004856:	f240 80dd 	bls.w	8004a14 <_printf_float+0x3a8>
 800485a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	f7fc f951 	bl	8000b08 <__aeabi_dcmpeq>
 8004866:	2800      	cmp	r0, #0
 8004868:	d033      	beq.n	80048d2 <_printf_float+0x266>
 800486a:	4a37      	ldr	r2, [pc, #220]	@ (8004948 <_printf_float+0x2dc>)
 800486c:	2301      	movs	r3, #1
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	f43f af54 	beq.w	8004722 <_printf_float+0xb6>
 800487a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800487e:	4543      	cmp	r3, r8
 8004880:	db02      	blt.n	8004888 <_printf_float+0x21c>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	07d8      	lsls	r0, r3, #31
 8004886:	d50f      	bpl.n	80048a8 <_printf_float+0x23c>
 8004888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	f43f af45 	beq.w	8004722 <_printf_float+0xb6>
 8004898:	f04f 0900 	mov.w	r9, #0
 800489c:	f108 38ff 	add.w	r8, r8, #4294967295
 80048a0:	f104 0a1a 	add.w	sl, r4, #26
 80048a4:	45c8      	cmp	r8, r9
 80048a6:	dc09      	bgt.n	80048bc <_printf_float+0x250>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	079b      	lsls	r3, r3, #30
 80048ac:	f100 8103 	bmi.w	8004ab6 <_printf_float+0x44a>
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048b4:	4298      	cmp	r0, r3
 80048b6:	bfb8      	it	lt
 80048b8:	4618      	movlt	r0, r3
 80048ba:	e734      	b.n	8004726 <_printf_float+0xba>
 80048bc:	2301      	movs	r3, #1
 80048be:	4652      	mov	r2, sl
 80048c0:	4631      	mov	r1, r6
 80048c2:	4628      	mov	r0, r5
 80048c4:	47b8      	blx	r7
 80048c6:	3001      	adds	r0, #1
 80048c8:	f43f af2b 	beq.w	8004722 <_printf_float+0xb6>
 80048cc:	f109 0901 	add.w	r9, r9, #1
 80048d0:	e7e8      	b.n	80048a4 <_printf_float+0x238>
 80048d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	dc39      	bgt.n	800494c <_printf_float+0x2e0>
 80048d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <_printf_float+0x2dc>)
 80048da:	2301      	movs	r3, #1
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f af1d 	beq.w	8004722 <_printf_float+0xb6>
 80048e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80048ec:	ea59 0303 	orrs.w	r3, r9, r3
 80048f0:	d102      	bne.n	80048f8 <_printf_float+0x28c>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	07d9      	lsls	r1, r3, #31
 80048f6:	d5d7      	bpl.n	80048a8 <_printf_float+0x23c>
 80048f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fc:	4631      	mov	r1, r6
 80048fe:	4628      	mov	r0, r5
 8004900:	47b8      	blx	r7
 8004902:	3001      	adds	r0, #1
 8004904:	f43f af0d 	beq.w	8004722 <_printf_float+0xb6>
 8004908:	f04f 0a00 	mov.w	sl, #0
 800490c:	f104 0b1a 	add.w	fp, r4, #26
 8004910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004912:	425b      	negs	r3, r3
 8004914:	4553      	cmp	r3, sl
 8004916:	dc01      	bgt.n	800491c <_printf_float+0x2b0>
 8004918:	464b      	mov	r3, r9
 800491a:	e793      	b.n	8004844 <_printf_float+0x1d8>
 800491c:	2301      	movs	r3, #1
 800491e:	465a      	mov	r2, fp
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f aefb 	beq.w	8004722 <_printf_float+0xb6>
 800492c:	f10a 0a01 	add.w	sl, sl, #1
 8004930:	e7ee      	b.n	8004910 <_printf_float+0x2a4>
 8004932:	bf00      	nop
 8004934:	7fefffff 	.word	0x7fefffff
 8004938:	0800785c 	.word	0x0800785c
 800493c:	08007858 	.word	0x08007858
 8004940:	08007864 	.word	0x08007864
 8004944:	08007860 	.word	0x08007860
 8004948:	08007868 	.word	0x08007868
 800494c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800494e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004952:	4553      	cmp	r3, sl
 8004954:	bfa8      	it	ge
 8004956:	4653      	movge	r3, sl
 8004958:	2b00      	cmp	r3, #0
 800495a:	4699      	mov	r9, r3
 800495c:	dc36      	bgt.n	80049cc <_printf_float+0x360>
 800495e:	f04f 0b00 	mov.w	fp, #0
 8004962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004966:	f104 021a 	add.w	r2, r4, #26
 800496a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800496c:	9306      	str	r3, [sp, #24]
 800496e:	eba3 0309 	sub.w	r3, r3, r9
 8004972:	455b      	cmp	r3, fp
 8004974:	dc31      	bgt.n	80049da <_printf_float+0x36e>
 8004976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004978:	459a      	cmp	sl, r3
 800497a:	dc3a      	bgt.n	80049f2 <_printf_float+0x386>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	07da      	lsls	r2, r3, #31
 8004980:	d437      	bmi.n	80049f2 <_printf_float+0x386>
 8004982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004984:	ebaa 0903 	sub.w	r9, sl, r3
 8004988:	9b06      	ldr	r3, [sp, #24]
 800498a:	ebaa 0303 	sub.w	r3, sl, r3
 800498e:	4599      	cmp	r9, r3
 8004990:	bfa8      	it	ge
 8004992:	4699      	movge	r9, r3
 8004994:	f1b9 0f00 	cmp.w	r9, #0
 8004998:	dc33      	bgt.n	8004a02 <_printf_float+0x396>
 800499a:	f04f 0800 	mov.w	r8, #0
 800499e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049a2:	f104 0b1a 	add.w	fp, r4, #26
 80049a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a8:	ebaa 0303 	sub.w	r3, sl, r3
 80049ac:	eba3 0309 	sub.w	r3, r3, r9
 80049b0:	4543      	cmp	r3, r8
 80049b2:	f77f af79 	ble.w	80048a8 <_printf_float+0x23c>
 80049b6:	2301      	movs	r3, #1
 80049b8:	465a      	mov	r2, fp
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f aeae 	beq.w	8004722 <_printf_float+0xb6>
 80049c6:	f108 0801 	add.w	r8, r8, #1
 80049ca:	e7ec      	b.n	80049a6 <_printf_float+0x33a>
 80049cc:	4642      	mov	r2, r8
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	d1c2      	bne.n	800495e <_printf_float+0x2f2>
 80049d8:	e6a3      	b.n	8004722 <_printf_float+0xb6>
 80049da:	2301      	movs	r3, #1
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	9206      	str	r2, [sp, #24]
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	f43f ae9c 	beq.w	8004722 <_printf_float+0xb6>
 80049ea:	9a06      	ldr	r2, [sp, #24]
 80049ec:	f10b 0b01 	add.w	fp, fp, #1
 80049f0:	e7bb      	b.n	800496a <_printf_float+0x2fe>
 80049f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	d1c0      	bne.n	8004982 <_printf_float+0x316>
 8004a00:	e68f      	b.n	8004722 <_printf_float+0xb6>
 8004a02:	9a06      	ldr	r2, [sp, #24]
 8004a04:	464b      	mov	r3, r9
 8004a06:	4442      	add	r2, r8
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b8      	blx	r7
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d1c3      	bne.n	800499a <_printf_float+0x32e>
 8004a12:	e686      	b.n	8004722 <_printf_float+0xb6>
 8004a14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a18:	f1ba 0f01 	cmp.w	sl, #1
 8004a1c:	dc01      	bgt.n	8004a22 <_printf_float+0x3b6>
 8004a1e:	07db      	lsls	r3, r3, #31
 8004a20:	d536      	bpl.n	8004a90 <_printf_float+0x424>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4642      	mov	r2, r8
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f ae78 	beq.w	8004722 <_printf_float+0xb6>
 8004a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f ae70 	beq.w	8004722 <_printf_float+0xb6>
 8004a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a46:	2200      	movs	r2, #0
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a4e:	f7fc f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8004a52:	b9c0      	cbnz	r0, 8004a86 <_printf_float+0x41a>
 8004a54:	4653      	mov	r3, sl
 8004a56:	f108 0201 	add.w	r2, r8, #1
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	d10c      	bne.n	8004a7e <_printf_float+0x412>
 8004a64:	e65d      	b.n	8004722 <_printf_float+0xb6>
 8004a66:	2301      	movs	r3, #1
 8004a68:	465a      	mov	r2, fp
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f ae56 	beq.w	8004722 <_printf_float+0xb6>
 8004a76:	f108 0801 	add.w	r8, r8, #1
 8004a7a:	45d0      	cmp	r8, sl
 8004a7c:	dbf3      	blt.n	8004a66 <_printf_float+0x3fa>
 8004a7e:	464b      	mov	r3, r9
 8004a80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a84:	e6df      	b.n	8004846 <_printf_float+0x1da>
 8004a86:	f04f 0800 	mov.w	r8, #0
 8004a8a:	f104 0b1a 	add.w	fp, r4, #26
 8004a8e:	e7f4      	b.n	8004a7a <_printf_float+0x40e>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4642      	mov	r2, r8
 8004a94:	e7e1      	b.n	8004a5a <_printf_float+0x3ee>
 8004a96:	2301      	movs	r3, #1
 8004a98:	464a      	mov	r2, r9
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f ae3e 	beq.w	8004722 <_printf_float+0xb6>
 8004aa6:	f108 0801 	add.w	r8, r8, #1
 8004aaa:	68e3      	ldr	r3, [r4, #12]
 8004aac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004aae:	1a5b      	subs	r3, r3, r1
 8004ab0:	4543      	cmp	r3, r8
 8004ab2:	dcf0      	bgt.n	8004a96 <_printf_float+0x42a>
 8004ab4:	e6fc      	b.n	80048b0 <_printf_float+0x244>
 8004ab6:	f04f 0800 	mov.w	r8, #0
 8004aba:	f104 0919 	add.w	r9, r4, #25
 8004abe:	e7f4      	b.n	8004aaa <_printf_float+0x43e>

08004ac0 <_printf_common>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	4698      	mov	r8, r3
 8004ac8:	688a      	ldr	r2, [r1, #8]
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bfb8      	it	lt
 8004ad4:	4613      	movlt	r3, r2
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004adc:	4607      	mov	r7, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	b10a      	cbz	r2, 8004ae6 <_printf_common+0x26>
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	0699      	lsls	r1, r3, #26
 8004aea:	bf42      	ittt	mi
 8004aec:	6833      	ldrmi	r3, [r6, #0]
 8004aee:	3302      	addmi	r3, #2
 8004af0:	6033      	strmi	r3, [r6, #0]
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	f015 0506 	ands.w	r5, r5, #6
 8004af8:	d106      	bne.n	8004b08 <_printf_common+0x48>
 8004afa:	f104 0a19 	add.w	sl, r4, #25
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	6832      	ldr	r2, [r6, #0]
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dc26      	bgt.n	8004b56 <_printf_common+0x96>
 8004b08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	3b00      	subs	r3, #0
 8004b10:	bf18      	it	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	0692      	lsls	r2, r2, #26
 8004b16:	d42b      	bmi.n	8004b70 <_printf_common+0xb0>
 8004b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c8      	blx	r9
 8004b22:	3001      	adds	r0, #1
 8004b24:	d01e      	beq.n	8004b64 <_printf_common+0xa4>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	6922      	ldr	r2, [r4, #16]
 8004b2a:	f003 0306 	and.w	r3, r3, #6
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	bf02      	ittt	eq
 8004b32:	68e5      	ldreq	r5, [r4, #12]
 8004b34:	6833      	ldreq	r3, [r6, #0]
 8004b36:	1aed      	subeq	r5, r5, r3
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	bf0c      	ite	eq
 8004b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b40:	2500      	movne	r5, #0
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bfc4      	itt	gt
 8004b46:	1a9b      	subgt	r3, r3, r2
 8004b48:	18ed      	addgt	r5, r5, r3
 8004b4a:	2600      	movs	r6, #0
 8004b4c:	341a      	adds	r4, #26
 8004b4e:	42b5      	cmp	r5, r6
 8004b50:	d11a      	bne.n	8004b88 <_printf_common+0xc8>
 8004b52:	2000      	movs	r0, #0
 8004b54:	e008      	b.n	8004b68 <_printf_common+0xa8>
 8004b56:	2301      	movs	r3, #1
 8004b58:	4652      	mov	r2, sl
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	47c8      	blx	r9
 8004b60:	3001      	adds	r0, #1
 8004b62:	d103      	bne.n	8004b6c <_printf_common+0xac>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	e7c6      	b.n	8004afe <_printf_common+0x3e>
 8004b70:	18e1      	adds	r1, r4, r3
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	2030      	movs	r0, #48	@ 0x30
 8004b76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b7a:	4422      	add	r2, r4
 8004b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b84:	3302      	adds	r3, #2
 8004b86:	e7c7      	b.n	8004b18 <_printf_common+0x58>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	4638      	mov	r0, r7
 8004b90:	47c8      	blx	r9
 8004b92:	3001      	adds	r0, #1
 8004b94:	d0e6      	beq.n	8004b64 <_printf_common+0xa4>
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7d9      	b.n	8004b4e <_printf_common+0x8e>
	...

08004b9c <_printf_i>:
 8004b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	7e0f      	ldrb	r7, [r1, #24]
 8004ba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ba4:	2f78      	cmp	r7, #120	@ 0x78
 8004ba6:	4691      	mov	r9, r2
 8004ba8:	4680      	mov	r8, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	469a      	mov	sl, r3
 8004bae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bb2:	d807      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bb4:	2f62      	cmp	r7, #98	@ 0x62
 8004bb6:	d80a      	bhi.n	8004bce <_printf_i+0x32>
 8004bb8:	2f00      	cmp	r7, #0
 8004bba:	f000 80d1 	beq.w	8004d60 <_printf_i+0x1c4>
 8004bbe:	2f58      	cmp	r7, #88	@ 0x58
 8004bc0:	f000 80b8 	beq.w	8004d34 <_printf_i+0x198>
 8004bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bcc:	e03a      	b.n	8004c44 <_printf_i+0xa8>
 8004bce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bd2:	2b15      	cmp	r3, #21
 8004bd4:	d8f6      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bd6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bdc <_printf_i+0x40>)
 8004bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bdc:	08004c35 	.word	0x08004c35
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004bc5 	.word	0x08004bc5
 8004be8:	08004bc5 	.word	0x08004bc5
 8004bec:	08004bc5 	.word	0x08004bc5
 8004bf0:	08004bc5 	.word	0x08004bc5
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004bc5 	.word	0x08004bc5
 8004bfc:	08004bc5 	.word	0x08004bc5
 8004c00:	08004bc5 	.word	0x08004bc5
 8004c04:	08004bc5 	.word	0x08004bc5
 8004c08:	08004d47 	.word	0x08004d47
 8004c0c:	08004c73 	.word	0x08004c73
 8004c10:	08004d01 	.word	0x08004d01
 8004c14:	08004bc5 	.word	0x08004bc5
 8004c18:	08004bc5 	.word	0x08004bc5
 8004c1c:	08004d69 	.word	0x08004d69
 8004c20:	08004bc5 	.word	0x08004bc5
 8004c24:	08004c73 	.word	0x08004c73
 8004c28:	08004bc5 	.word	0x08004bc5
 8004c2c:	08004bc5 	.word	0x08004bc5
 8004c30:	08004d09 	.word	0x08004d09
 8004c34:	6833      	ldr	r3, [r6, #0]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6032      	str	r2, [r6, #0]
 8004c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c44:	2301      	movs	r3, #1
 8004c46:	e09c      	b.n	8004d82 <_printf_i+0x1e6>
 8004c48:	6833      	ldr	r3, [r6, #0]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	6031      	str	r1, [r6, #0]
 8004c50:	0606      	lsls	r6, r0, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xbc>
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	e003      	b.n	8004c60 <_printf_i+0xc4>
 8004c58:	0645      	lsls	r5, r0, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xb8>
 8004c5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	da03      	bge.n	8004c6c <_printf_i+0xd0>
 8004c64:	232d      	movs	r3, #45	@ 0x2d
 8004c66:	426d      	negs	r5, r5
 8004c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c6c:	4858      	ldr	r0, [pc, #352]	@ (8004dd0 <_printf_i+0x234>)
 8004c6e:	230a      	movs	r3, #10
 8004c70:	e011      	b.n	8004c96 <_printf_i+0xfa>
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	6833      	ldr	r3, [r6, #0]
 8004c76:	0608      	lsls	r0, r1, #24
 8004c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c7c:	d402      	bmi.n	8004c84 <_printf_i+0xe8>
 8004c7e:	0649      	lsls	r1, r1, #25
 8004c80:	bf48      	it	mi
 8004c82:	b2ad      	uxthmi	r5, r5
 8004c84:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c86:	4852      	ldr	r0, [pc, #328]	@ (8004dd0 <_printf_i+0x234>)
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	bf14      	ite	ne
 8004c8c:	230a      	movne	r3, #10
 8004c8e:	2308      	moveq	r3, #8
 8004c90:	2100      	movs	r1, #0
 8004c92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c96:	6866      	ldr	r6, [r4, #4]
 8004c98:	60a6      	str	r6, [r4, #8]
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	db05      	blt.n	8004caa <_printf_i+0x10e>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	432e      	orrs	r6, r5
 8004ca2:	f021 0104 	bic.w	r1, r1, #4
 8004ca6:	6021      	str	r1, [r4, #0]
 8004ca8:	d04b      	beq.n	8004d42 <_printf_i+0x1a6>
 8004caa:	4616      	mov	r6, r2
 8004cac:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cb0:	fb03 5711 	mls	r7, r3, r1, r5
 8004cb4:	5dc7      	ldrb	r7, [r0, r7]
 8004cb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cba:	462f      	mov	r7, r5
 8004cbc:	42bb      	cmp	r3, r7
 8004cbe:	460d      	mov	r5, r1
 8004cc0:	d9f4      	bls.n	8004cac <_printf_i+0x110>
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d10b      	bne.n	8004cde <_printf_i+0x142>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	07df      	lsls	r7, r3, #31
 8004cca:	d508      	bpl.n	8004cde <_printf_i+0x142>
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	6861      	ldr	r1, [r4, #4]
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	bfde      	ittt	le
 8004cd4:	2330      	movle	r3, #48	@ 0x30
 8004cd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cde:	1b92      	subs	r2, r2, r6
 8004ce0:	6122      	str	r2, [r4, #16]
 8004ce2:	f8cd a000 	str.w	sl, [sp]
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	aa03      	add	r2, sp, #12
 8004cea:	4621      	mov	r1, r4
 8004cec:	4640      	mov	r0, r8
 8004cee:	f7ff fee7 	bl	8004ac0 <_printf_common>
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d14a      	bne.n	8004d8c <_printf_i+0x1f0>
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfa:	b004      	add	sp, #16
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	f043 0320 	orr.w	r3, r3, #32
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	4832      	ldr	r0, [pc, #200]	@ (8004dd4 <_printf_i+0x238>)
 8004d0a:	2778      	movs	r7, #120	@ 0x78
 8004d0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	6831      	ldr	r1, [r6, #0]
 8004d14:	061f      	lsls	r7, r3, #24
 8004d16:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d1a:	d402      	bmi.n	8004d22 <_printf_i+0x186>
 8004d1c:	065f      	lsls	r7, r3, #25
 8004d1e:	bf48      	it	mi
 8004d20:	b2ad      	uxthmi	r5, r5
 8004d22:	6031      	str	r1, [r6, #0]
 8004d24:	07d9      	lsls	r1, r3, #31
 8004d26:	bf44      	itt	mi
 8004d28:	f043 0320 	orrmi.w	r3, r3, #32
 8004d2c:	6023      	strmi	r3, [r4, #0]
 8004d2e:	b11d      	cbz	r5, 8004d38 <_printf_i+0x19c>
 8004d30:	2310      	movs	r3, #16
 8004d32:	e7ad      	b.n	8004c90 <_printf_i+0xf4>
 8004d34:	4826      	ldr	r0, [pc, #152]	@ (8004dd0 <_printf_i+0x234>)
 8004d36:	e7e9      	b.n	8004d0c <_printf_i+0x170>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f023 0320 	bic.w	r3, r3, #32
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	e7f6      	b.n	8004d30 <_printf_i+0x194>
 8004d42:	4616      	mov	r6, r2
 8004d44:	e7bd      	b.n	8004cc2 <_printf_i+0x126>
 8004d46:	6833      	ldr	r3, [r6, #0]
 8004d48:	6825      	ldr	r5, [r4, #0]
 8004d4a:	6961      	ldr	r1, [r4, #20]
 8004d4c:	1d18      	adds	r0, r3, #4
 8004d4e:	6030      	str	r0, [r6, #0]
 8004d50:	062e      	lsls	r6, r5, #24
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	d501      	bpl.n	8004d5a <_printf_i+0x1be>
 8004d56:	6019      	str	r1, [r3, #0]
 8004d58:	e002      	b.n	8004d60 <_printf_i+0x1c4>
 8004d5a:	0668      	lsls	r0, r5, #25
 8004d5c:	d5fb      	bpl.n	8004d56 <_printf_i+0x1ba>
 8004d5e:	8019      	strh	r1, [r3, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	4616      	mov	r6, r2
 8004d66:	e7bc      	b.n	8004ce2 <_printf_i+0x146>
 8004d68:	6833      	ldr	r3, [r6, #0]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	6032      	str	r2, [r6, #0]
 8004d6e:	681e      	ldr	r6, [r3, #0]
 8004d70:	6862      	ldr	r2, [r4, #4]
 8004d72:	2100      	movs	r1, #0
 8004d74:	4630      	mov	r0, r6
 8004d76:	f7fb fa4b 	bl	8000210 <memchr>
 8004d7a:	b108      	cbz	r0, 8004d80 <_printf_i+0x1e4>
 8004d7c:	1b80      	subs	r0, r0, r6
 8004d7e:	6060      	str	r0, [r4, #4]
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	6123      	str	r3, [r4, #16]
 8004d84:	2300      	movs	r3, #0
 8004d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d8a:	e7aa      	b.n	8004ce2 <_printf_i+0x146>
 8004d8c:	6923      	ldr	r3, [r4, #16]
 8004d8e:	4632      	mov	r2, r6
 8004d90:	4649      	mov	r1, r9
 8004d92:	4640      	mov	r0, r8
 8004d94:	47d0      	blx	sl
 8004d96:	3001      	adds	r0, #1
 8004d98:	d0ad      	beq.n	8004cf6 <_printf_i+0x15a>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	079b      	lsls	r3, r3, #30
 8004d9e:	d413      	bmi.n	8004dc8 <_printf_i+0x22c>
 8004da0:	68e0      	ldr	r0, [r4, #12]
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	4298      	cmp	r0, r3
 8004da6:	bfb8      	it	lt
 8004da8:	4618      	movlt	r0, r3
 8004daa:	e7a6      	b.n	8004cfa <_printf_i+0x15e>
 8004dac:	2301      	movs	r3, #1
 8004dae:	4632      	mov	r2, r6
 8004db0:	4649      	mov	r1, r9
 8004db2:	4640      	mov	r0, r8
 8004db4:	47d0      	blx	sl
 8004db6:	3001      	adds	r0, #1
 8004db8:	d09d      	beq.n	8004cf6 <_printf_i+0x15a>
 8004dba:	3501      	adds	r5, #1
 8004dbc:	68e3      	ldr	r3, [r4, #12]
 8004dbe:	9903      	ldr	r1, [sp, #12]
 8004dc0:	1a5b      	subs	r3, r3, r1
 8004dc2:	42ab      	cmp	r3, r5
 8004dc4:	dcf2      	bgt.n	8004dac <_printf_i+0x210>
 8004dc6:	e7eb      	b.n	8004da0 <_printf_i+0x204>
 8004dc8:	2500      	movs	r5, #0
 8004dca:	f104 0619 	add.w	r6, r4, #25
 8004dce:	e7f5      	b.n	8004dbc <_printf_i+0x220>
 8004dd0:	0800786a 	.word	0x0800786a
 8004dd4:	0800787b 	.word	0x0800787b

08004dd8 <std>:
 8004dd8:	2300      	movs	r3, #0
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	4604      	mov	r4, r0
 8004dde:	e9c0 3300 	strd	r3, r3, [r0]
 8004de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004de6:	6083      	str	r3, [r0, #8]
 8004de8:	8181      	strh	r1, [r0, #12]
 8004dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dec:	81c2      	strh	r2, [r0, #14]
 8004dee:	6183      	str	r3, [r0, #24]
 8004df0:	4619      	mov	r1, r3
 8004df2:	2208      	movs	r2, #8
 8004df4:	305c      	adds	r0, #92	@ 0x5c
 8004df6:	f000 f9f9 	bl	80051ec <memset>
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <std+0x58>)
 8004dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <std+0x5c>)
 8004e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e02:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <std+0x60>)
 8004e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e06:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <std+0x64>)
 8004e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <std+0x68>)
 8004e0c:	6224      	str	r4, [r4, #32]
 8004e0e:	429c      	cmp	r4, r3
 8004e10:	d006      	beq.n	8004e20 <std+0x48>
 8004e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e16:	4294      	cmp	r4, r2
 8004e18:	d002      	beq.n	8004e20 <std+0x48>
 8004e1a:	33d0      	adds	r3, #208	@ 0xd0
 8004e1c:	429c      	cmp	r4, r3
 8004e1e:	d105      	bne.n	8004e2c <std+0x54>
 8004e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e28:	f000 ba5c 	b.w	80052e4 <__retarget_lock_init_recursive>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	bf00      	nop
 8004e30:	0800503d 	.word	0x0800503d
 8004e34:	0800505f 	.word	0x0800505f
 8004e38:	08005097 	.word	0x08005097
 8004e3c:	080050bb 	.word	0x080050bb
 8004e40:	200002a0 	.word	0x200002a0

08004e44 <stdio_exit_handler>:
 8004e44:	4a02      	ldr	r2, [pc, #8]	@ (8004e50 <stdio_exit_handler+0xc>)
 8004e46:	4903      	ldr	r1, [pc, #12]	@ (8004e54 <stdio_exit_handler+0x10>)
 8004e48:	4803      	ldr	r0, [pc, #12]	@ (8004e58 <stdio_exit_handler+0x14>)
 8004e4a:	f000 b869 	b.w	8004f20 <_fwalk_sglue>
 8004e4e:	bf00      	nop
 8004e50:	2000000c 	.word	0x2000000c
 8004e54:	08006c21 	.word	0x08006c21
 8004e58:	2000001c 	.word	0x2000001c

08004e5c <cleanup_stdio>:
 8004e5c:	6841      	ldr	r1, [r0, #4]
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <cleanup_stdio+0x34>)
 8004e60:	4299      	cmp	r1, r3
 8004e62:	b510      	push	{r4, lr}
 8004e64:	4604      	mov	r4, r0
 8004e66:	d001      	beq.n	8004e6c <cleanup_stdio+0x10>
 8004e68:	f001 feda 	bl	8006c20 <_fflush_r>
 8004e6c:	68a1      	ldr	r1, [r4, #8]
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <cleanup_stdio+0x38>)
 8004e70:	4299      	cmp	r1, r3
 8004e72:	d002      	beq.n	8004e7a <cleanup_stdio+0x1e>
 8004e74:	4620      	mov	r0, r4
 8004e76:	f001 fed3 	bl	8006c20 <_fflush_r>
 8004e7a:	68e1      	ldr	r1, [r4, #12]
 8004e7c:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <cleanup_stdio+0x3c>)
 8004e7e:	4299      	cmp	r1, r3
 8004e80:	d004      	beq.n	8004e8c <cleanup_stdio+0x30>
 8004e82:	4620      	mov	r0, r4
 8004e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e88:	f001 beca 	b.w	8006c20 <_fflush_r>
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	200002a0 	.word	0x200002a0
 8004e94:	20000308 	.word	0x20000308
 8004e98:	20000370 	.word	0x20000370

08004e9c <global_stdio_init.part.0>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <global_stdio_init.part.0+0x30>)
 8004ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8004ed0 <global_stdio_init.part.0+0x34>)
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed4 <global_stdio_init.part.0+0x38>)
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2104      	movs	r1, #4
 8004eac:	f7ff ff94 	bl	8004dd8 <std>
 8004eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2109      	movs	r1, #9
 8004eb8:	f7ff ff8e 	bl	8004dd8 <std>
 8004ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec6:	2112      	movs	r1, #18
 8004ec8:	f7ff bf86 	b.w	8004dd8 <std>
 8004ecc:	200003d8 	.word	0x200003d8
 8004ed0:	200002a0 	.word	0x200002a0
 8004ed4:	08004e45 	.word	0x08004e45

08004ed8 <__sfp_lock_acquire>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	@ (8004ee0 <__sfp_lock_acquire+0x8>)
 8004eda:	f000 ba04 	b.w	80052e6 <__retarget_lock_acquire_recursive>
 8004ede:	bf00      	nop
 8004ee0:	200003e1 	.word	0x200003e1

08004ee4 <__sfp_lock_release>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	@ (8004eec <__sfp_lock_release+0x8>)
 8004ee6:	f000 b9ff 	b.w	80052e8 <__retarget_lock_release_recursive>
 8004eea:	bf00      	nop
 8004eec:	200003e1 	.word	0x200003e1

08004ef0 <__sinit>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	f7ff fff0 	bl	8004ed8 <__sfp_lock_acquire>
 8004ef8:	6a23      	ldr	r3, [r4, #32]
 8004efa:	b11b      	cbz	r3, 8004f04 <__sinit+0x14>
 8004efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f00:	f7ff bff0 	b.w	8004ee4 <__sfp_lock_release>
 8004f04:	4b04      	ldr	r3, [pc, #16]	@ (8004f18 <__sinit+0x28>)
 8004f06:	6223      	str	r3, [r4, #32]
 8004f08:	4b04      	ldr	r3, [pc, #16]	@ (8004f1c <__sinit+0x2c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f5      	bne.n	8004efc <__sinit+0xc>
 8004f10:	f7ff ffc4 	bl	8004e9c <global_stdio_init.part.0>
 8004f14:	e7f2      	b.n	8004efc <__sinit+0xc>
 8004f16:	bf00      	nop
 8004f18:	08004e5d 	.word	0x08004e5d
 8004f1c:	200003d8 	.word	0x200003d8

08004f20 <_fwalk_sglue>:
 8004f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f24:	4607      	mov	r7, r0
 8004f26:	4688      	mov	r8, r1
 8004f28:	4614      	mov	r4, r2
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f30:	f1b9 0901 	subs.w	r9, r9, #1
 8004f34:	d505      	bpl.n	8004f42 <_fwalk_sglue+0x22>
 8004f36:	6824      	ldr	r4, [r4, #0]
 8004f38:	2c00      	cmp	r4, #0
 8004f3a:	d1f7      	bne.n	8004f2c <_fwalk_sglue+0xc>
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d907      	bls.n	8004f58 <_fwalk_sglue+0x38>
 8004f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	d003      	beq.n	8004f58 <_fwalk_sglue+0x38>
 8004f50:	4629      	mov	r1, r5
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	4306      	orrs	r6, r0
 8004f58:	3568      	adds	r5, #104	@ 0x68
 8004f5a:	e7e9      	b.n	8004f30 <_fwalk_sglue+0x10>

08004f5c <iprintf>:
 8004f5c:	b40f      	push	{r0, r1, r2, r3}
 8004f5e:	b507      	push	{r0, r1, r2, lr}
 8004f60:	4906      	ldr	r1, [pc, #24]	@ (8004f7c <iprintf+0x20>)
 8004f62:	ab04      	add	r3, sp, #16
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f6a:	6881      	ldr	r1, [r0, #8]
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	f001 fcbb 	bl	80068e8 <_vfiprintf_r>
 8004f72:	b003      	add	sp, #12
 8004f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f78:	b004      	add	sp, #16
 8004f7a:	4770      	bx	lr
 8004f7c:	20000018 	.word	0x20000018

08004f80 <_puts_r>:
 8004f80:	6a03      	ldr	r3, [r0, #32]
 8004f82:	b570      	push	{r4, r5, r6, lr}
 8004f84:	6884      	ldr	r4, [r0, #8]
 8004f86:	4605      	mov	r5, r0
 8004f88:	460e      	mov	r6, r1
 8004f8a:	b90b      	cbnz	r3, 8004f90 <_puts_r+0x10>
 8004f8c:	f7ff ffb0 	bl	8004ef0 <__sinit>
 8004f90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f92:	07db      	lsls	r3, r3, #31
 8004f94:	d405      	bmi.n	8004fa2 <_puts_r+0x22>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	0598      	lsls	r0, r3, #22
 8004f9a:	d402      	bmi.n	8004fa2 <_puts_r+0x22>
 8004f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f9e:	f000 f9a2 	bl	80052e6 <__retarget_lock_acquire_recursive>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	0719      	lsls	r1, r3, #28
 8004fa6:	d502      	bpl.n	8004fae <_puts_r+0x2e>
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d135      	bne.n	800501a <_puts_r+0x9a>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 f8c5 	bl	8005140 <__swsetup_r>
 8004fb6:	b380      	cbz	r0, 800501a <_puts_r+0x9a>
 8004fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fbe:	07da      	lsls	r2, r3, #31
 8004fc0:	d405      	bmi.n	8004fce <_puts_r+0x4e>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	059b      	lsls	r3, r3, #22
 8004fc6:	d402      	bmi.n	8004fce <_puts_r+0x4e>
 8004fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fca:	f000 f98d 	bl	80052e8 <__retarget_lock_release_recursive>
 8004fce:	4628      	mov	r0, r5
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da04      	bge.n	8004fe0 <_puts_r+0x60>
 8004fd6:	69a2      	ldr	r2, [r4, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	dc17      	bgt.n	800500c <_puts_r+0x8c>
 8004fdc:	290a      	cmp	r1, #10
 8004fde:	d015      	beq.n	800500c <_puts_r+0x8c>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	6022      	str	r2, [r4, #0]
 8004fe6:	7019      	strb	r1, [r3, #0]
 8004fe8:	68a3      	ldr	r3, [r4, #8]
 8004fea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d1ed      	bne.n	8004fd2 <_puts_r+0x52>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da11      	bge.n	800501e <_puts_r+0x9e>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	210a      	movs	r1, #10
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f85f 	bl	80050c2 <__swbuf_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d0d7      	beq.n	8004fb8 <_puts_r+0x38>
 8005008:	250a      	movs	r5, #10
 800500a:	e7d7      	b.n	8004fbc <_puts_r+0x3c>
 800500c:	4622      	mov	r2, r4
 800500e:	4628      	mov	r0, r5
 8005010:	f000 f857 	bl	80050c2 <__swbuf_r>
 8005014:	3001      	adds	r0, #1
 8005016:	d1e7      	bne.n	8004fe8 <_puts_r+0x68>
 8005018:	e7ce      	b.n	8004fb8 <_puts_r+0x38>
 800501a:	3e01      	subs	r6, #1
 800501c:	e7e4      	b.n	8004fe8 <_puts_r+0x68>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	6022      	str	r2, [r4, #0]
 8005024:	220a      	movs	r2, #10
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e7ee      	b.n	8005008 <_puts_r+0x88>
	...

0800502c <puts>:
 800502c:	4b02      	ldr	r3, [pc, #8]	@ (8005038 <puts+0xc>)
 800502e:	4601      	mov	r1, r0
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	f7ff bfa5 	b.w	8004f80 <_puts_r>
 8005036:	bf00      	nop
 8005038:	20000018 	.word	0x20000018

0800503c <__sread>:
 800503c:	b510      	push	{r4, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	f000 f900 	bl	8005248 <_read_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	bfab      	itete	ge
 800504c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800504e:	89a3      	ldrhlt	r3, [r4, #12]
 8005050:	181b      	addge	r3, r3, r0
 8005052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005056:	bfac      	ite	ge
 8005058:	6563      	strge	r3, [r4, #84]	@ 0x54
 800505a:	81a3      	strhlt	r3, [r4, #12]
 800505c:	bd10      	pop	{r4, pc}

0800505e <__swrite>:
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	461f      	mov	r7, r3
 8005064:	898b      	ldrh	r3, [r1, #12]
 8005066:	05db      	lsls	r3, r3, #23
 8005068:	4605      	mov	r5, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4616      	mov	r6, r2
 800506e:	d505      	bpl.n	800507c <__swrite+0x1e>
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	2302      	movs	r3, #2
 8005076:	2200      	movs	r2, #0
 8005078:	f000 f8d4 	bl	8005224 <_lseek_r>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	4632      	mov	r2, r6
 800508a:	463b      	mov	r3, r7
 800508c:	4628      	mov	r0, r5
 800508e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	f000 b8eb 	b.w	800526c <_write_r>

08005096 <__sseek>:
 8005096:	b510      	push	{r4, lr}
 8005098:	460c      	mov	r4, r1
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 f8c1 	bl	8005224 <_lseek_r>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	bf15      	itete	ne
 80050a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050b2:	81a3      	strheq	r3, [r4, #12]
 80050b4:	bf18      	it	ne
 80050b6:	81a3      	strhne	r3, [r4, #12]
 80050b8:	bd10      	pop	{r4, pc}

080050ba <__sclose>:
 80050ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050be:	f000 b8a1 	b.w	8005204 <_close_r>

080050c2 <__swbuf_r>:
 80050c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c4:	460e      	mov	r6, r1
 80050c6:	4614      	mov	r4, r2
 80050c8:	4605      	mov	r5, r0
 80050ca:	b118      	cbz	r0, 80050d4 <__swbuf_r+0x12>
 80050cc:	6a03      	ldr	r3, [r0, #32]
 80050ce:	b90b      	cbnz	r3, 80050d4 <__swbuf_r+0x12>
 80050d0:	f7ff ff0e 	bl	8004ef0 <__sinit>
 80050d4:	69a3      	ldr	r3, [r4, #24]
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	071a      	lsls	r2, r3, #28
 80050dc:	d501      	bpl.n	80050e2 <__swbuf_r+0x20>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	b943      	cbnz	r3, 80050f4 <__swbuf_r+0x32>
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f82b 	bl	8005140 <__swsetup_r>
 80050ea:	b118      	cbz	r0, 80050f4 <__swbuf_r+0x32>
 80050ec:	f04f 37ff 	mov.w	r7, #4294967295
 80050f0:	4638      	mov	r0, r7
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	6922      	ldr	r2, [r4, #16]
 80050f8:	1a98      	subs	r0, r3, r2
 80050fa:	6963      	ldr	r3, [r4, #20]
 80050fc:	b2f6      	uxtb	r6, r6
 80050fe:	4283      	cmp	r3, r0
 8005100:	4637      	mov	r7, r6
 8005102:	dc05      	bgt.n	8005110 <__swbuf_r+0x4e>
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	f001 fd8a 	bl	8006c20 <_fflush_r>
 800510c:	2800      	cmp	r0, #0
 800510e:	d1ed      	bne.n	80050ec <__swbuf_r+0x2a>
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	3b01      	subs	r3, #1
 8005114:	60a3      	str	r3, [r4, #8]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	6022      	str	r2, [r4, #0]
 800511c:	701e      	strb	r6, [r3, #0]
 800511e:	6962      	ldr	r2, [r4, #20]
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	429a      	cmp	r2, r3
 8005124:	d004      	beq.n	8005130 <__swbuf_r+0x6e>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	07db      	lsls	r3, r3, #31
 800512a:	d5e1      	bpl.n	80050f0 <__swbuf_r+0x2e>
 800512c:	2e0a      	cmp	r6, #10
 800512e:	d1df      	bne.n	80050f0 <__swbuf_r+0x2e>
 8005130:	4621      	mov	r1, r4
 8005132:	4628      	mov	r0, r5
 8005134:	f001 fd74 	bl	8006c20 <_fflush_r>
 8005138:	2800      	cmp	r0, #0
 800513a:	d0d9      	beq.n	80050f0 <__swbuf_r+0x2e>
 800513c:	e7d6      	b.n	80050ec <__swbuf_r+0x2a>
	...

08005140 <__swsetup_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4b29      	ldr	r3, [pc, #164]	@ (80051e8 <__swsetup_r+0xa8>)
 8005144:	4605      	mov	r5, r0
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	460c      	mov	r4, r1
 800514a:	b118      	cbz	r0, 8005154 <__swsetup_r+0x14>
 800514c:	6a03      	ldr	r3, [r0, #32]
 800514e:	b90b      	cbnz	r3, 8005154 <__swsetup_r+0x14>
 8005150:	f7ff fece 	bl	8004ef0 <__sinit>
 8005154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005158:	0719      	lsls	r1, r3, #28
 800515a:	d422      	bmi.n	80051a2 <__swsetup_r+0x62>
 800515c:	06da      	lsls	r2, r3, #27
 800515e:	d407      	bmi.n	8005170 <__swsetup_r+0x30>
 8005160:	2209      	movs	r2, #9
 8005162:	602a      	str	r2, [r5, #0]
 8005164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	f04f 30ff 	mov.w	r0, #4294967295
 800516e:	e033      	b.n	80051d8 <__swsetup_r+0x98>
 8005170:	0758      	lsls	r0, r3, #29
 8005172:	d512      	bpl.n	800519a <__swsetup_r+0x5a>
 8005174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005176:	b141      	cbz	r1, 800518a <__swsetup_r+0x4a>
 8005178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800517c:	4299      	cmp	r1, r3
 800517e:	d002      	beq.n	8005186 <__swsetup_r+0x46>
 8005180:	4628      	mov	r0, r5
 8005182:	f000 ff0d 	bl	8005fa0 <_free_r>
 8005186:	2300      	movs	r3, #0
 8005188:	6363      	str	r3, [r4, #52]	@ 0x34
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	2300      	movs	r3, #0
 8005194:	6063      	str	r3, [r4, #4]
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f043 0308 	orr.w	r3, r3, #8
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	b94b      	cbnz	r3, 80051ba <__swsetup_r+0x7a>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b0:	d003      	beq.n	80051ba <__swsetup_r+0x7a>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	f001 fd81 	bl	8006cbc <__smakebuf_r>
 80051ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051be:	f013 0201 	ands.w	r2, r3, #1
 80051c2:	d00a      	beq.n	80051da <__swsetup_r+0x9a>
 80051c4:	2200      	movs	r2, #0
 80051c6:	60a2      	str	r2, [r4, #8]
 80051c8:	6962      	ldr	r2, [r4, #20]
 80051ca:	4252      	negs	r2, r2
 80051cc:	61a2      	str	r2, [r4, #24]
 80051ce:	6922      	ldr	r2, [r4, #16]
 80051d0:	b942      	cbnz	r2, 80051e4 <__swsetup_r+0xa4>
 80051d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051d6:	d1c5      	bne.n	8005164 <__swsetup_r+0x24>
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
 80051da:	0799      	lsls	r1, r3, #30
 80051dc:	bf58      	it	pl
 80051de:	6962      	ldrpl	r2, [r4, #20]
 80051e0:	60a2      	str	r2, [r4, #8]
 80051e2:	e7f4      	b.n	80051ce <__swsetup_r+0x8e>
 80051e4:	2000      	movs	r0, #0
 80051e6:	e7f7      	b.n	80051d8 <__swsetup_r+0x98>
 80051e8:	20000018 	.word	0x20000018

080051ec <memset>:
 80051ec:	4402      	add	r2, r0
 80051ee:	4603      	mov	r3, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d100      	bne.n	80051f6 <memset+0xa>
 80051f4:	4770      	bx	lr
 80051f6:	f803 1b01 	strb.w	r1, [r3], #1
 80051fa:	e7f9      	b.n	80051f0 <memset+0x4>

080051fc <_localeconv_r>:
 80051fc:	4800      	ldr	r0, [pc, #0]	@ (8005200 <_localeconv_r+0x4>)
 80051fe:	4770      	bx	lr
 8005200:	20000158 	.word	0x20000158

08005204 <_close_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d06      	ldr	r5, [pc, #24]	@ (8005220 <_close_r+0x1c>)
 8005208:	2300      	movs	r3, #0
 800520a:	4604      	mov	r4, r0
 800520c:	4608      	mov	r0, r1
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fc fb15 	bl	800183e <_close>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_close_r+0x1a>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	b103      	cbz	r3, 800521e <_close_r+0x1a>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	200003dc 	.word	0x200003dc

08005224 <_lseek_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d07      	ldr	r5, [pc, #28]	@ (8005244 <_lseek_r+0x20>)
 8005228:	4604      	mov	r4, r0
 800522a:	4608      	mov	r0, r1
 800522c:	4611      	mov	r1, r2
 800522e:	2200      	movs	r2, #0
 8005230:	602a      	str	r2, [r5, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f7fc fb2a 	bl	800188c <_lseek>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_lseek_r+0x1e>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_lseek_r+0x1e>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	200003dc 	.word	0x200003dc

08005248 <_read_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	@ (8005268 <_read_r+0x20>)
 800524c:	4604      	mov	r4, r0
 800524e:	4608      	mov	r0, r1
 8005250:	4611      	mov	r1, r2
 8005252:	2200      	movs	r2, #0
 8005254:	602a      	str	r2, [r5, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f7fc fab8 	bl	80017cc <_read>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_read_r+0x1e>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_read_r+0x1e>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	200003dc 	.word	0x200003dc

0800526c <_write_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d07      	ldr	r5, [pc, #28]	@ (800528c <_write_r+0x20>)
 8005270:	4604      	mov	r4, r0
 8005272:	4608      	mov	r0, r1
 8005274:	4611      	mov	r1, r2
 8005276:	2200      	movs	r2, #0
 8005278:	602a      	str	r2, [r5, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	f7fc fac3 	bl	8001806 <_write>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_write_r+0x1e>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_write_r+0x1e>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	200003dc 	.word	0x200003dc

08005290 <__errno>:
 8005290:	4b01      	ldr	r3, [pc, #4]	@ (8005298 <__errno+0x8>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000018 	.word	0x20000018

0800529c <__libc_init_array>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4d0d      	ldr	r5, [pc, #52]	@ (80052d4 <__libc_init_array+0x38>)
 80052a0:	4c0d      	ldr	r4, [pc, #52]	@ (80052d8 <__libc_init_array+0x3c>)
 80052a2:	1b64      	subs	r4, r4, r5
 80052a4:	10a4      	asrs	r4, r4, #2
 80052a6:	2600      	movs	r6, #0
 80052a8:	42a6      	cmp	r6, r4
 80052aa:	d109      	bne.n	80052c0 <__libc_init_array+0x24>
 80052ac:	4d0b      	ldr	r5, [pc, #44]	@ (80052dc <__libc_init_array+0x40>)
 80052ae:	4c0c      	ldr	r4, [pc, #48]	@ (80052e0 <__libc_init_array+0x44>)
 80052b0:	f002 f99e 	bl	80075f0 <_init>
 80052b4:	1b64      	subs	r4, r4, r5
 80052b6:	10a4      	asrs	r4, r4, #2
 80052b8:	2600      	movs	r6, #0
 80052ba:	42a6      	cmp	r6, r4
 80052bc:	d105      	bne.n	80052ca <__libc_init_array+0x2e>
 80052be:	bd70      	pop	{r4, r5, r6, pc}
 80052c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c4:	4798      	blx	r3
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7ee      	b.n	80052a8 <__libc_init_array+0xc>
 80052ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ce:	4798      	blx	r3
 80052d0:	3601      	adds	r6, #1
 80052d2:	e7f2      	b.n	80052ba <__libc_init_array+0x1e>
 80052d4:	08007c58 	.word	0x08007c58
 80052d8:	08007c58 	.word	0x08007c58
 80052dc:	08007c58 	.word	0x08007c58
 80052e0:	08007c5c 	.word	0x08007c5c

080052e4 <__retarget_lock_init_recursive>:
 80052e4:	4770      	bx	lr

080052e6 <__retarget_lock_acquire_recursive>:
 80052e6:	4770      	bx	lr

080052e8 <__retarget_lock_release_recursive>:
 80052e8:	4770      	bx	lr

080052ea <quorem>:
 80052ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ee:	6903      	ldr	r3, [r0, #16]
 80052f0:	690c      	ldr	r4, [r1, #16]
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	4607      	mov	r7, r0
 80052f6:	db7e      	blt.n	80053f6 <quorem+0x10c>
 80052f8:	3c01      	subs	r4, #1
 80052fa:	f101 0814 	add.w	r8, r1, #20
 80052fe:	00a3      	lsls	r3, r4, #2
 8005300:	f100 0514 	add.w	r5, r0, #20
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005314:	3301      	adds	r3, #1
 8005316:	429a      	cmp	r2, r3
 8005318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800531c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005320:	d32e      	bcc.n	8005380 <quorem+0x96>
 8005322:	f04f 0a00 	mov.w	sl, #0
 8005326:	46c4      	mov	ip, r8
 8005328:	46ae      	mov	lr, r5
 800532a:	46d3      	mov	fp, sl
 800532c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005330:	b298      	uxth	r0, r3
 8005332:	fb06 a000 	mla	r0, r6, r0, sl
 8005336:	0c02      	lsrs	r2, r0, #16
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	fb06 2303 	mla	r3, r6, r3, r2
 800533e:	f8de 2000 	ldr.w	r2, [lr]
 8005342:	b280      	uxth	r0, r0
 8005344:	b292      	uxth	r2, r2
 8005346:	1a12      	subs	r2, r2, r0
 8005348:	445a      	add	r2, fp
 800534a:	f8de 0000 	ldr.w	r0, [lr]
 800534e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005352:	b29b      	uxth	r3, r3
 8005354:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005358:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800535c:	b292      	uxth	r2, r2
 800535e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005362:	45e1      	cmp	r9, ip
 8005364:	f84e 2b04 	str.w	r2, [lr], #4
 8005368:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800536c:	d2de      	bcs.n	800532c <quorem+0x42>
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	58eb      	ldr	r3, [r5, r3]
 8005372:	b92b      	cbnz	r3, 8005380 <quorem+0x96>
 8005374:	9b01      	ldr	r3, [sp, #4]
 8005376:	3b04      	subs	r3, #4
 8005378:	429d      	cmp	r5, r3
 800537a:	461a      	mov	r2, r3
 800537c:	d32f      	bcc.n	80053de <quorem+0xf4>
 800537e:	613c      	str	r4, [r7, #16]
 8005380:	4638      	mov	r0, r7
 8005382:	f001 f97f 	bl	8006684 <__mcmp>
 8005386:	2800      	cmp	r0, #0
 8005388:	db25      	blt.n	80053d6 <quorem+0xec>
 800538a:	4629      	mov	r1, r5
 800538c:	2000      	movs	r0, #0
 800538e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005392:	f8d1 c000 	ldr.w	ip, [r1]
 8005396:	fa1f fe82 	uxth.w	lr, r2
 800539a:	fa1f f38c 	uxth.w	r3, ip
 800539e:	eba3 030e 	sub.w	r3, r3, lr
 80053a2:	4403      	add	r3, r0
 80053a4:	0c12      	lsrs	r2, r2, #16
 80053a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b4:	45c1      	cmp	r9, r8
 80053b6:	f841 3b04 	str.w	r3, [r1], #4
 80053ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053be:	d2e6      	bcs.n	800538e <quorem+0xa4>
 80053c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053c8:	b922      	cbnz	r2, 80053d4 <quorem+0xea>
 80053ca:	3b04      	subs	r3, #4
 80053cc:	429d      	cmp	r5, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	d30b      	bcc.n	80053ea <quorem+0x100>
 80053d2:	613c      	str	r4, [r7, #16]
 80053d4:	3601      	adds	r6, #1
 80053d6:	4630      	mov	r0, r6
 80053d8:	b003      	add	sp, #12
 80053da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	3b04      	subs	r3, #4
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	d1cb      	bne.n	800537e <quorem+0x94>
 80053e6:	3c01      	subs	r4, #1
 80053e8:	e7c6      	b.n	8005378 <quorem+0x8e>
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	3b04      	subs	r3, #4
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	d1ef      	bne.n	80053d2 <quorem+0xe8>
 80053f2:	3c01      	subs	r4, #1
 80053f4:	e7ea      	b.n	80053cc <quorem+0xe2>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e7ee      	b.n	80053d8 <quorem+0xee>
 80053fa:	0000      	movs	r0, r0
 80053fc:	0000      	movs	r0, r0
	...

08005400 <_dtoa_r>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	69c7      	ldr	r7, [r0, #28]
 8005406:	b097      	sub	sp, #92	@ 0x5c
 8005408:	ed8d 0b04 	vstr	d0, [sp, #16]
 800540c:	ec55 4b10 	vmov	r4, r5, d0
 8005410:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005412:	9107      	str	r1, [sp, #28]
 8005414:	4681      	mov	r9, r0
 8005416:	920c      	str	r2, [sp, #48]	@ 0x30
 8005418:	9311      	str	r3, [sp, #68]	@ 0x44
 800541a:	b97f      	cbnz	r7, 800543c <_dtoa_r+0x3c>
 800541c:	2010      	movs	r0, #16
 800541e:	f000 fe09 	bl	8006034 <malloc>
 8005422:	4602      	mov	r2, r0
 8005424:	f8c9 001c 	str.w	r0, [r9, #28]
 8005428:	b920      	cbnz	r0, 8005434 <_dtoa_r+0x34>
 800542a:	4ba9      	ldr	r3, [pc, #676]	@ (80056d0 <_dtoa_r+0x2d0>)
 800542c:	21ef      	movs	r1, #239	@ 0xef
 800542e:	48a9      	ldr	r0, [pc, #676]	@ (80056d4 <_dtoa_r+0x2d4>)
 8005430:	f001 fcc0 	bl	8006db4 <__assert_func>
 8005434:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005438:	6007      	str	r7, [r0, #0]
 800543a:	60c7      	str	r7, [r0, #12]
 800543c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005440:	6819      	ldr	r1, [r3, #0]
 8005442:	b159      	cbz	r1, 800545c <_dtoa_r+0x5c>
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	604a      	str	r2, [r1, #4]
 8005448:	2301      	movs	r3, #1
 800544a:	4093      	lsls	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
 800544e:	4648      	mov	r0, r9
 8005450:	f000 fee6 	bl	8006220 <_Bfree>
 8005454:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	1e2b      	subs	r3, r5, #0
 800545e:	bfb9      	ittee	lt
 8005460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005464:	9305      	strlt	r3, [sp, #20]
 8005466:	2300      	movge	r3, #0
 8005468:	6033      	strge	r3, [r6, #0]
 800546a:	9f05      	ldr	r7, [sp, #20]
 800546c:	4b9a      	ldr	r3, [pc, #616]	@ (80056d8 <_dtoa_r+0x2d8>)
 800546e:	bfbc      	itt	lt
 8005470:	2201      	movlt	r2, #1
 8005472:	6032      	strlt	r2, [r6, #0]
 8005474:	43bb      	bics	r3, r7
 8005476:	d112      	bne.n	800549e <_dtoa_r+0x9e>
 8005478:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800547a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005484:	4323      	orrs	r3, r4
 8005486:	f000 855a 	beq.w	8005f3e <_dtoa_r+0xb3e>
 800548a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800548c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80056ec <_dtoa_r+0x2ec>
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 855c 	beq.w	8005f4e <_dtoa_r+0xb4e>
 8005496:	f10a 0303 	add.w	r3, sl, #3
 800549a:	f000 bd56 	b.w	8005f4a <_dtoa_r+0xb4a>
 800549e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80054a2:	2200      	movs	r2, #0
 80054a4:	ec51 0b17 	vmov	r0, r1, d7
 80054a8:	2300      	movs	r3, #0
 80054aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80054ae:	f7fb fb2b 	bl	8000b08 <__aeabi_dcmpeq>
 80054b2:	4680      	mov	r8, r0
 80054b4:	b158      	cbz	r0, 80054ce <_dtoa_r+0xce>
 80054b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80054b8:	2301      	movs	r3, #1
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054be:	b113      	cbz	r3, 80054c6 <_dtoa_r+0xc6>
 80054c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80054c2:	4b86      	ldr	r3, [pc, #536]	@ (80056dc <_dtoa_r+0x2dc>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80056f0 <_dtoa_r+0x2f0>
 80054ca:	f000 bd40 	b.w	8005f4e <_dtoa_r+0xb4e>
 80054ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80054d2:	aa14      	add	r2, sp, #80	@ 0x50
 80054d4:	a915      	add	r1, sp, #84	@ 0x54
 80054d6:	4648      	mov	r0, r9
 80054d8:	f001 f984 	bl	80067e4 <__d2b>
 80054dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054e0:	9002      	str	r0, [sp, #8]
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	d078      	beq.n	80055d8 <_dtoa_r+0x1d8>
 80054e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005500:	4619      	mov	r1, r3
 8005502:	2200      	movs	r2, #0
 8005504:	4b76      	ldr	r3, [pc, #472]	@ (80056e0 <_dtoa_r+0x2e0>)
 8005506:	f7fa fedf 	bl	80002c8 <__aeabi_dsub>
 800550a:	a36b      	add	r3, pc, #428	@ (adr r3, 80056b8 <_dtoa_r+0x2b8>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fb f892 	bl	8000638 <__aeabi_dmul>
 8005514:	a36a      	add	r3, pc, #424	@ (adr r3, 80056c0 <_dtoa_r+0x2c0>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa fed7 	bl	80002cc <__adddf3>
 800551e:	4604      	mov	r4, r0
 8005520:	4630      	mov	r0, r6
 8005522:	460d      	mov	r5, r1
 8005524:	f7fb f81e 	bl	8000564 <__aeabi_i2d>
 8005528:	a367      	add	r3, pc, #412	@ (adr r3, 80056c8 <_dtoa_r+0x2c8>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fb f883 	bl	8000638 <__aeabi_dmul>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4620      	mov	r0, r4
 8005538:	4629      	mov	r1, r5
 800553a:	f7fa fec7 	bl	80002cc <__adddf3>
 800553e:	4604      	mov	r4, r0
 8005540:	460d      	mov	r5, r1
 8005542:	f7fb fb29 	bl	8000b98 <__aeabi_d2iz>
 8005546:	2200      	movs	r2, #0
 8005548:	4607      	mov	r7, r0
 800554a:	2300      	movs	r3, #0
 800554c:	4620      	mov	r0, r4
 800554e:	4629      	mov	r1, r5
 8005550:	f7fb fae4 	bl	8000b1c <__aeabi_dcmplt>
 8005554:	b140      	cbz	r0, 8005568 <_dtoa_r+0x168>
 8005556:	4638      	mov	r0, r7
 8005558:	f7fb f804 	bl	8000564 <__aeabi_i2d>
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	f7fb fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8005564:	b900      	cbnz	r0, 8005568 <_dtoa_r+0x168>
 8005566:	3f01      	subs	r7, #1
 8005568:	2f16      	cmp	r7, #22
 800556a:	d852      	bhi.n	8005612 <_dtoa_r+0x212>
 800556c:	4b5d      	ldr	r3, [pc, #372]	@ (80056e4 <_dtoa_r+0x2e4>)
 800556e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800557a:	f7fb facf 	bl	8000b1c <__aeabi_dcmplt>
 800557e:	2800      	cmp	r0, #0
 8005580:	d049      	beq.n	8005616 <_dtoa_r+0x216>
 8005582:	3f01      	subs	r7, #1
 8005584:	2300      	movs	r3, #0
 8005586:	9310      	str	r3, [sp, #64]	@ 0x40
 8005588:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800558a:	1b9b      	subs	r3, r3, r6
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	bf45      	ittet	mi
 8005590:	f1c3 0301 	rsbmi	r3, r3, #1
 8005594:	9300      	strmi	r3, [sp, #0]
 8005596:	2300      	movpl	r3, #0
 8005598:	2300      	movmi	r3, #0
 800559a:	9206      	str	r2, [sp, #24]
 800559c:	bf54      	ite	pl
 800559e:	9300      	strpl	r3, [sp, #0]
 80055a0:	9306      	strmi	r3, [sp, #24]
 80055a2:	2f00      	cmp	r7, #0
 80055a4:	db39      	blt.n	800561a <_dtoa_r+0x21a>
 80055a6:	9b06      	ldr	r3, [sp, #24]
 80055a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80055aa:	443b      	add	r3, r7
 80055ac:	9306      	str	r3, [sp, #24]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9308      	str	r3, [sp, #32]
 80055b2:	9b07      	ldr	r3, [sp, #28]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d863      	bhi.n	8005680 <_dtoa_r+0x280>
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	bfc4      	itt	gt
 80055bc:	3b04      	subgt	r3, #4
 80055be:	9307      	strgt	r3, [sp, #28]
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	f1a3 0302 	sub.w	r3, r3, #2
 80055c6:	bfcc      	ite	gt
 80055c8:	2400      	movgt	r4, #0
 80055ca:	2401      	movle	r4, #1
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d863      	bhi.n	8005698 <_dtoa_r+0x298>
 80055d0:	e8df f003 	tbb	[pc, r3]
 80055d4:	2b375452 	.word	0x2b375452
 80055d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055dc:	441e      	add	r6, r3
 80055de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	bfc1      	itttt	gt
 80055e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055ea:	409f      	lslgt	r7, r3
 80055ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055f4:	bfd6      	itet	le
 80055f6:	f1c3 0320 	rsble	r3, r3, #32
 80055fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80055fe:	fa04 f003 	lslle.w	r0, r4, r3
 8005602:	f7fa ff9f 	bl	8000544 <__aeabi_ui2d>
 8005606:	2201      	movs	r2, #1
 8005608:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800560c:	3e01      	subs	r6, #1
 800560e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005610:	e776      	b.n	8005500 <_dtoa_r+0x100>
 8005612:	2301      	movs	r3, #1
 8005614:	e7b7      	b.n	8005586 <_dtoa_r+0x186>
 8005616:	9010      	str	r0, [sp, #64]	@ 0x40
 8005618:	e7b6      	b.n	8005588 <_dtoa_r+0x188>
 800561a:	9b00      	ldr	r3, [sp, #0]
 800561c:	1bdb      	subs	r3, r3, r7
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	427b      	negs	r3, r7
 8005622:	9308      	str	r3, [sp, #32]
 8005624:	2300      	movs	r3, #0
 8005626:	930d      	str	r3, [sp, #52]	@ 0x34
 8005628:	e7c3      	b.n	80055b2 <_dtoa_r+0x1b2>
 800562a:	2301      	movs	r3, #1
 800562c:	9309      	str	r3, [sp, #36]	@ 0x24
 800562e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005630:	eb07 0b03 	add.w	fp, r7, r3
 8005634:	f10b 0301 	add.w	r3, fp, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	bfb8      	it	lt
 800563e:	2301      	movlt	r3, #1
 8005640:	e006      	b.n	8005650 <_dtoa_r+0x250>
 8005642:	2301      	movs	r3, #1
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005648:	2b00      	cmp	r3, #0
 800564a:	dd28      	ble.n	800569e <_dtoa_r+0x29e>
 800564c:	469b      	mov	fp, r3
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005654:	2100      	movs	r1, #0
 8005656:	2204      	movs	r2, #4
 8005658:	f102 0514 	add.w	r5, r2, #20
 800565c:	429d      	cmp	r5, r3
 800565e:	d926      	bls.n	80056ae <_dtoa_r+0x2ae>
 8005660:	6041      	str	r1, [r0, #4]
 8005662:	4648      	mov	r0, r9
 8005664:	f000 fd9c 	bl	80061a0 <_Balloc>
 8005668:	4682      	mov	sl, r0
 800566a:	2800      	cmp	r0, #0
 800566c:	d142      	bne.n	80056f4 <_dtoa_r+0x2f4>
 800566e:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <_dtoa_r+0x2e8>)
 8005670:	4602      	mov	r2, r0
 8005672:	f240 11af 	movw	r1, #431	@ 0x1af
 8005676:	e6da      	b.n	800542e <_dtoa_r+0x2e>
 8005678:	2300      	movs	r3, #0
 800567a:	e7e3      	b.n	8005644 <_dtoa_r+0x244>
 800567c:	2300      	movs	r3, #0
 800567e:	e7d5      	b.n	800562c <_dtoa_r+0x22c>
 8005680:	2401      	movs	r4, #1
 8005682:	2300      	movs	r3, #0
 8005684:	9307      	str	r3, [sp, #28]
 8005686:	9409      	str	r4, [sp, #36]	@ 0x24
 8005688:	f04f 3bff 	mov.w	fp, #4294967295
 800568c:	2200      	movs	r2, #0
 800568e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005692:	2312      	movs	r3, #18
 8005694:	920c      	str	r2, [sp, #48]	@ 0x30
 8005696:	e7db      	b.n	8005650 <_dtoa_r+0x250>
 8005698:	2301      	movs	r3, #1
 800569a:	9309      	str	r3, [sp, #36]	@ 0x24
 800569c:	e7f4      	b.n	8005688 <_dtoa_r+0x288>
 800569e:	f04f 0b01 	mov.w	fp, #1
 80056a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80056a6:	465b      	mov	r3, fp
 80056a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80056ac:	e7d0      	b.n	8005650 <_dtoa_r+0x250>
 80056ae:	3101      	adds	r1, #1
 80056b0:	0052      	lsls	r2, r2, #1
 80056b2:	e7d1      	b.n	8005658 <_dtoa_r+0x258>
 80056b4:	f3af 8000 	nop.w
 80056b8:	636f4361 	.word	0x636f4361
 80056bc:	3fd287a7 	.word	0x3fd287a7
 80056c0:	8b60c8b3 	.word	0x8b60c8b3
 80056c4:	3fc68a28 	.word	0x3fc68a28
 80056c8:	509f79fb 	.word	0x509f79fb
 80056cc:	3fd34413 	.word	0x3fd34413
 80056d0:	08007899 	.word	0x08007899
 80056d4:	080078b0 	.word	0x080078b0
 80056d8:	7ff00000 	.word	0x7ff00000
 80056dc:	08007869 	.word	0x08007869
 80056e0:	3ff80000 	.word	0x3ff80000
 80056e4:	08007a00 	.word	0x08007a00
 80056e8:	08007908 	.word	0x08007908
 80056ec:	08007895 	.word	0x08007895
 80056f0:	08007868 	.word	0x08007868
 80056f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056f8:	6018      	str	r0, [r3, #0]
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	2b0e      	cmp	r3, #14
 80056fe:	f200 80a1 	bhi.w	8005844 <_dtoa_r+0x444>
 8005702:	2c00      	cmp	r4, #0
 8005704:	f000 809e 	beq.w	8005844 <_dtoa_r+0x444>
 8005708:	2f00      	cmp	r7, #0
 800570a:	dd33      	ble.n	8005774 <_dtoa_r+0x374>
 800570c:	4b9c      	ldr	r3, [pc, #624]	@ (8005980 <_dtoa_r+0x580>)
 800570e:	f007 020f 	and.w	r2, r7, #15
 8005712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005716:	ed93 7b00 	vldr	d7, [r3]
 800571a:	05f8      	lsls	r0, r7, #23
 800571c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005720:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005724:	d516      	bpl.n	8005754 <_dtoa_r+0x354>
 8005726:	4b97      	ldr	r3, [pc, #604]	@ (8005984 <_dtoa_r+0x584>)
 8005728:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800572c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005730:	f7fb f8ac 	bl	800088c <__aeabi_ddiv>
 8005734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005738:	f004 040f 	and.w	r4, r4, #15
 800573c:	2603      	movs	r6, #3
 800573e:	4d91      	ldr	r5, [pc, #580]	@ (8005984 <_dtoa_r+0x584>)
 8005740:	b954      	cbnz	r4, 8005758 <_dtoa_r+0x358>
 8005742:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800574a:	f7fb f89f 	bl	800088c <__aeabi_ddiv>
 800574e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005752:	e028      	b.n	80057a6 <_dtoa_r+0x3a6>
 8005754:	2602      	movs	r6, #2
 8005756:	e7f2      	b.n	800573e <_dtoa_r+0x33e>
 8005758:	07e1      	lsls	r1, r4, #31
 800575a:	d508      	bpl.n	800576e <_dtoa_r+0x36e>
 800575c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005760:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005764:	f7fa ff68 	bl	8000638 <__aeabi_dmul>
 8005768:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800576c:	3601      	adds	r6, #1
 800576e:	1064      	asrs	r4, r4, #1
 8005770:	3508      	adds	r5, #8
 8005772:	e7e5      	b.n	8005740 <_dtoa_r+0x340>
 8005774:	f000 80af 	beq.w	80058d6 <_dtoa_r+0x4d6>
 8005778:	427c      	negs	r4, r7
 800577a:	4b81      	ldr	r3, [pc, #516]	@ (8005980 <_dtoa_r+0x580>)
 800577c:	4d81      	ldr	r5, [pc, #516]	@ (8005984 <_dtoa_r+0x584>)
 800577e:	f004 020f 	and.w	r2, r4, #15
 8005782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800578e:	f7fa ff53 	bl	8000638 <__aeabi_dmul>
 8005792:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005796:	1124      	asrs	r4, r4, #4
 8005798:	2300      	movs	r3, #0
 800579a:	2602      	movs	r6, #2
 800579c:	2c00      	cmp	r4, #0
 800579e:	f040 808f 	bne.w	80058c0 <_dtoa_r+0x4c0>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1d3      	bne.n	800574e <_dtoa_r+0x34e>
 80057a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80057a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8094 	beq.w	80058da <_dtoa_r+0x4da>
 80057b2:	4b75      	ldr	r3, [pc, #468]	@ (8005988 <_dtoa_r+0x588>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fb f9af 	bl	8000b1c <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f000 808b 	beq.w	80058da <_dtoa_r+0x4da>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8087 	beq.w	80058da <_dtoa_r+0x4da>
 80057cc:	f1bb 0f00 	cmp.w	fp, #0
 80057d0:	dd34      	ble.n	800583c <_dtoa_r+0x43c>
 80057d2:	4620      	mov	r0, r4
 80057d4:	4b6d      	ldr	r3, [pc, #436]	@ (800598c <_dtoa_r+0x58c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	4629      	mov	r1, r5
 80057da:	f7fa ff2d 	bl	8000638 <__aeabi_dmul>
 80057de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80057e6:	3601      	adds	r6, #1
 80057e8:	465c      	mov	r4, fp
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7fa feba 	bl	8000564 <__aeabi_i2d>
 80057f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f4:	f7fa ff20 	bl	8000638 <__aeabi_dmul>
 80057f8:	4b65      	ldr	r3, [pc, #404]	@ (8005990 <_dtoa_r+0x590>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	f7fa fd66 	bl	80002cc <__adddf3>
 8005800:	4605      	mov	r5, r0
 8005802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005806:	2c00      	cmp	r4, #0
 8005808:	d16a      	bne.n	80058e0 <_dtoa_r+0x4e0>
 800580a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580e:	4b61      	ldr	r3, [pc, #388]	@ (8005994 <_dtoa_r+0x594>)
 8005810:	2200      	movs	r2, #0
 8005812:	f7fa fd59 	bl	80002c8 <__aeabi_dsub>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800581e:	462a      	mov	r2, r5
 8005820:	4633      	mov	r3, r6
 8005822:	f7fb f999 	bl	8000b58 <__aeabi_dcmpgt>
 8005826:	2800      	cmp	r0, #0
 8005828:	f040 8298 	bne.w	8005d5c <_dtoa_r+0x95c>
 800582c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005830:	462a      	mov	r2, r5
 8005832:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005836:	f7fb f971 	bl	8000b1c <__aeabi_dcmplt>
 800583a:	bb38      	cbnz	r0, 800588c <_dtoa_r+0x48c>
 800583c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005840:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005844:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005846:	2b00      	cmp	r3, #0
 8005848:	f2c0 8157 	blt.w	8005afa <_dtoa_r+0x6fa>
 800584c:	2f0e      	cmp	r7, #14
 800584e:	f300 8154 	bgt.w	8005afa <_dtoa_r+0x6fa>
 8005852:	4b4b      	ldr	r3, [pc, #300]	@ (8005980 <_dtoa_r+0x580>)
 8005854:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005858:	ed93 7b00 	vldr	d7, [r3]
 800585c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	ed8d 7b00 	vstr	d7, [sp]
 8005864:	f280 80e5 	bge.w	8005a32 <_dtoa_r+0x632>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f300 80e1 	bgt.w	8005a32 <_dtoa_r+0x632>
 8005870:	d10c      	bne.n	800588c <_dtoa_r+0x48c>
 8005872:	4b48      	ldr	r3, [pc, #288]	@ (8005994 <_dtoa_r+0x594>)
 8005874:	2200      	movs	r2, #0
 8005876:	ec51 0b17 	vmov	r0, r1, d7
 800587a:	f7fa fedd 	bl	8000638 <__aeabi_dmul>
 800587e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005882:	f7fb f95f 	bl	8000b44 <__aeabi_dcmpge>
 8005886:	2800      	cmp	r0, #0
 8005888:	f000 8266 	beq.w	8005d58 <_dtoa_r+0x958>
 800588c:	2400      	movs	r4, #0
 800588e:	4625      	mov	r5, r4
 8005890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005892:	4656      	mov	r6, sl
 8005894:	ea6f 0803 	mvn.w	r8, r3
 8005898:	2700      	movs	r7, #0
 800589a:	4621      	mov	r1, r4
 800589c:	4648      	mov	r0, r9
 800589e:	f000 fcbf 	bl	8006220 <_Bfree>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	f000 80bd 	beq.w	8005a22 <_dtoa_r+0x622>
 80058a8:	b12f      	cbz	r7, 80058b6 <_dtoa_r+0x4b6>
 80058aa:	42af      	cmp	r7, r5
 80058ac:	d003      	beq.n	80058b6 <_dtoa_r+0x4b6>
 80058ae:	4639      	mov	r1, r7
 80058b0:	4648      	mov	r0, r9
 80058b2:	f000 fcb5 	bl	8006220 <_Bfree>
 80058b6:	4629      	mov	r1, r5
 80058b8:	4648      	mov	r0, r9
 80058ba:	f000 fcb1 	bl	8006220 <_Bfree>
 80058be:	e0b0      	b.n	8005a22 <_dtoa_r+0x622>
 80058c0:	07e2      	lsls	r2, r4, #31
 80058c2:	d505      	bpl.n	80058d0 <_dtoa_r+0x4d0>
 80058c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058c8:	f7fa feb6 	bl	8000638 <__aeabi_dmul>
 80058cc:	3601      	adds	r6, #1
 80058ce:	2301      	movs	r3, #1
 80058d0:	1064      	asrs	r4, r4, #1
 80058d2:	3508      	adds	r5, #8
 80058d4:	e762      	b.n	800579c <_dtoa_r+0x39c>
 80058d6:	2602      	movs	r6, #2
 80058d8:	e765      	b.n	80057a6 <_dtoa_r+0x3a6>
 80058da:	9c03      	ldr	r4, [sp, #12]
 80058dc:	46b8      	mov	r8, r7
 80058de:	e784      	b.n	80057ea <_dtoa_r+0x3ea>
 80058e0:	4b27      	ldr	r3, [pc, #156]	@ (8005980 <_dtoa_r+0x580>)
 80058e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ec:	4454      	add	r4, sl
 80058ee:	2900      	cmp	r1, #0
 80058f0:	d054      	beq.n	800599c <_dtoa_r+0x59c>
 80058f2:	4929      	ldr	r1, [pc, #164]	@ (8005998 <_dtoa_r+0x598>)
 80058f4:	2000      	movs	r0, #0
 80058f6:	f7fa ffc9 	bl	800088c <__aeabi_ddiv>
 80058fa:	4633      	mov	r3, r6
 80058fc:	462a      	mov	r2, r5
 80058fe:	f7fa fce3 	bl	80002c8 <__aeabi_dsub>
 8005902:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005906:	4656      	mov	r6, sl
 8005908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800590c:	f7fb f944 	bl	8000b98 <__aeabi_d2iz>
 8005910:	4605      	mov	r5, r0
 8005912:	f7fa fe27 	bl	8000564 <__aeabi_i2d>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591e:	f7fa fcd3 	bl	80002c8 <__aeabi_dsub>
 8005922:	3530      	adds	r5, #48	@ 0x30
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800592c:	f806 5b01 	strb.w	r5, [r6], #1
 8005930:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005934:	f7fb f8f2 	bl	8000b1c <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	d172      	bne.n	8005a22 <_dtoa_r+0x622>
 800593c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005940:	4911      	ldr	r1, [pc, #68]	@ (8005988 <_dtoa_r+0x588>)
 8005942:	2000      	movs	r0, #0
 8005944:	f7fa fcc0 	bl	80002c8 <__aeabi_dsub>
 8005948:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800594c:	f7fb f8e6 	bl	8000b1c <__aeabi_dcmplt>
 8005950:	2800      	cmp	r0, #0
 8005952:	f040 80b4 	bne.w	8005abe <_dtoa_r+0x6be>
 8005956:	42a6      	cmp	r6, r4
 8005958:	f43f af70 	beq.w	800583c <_dtoa_r+0x43c>
 800595c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <_dtoa_r+0x58c>)
 8005962:	2200      	movs	r2, #0
 8005964:	f7fa fe68 	bl	8000638 <__aeabi_dmul>
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <_dtoa_r+0x58c>)
 800596a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800596e:	2200      	movs	r2, #0
 8005970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005974:	f7fa fe60 	bl	8000638 <__aeabi_dmul>
 8005978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800597c:	e7c4      	b.n	8005908 <_dtoa_r+0x508>
 800597e:	bf00      	nop
 8005980:	08007a00 	.word	0x08007a00
 8005984:	080079d8 	.word	0x080079d8
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	40240000 	.word	0x40240000
 8005990:	401c0000 	.word	0x401c0000
 8005994:	40140000 	.word	0x40140000
 8005998:	3fe00000 	.word	0x3fe00000
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	f7fa fe4a 	bl	8000638 <__aeabi_dmul>
 80059a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059aa:	4656      	mov	r6, sl
 80059ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b0:	f7fb f8f2 	bl	8000b98 <__aeabi_d2iz>
 80059b4:	4605      	mov	r5, r0
 80059b6:	f7fa fdd5 	bl	8000564 <__aeabi_i2d>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c2:	f7fa fc81 	bl	80002c8 <__aeabi_dsub>
 80059c6:	3530      	adds	r5, #48	@ 0x30
 80059c8:	f806 5b01 	strb.w	r5, [r6], #1
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	d124      	bne.n	8005a26 <_dtoa_r+0x626>
 80059dc:	4baf      	ldr	r3, [pc, #700]	@ (8005c9c <_dtoa_r+0x89c>)
 80059de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059e2:	f7fa fc73 	bl	80002cc <__adddf3>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	f7fb f8b3 	bl	8000b58 <__aeabi_dcmpgt>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d163      	bne.n	8005abe <_dtoa_r+0x6be>
 80059f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059fa:	49a8      	ldr	r1, [pc, #672]	@ (8005c9c <_dtoa_r+0x89c>)
 80059fc:	2000      	movs	r0, #0
 80059fe:	f7fa fc63 	bl	80002c8 <__aeabi_dsub>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a0a:	f7fb f887 	bl	8000b1c <__aeabi_dcmplt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f43f af14 	beq.w	800583c <_dtoa_r+0x43c>
 8005a14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a16:	1e73      	subs	r3, r6, #1
 8005a18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a1e:	2b30      	cmp	r3, #48	@ 0x30
 8005a20:	d0f8      	beq.n	8005a14 <_dtoa_r+0x614>
 8005a22:	4647      	mov	r7, r8
 8005a24:	e03b      	b.n	8005a9e <_dtoa_r+0x69e>
 8005a26:	4b9e      	ldr	r3, [pc, #632]	@ (8005ca0 <_dtoa_r+0x8a0>)
 8005a28:	f7fa fe06 	bl	8000638 <__aeabi_dmul>
 8005a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a30:	e7bc      	b.n	80059ac <_dtoa_r+0x5ac>
 8005a32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a36:	4656      	mov	r6, sl
 8005a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa ff24 	bl	800088c <__aeabi_ddiv>
 8005a44:	f7fb f8a8 	bl	8000b98 <__aeabi_d2iz>
 8005a48:	4680      	mov	r8, r0
 8005a4a:	f7fa fd8b 	bl	8000564 <__aeabi_i2d>
 8005a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a52:	f7fa fdf1 	bl	8000638 <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a62:	f7fa fc31 	bl	80002c8 <__aeabi_dsub>
 8005a66:	f806 4b01 	strb.w	r4, [r6], #1
 8005a6a:	9d03      	ldr	r5, [sp, #12]
 8005a6c:	eba6 040a 	sub.w	r4, r6, sl
 8005a70:	42a5      	cmp	r5, r4
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	d133      	bne.n	8005ae0 <_dtoa_r+0x6e0>
 8005a78:	f7fa fc28 	bl	80002cc <__adddf3>
 8005a7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	f7fb f868 	bl	8000b58 <__aeabi_dcmpgt>
 8005a88:	b9c0      	cbnz	r0, 8005abc <_dtoa_r+0x6bc>
 8005a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fb f839 	bl	8000b08 <__aeabi_dcmpeq>
 8005a96:	b110      	cbz	r0, 8005a9e <_dtoa_r+0x69e>
 8005a98:	f018 0f01 	tst.w	r8, #1
 8005a9c:	d10e      	bne.n	8005abc <_dtoa_r+0x6bc>
 8005a9e:	9902      	ldr	r1, [sp, #8]
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	f000 fbbd 	bl	8006220 <_Bfree>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	7033      	strb	r3, [r6, #0]
 8005aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005aac:	3701      	adds	r7, #1
 8005aae:	601f      	str	r7, [r3, #0]
 8005ab0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 824b 	beq.w	8005f4e <_dtoa_r+0xb4e>
 8005ab8:	601e      	str	r6, [r3, #0]
 8005aba:	e248      	b.n	8005f4e <_dtoa_r+0xb4e>
 8005abc:	46b8      	mov	r8, r7
 8005abe:	4633      	mov	r3, r6
 8005ac0:	461e      	mov	r6, r3
 8005ac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ac6:	2a39      	cmp	r2, #57	@ 0x39
 8005ac8:	d106      	bne.n	8005ad8 <_dtoa_r+0x6d8>
 8005aca:	459a      	cmp	sl, r3
 8005acc:	d1f8      	bne.n	8005ac0 <_dtoa_r+0x6c0>
 8005ace:	2230      	movs	r2, #48	@ 0x30
 8005ad0:	f108 0801 	add.w	r8, r8, #1
 8005ad4:	f88a 2000 	strb.w	r2, [sl]
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	3201      	adds	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e7a0      	b.n	8005a22 <_dtoa_r+0x622>
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8005ca0 <_dtoa_r+0x8a0>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f7fa fda8 	bl	8000638 <__aeabi_dmul>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	4604      	mov	r4, r0
 8005aee:	460d      	mov	r5, r1
 8005af0:	f7fb f80a 	bl	8000b08 <__aeabi_dcmpeq>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d09f      	beq.n	8005a38 <_dtoa_r+0x638>
 8005af8:	e7d1      	b.n	8005a9e <_dtoa_r+0x69e>
 8005afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	f000 80ea 	beq.w	8005cd6 <_dtoa_r+0x8d6>
 8005b02:	9a07      	ldr	r2, [sp, #28]
 8005b04:	2a01      	cmp	r2, #1
 8005b06:	f300 80cd 	bgt.w	8005ca4 <_dtoa_r+0x8a4>
 8005b0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	f000 80c1 	beq.w	8005c94 <_dtoa_r+0x894>
 8005b12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b16:	9c08      	ldr	r4, [sp, #32]
 8005b18:	9e00      	ldr	r6, [sp, #0]
 8005b1a:	9a00      	ldr	r2, [sp, #0]
 8005b1c:	441a      	add	r2, r3
 8005b1e:	9200      	str	r2, [sp, #0]
 8005b20:	9a06      	ldr	r2, [sp, #24]
 8005b22:	2101      	movs	r1, #1
 8005b24:	441a      	add	r2, r3
 8005b26:	4648      	mov	r0, r9
 8005b28:	9206      	str	r2, [sp, #24]
 8005b2a:	f000 fc2d 	bl	8006388 <__i2b>
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b166      	cbz	r6, 8005b4c <_dtoa_r+0x74c>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dd09      	ble.n	8005b4c <_dtoa_r+0x74c>
 8005b38:	42b3      	cmp	r3, r6
 8005b3a:	9a00      	ldr	r2, [sp, #0]
 8005b3c:	bfa8      	it	ge
 8005b3e:	4633      	movge	r3, r6
 8005b40:	1ad2      	subs	r2, r2, r3
 8005b42:	9200      	str	r2, [sp, #0]
 8005b44:	9a06      	ldr	r2, [sp, #24]
 8005b46:	1af6      	subs	r6, r6, r3
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	9306      	str	r3, [sp, #24]
 8005b4c:	9b08      	ldr	r3, [sp, #32]
 8005b4e:	b30b      	cbz	r3, 8005b94 <_dtoa_r+0x794>
 8005b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80c6 	beq.w	8005ce4 <_dtoa_r+0x8e4>
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	f000 80c0 	beq.w	8005cde <_dtoa_r+0x8de>
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4622      	mov	r2, r4
 8005b62:	4648      	mov	r0, r9
 8005b64:	f000 fcc8 	bl	80064f8 <__pow5mult>
 8005b68:	9a02      	ldr	r2, [sp, #8]
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	4648      	mov	r0, r9
 8005b70:	f000 fc20 	bl	80063b4 <__multiply>
 8005b74:	9902      	ldr	r1, [sp, #8]
 8005b76:	4680      	mov	r8, r0
 8005b78:	4648      	mov	r0, r9
 8005b7a:	f000 fb51 	bl	8006220 <_Bfree>
 8005b7e:	9b08      	ldr	r3, [sp, #32]
 8005b80:	1b1b      	subs	r3, r3, r4
 8005b82:	9308      	str	r3, [sp, #32]
 8005b84:	f000 80b1 	beq.w	8005cea <_dtoa_r+0x8ea>
 8005b88:	9a08      	ldr	r2, [sp, #32]
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	4648      	mov	r0, r9
 8005b8e:	f000 fcb3 	bl	80064f8 <__pow5mult>
 8005b92:	9002      	str	r0, [sp, #8]
 8005b94:	2101      	movs	r1, #1
 8005b96:	4648      	mov	r0, r9
 8005b98:	f000 fbf6 	bl	8006388 <__i2b>
 8005b9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 81d8 	beq.w	8005f56 <_dtoa_r+0xb56>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4601      	mov	r1, r0
 8005baa:	4648      	mov	r0, r9
 8005bac:	f000 fca4 	bl	80064f8 <__pow5mult>
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	f300 809f 	bgt.w	8005cf8 <_dtoa_r+0x8f8>
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 8097 	bne.w	8005cf0 <_dtoa_r+0x8f0>
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f040 8093 	bne.w	8005cf4 <_dtoa_r+0x8f4>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bd4:	0d1b      	lsrs	r3, r3, #20
 8005bd6:	051b      	lsls	r3, r3, #20
 8005bd8:	b133      	cbz	r3, 8005be8 <_dtoa_r+0x7e8>
 8005bda:	9b00      	ldr	r3, [sp, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	9b06      	ldr	r3, [sp, #24]
 8005be2:	3301      	adds	r3, #1
 8005be4:	9306      	str	r3, [sp, #24]
 8005be6:	2301      	movs	r3, #1
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 81b8 	beq.w	8005f62 <_dtoa_r+0xb62>
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bf8:	6918      	ldr	r0, [r3, #16]
 8005bfa:	f000 fb79 	bl	80062f0 <__hi0bits>
 8005bfe:	f1c0 0020 	rsb	r0, r0, #32
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	4418      	add	r0, r3
 8005c06:	f010 001f 	ands.w	r0, r0, #31
 8005c0a:	f000 8082 	beq.w	8005d12 <_dtoa_r+0x912>
 8005c0e:	f1c0 0320 	rsb	r3, r0, #32
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	dd73      	ble.n	8005cfe <_dtoa_r+0x8fe>
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	f1c0 001c 	rsb	r0, r0, #28
 8005c1c:	4403      	add	r3, r0
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	4403      	add	r3, r0
 8005c24:	4406      	add	r6, r0
 8005c26:	9306      	str	r3, [sp, #24]
 8005c28:	9b00      	ldr	r3, [sp, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd05      	ble.n	8005c3a <_dtoa_r+0x83a>
 8005c2e:	9902      	ldr	r1, [sp, #8]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4648      	mov	r0, r9
 8005c34:	f000 fcba 	bl	80065ac <__lshift>
 8005c38:	9002      	str	r0, [sp, #8]
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dd05      	ble.n	8005c4c <_dtoa_r+0x84c>
 8005c40:	4621      	mov	r1, r4
 8005c42:	461a      	mov	r2, r3
 8005c44:	4648      	mov	r0, r9
 8005c46:	f000 fcb1 	bl	80065ac <__lshift>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d061      	beq.n	8005d16 <_dtoa_r+0x916>
 8005c52:	9802      	ldr	r0, [sp, #8]
 8005c54:	4621      	mov	r1, r4
 8005c56:	f000 fd15 	bl	8006684 <__mcmp>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	da5b      	bge.n	8005d16 <_dtoa_r+0x916>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9902      	ldr	r1, [sp, #8]
 8005c62:	220a      	movs	r2, #10
 8005c64:	4648      	mov	r0, r9
 8005c66:	f000 fafd 	bl	8006264 <__multadd>
 8005c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6c:	9002      	str	r0, [sp, #8]
 8005c6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8177 	beq.w	8005f66 <_dtoa_r+0xb66>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	220a      	movs	r2, #10
 8005c7e:	4648      	mov	r0, r9
 8005c80:	f000 faf0 	bl	8006264 <__multadd>
 8005c84:	f1bb 0f00 	cmp.w	fp, #0
 8005c88:	4605      	mov	r5, r0
 8005c8a:	dc6f      	bgt.n	8005d6c <_dtoa_r+0x96c>
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	dc49      	bgt.n	8005d26 <_dtoa_r+0x926>
 8005c92:	e06b      	b.n	8005d6c <_dtoa_r+0x96c>
 8005c94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c9a:	e73c      	b.n	8005b16 <_dtoa_r+0x716>
 8005c9c:	3fe00000 	.word	0x3fe00000
 8005ca0:	40240000 	.word	0x40240000
 8005ca4:	9b03      	ldr	r3, [sp, #12]
 8005ca6:	1e5c      	subs	r4, r3, #1
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	42a3      	cmp	r3, r4
 8005cac:	db09      	blt.n	8005cc2 <_dtoa_r+0x8c2>
 8005cae:	1b1c      	subs	r4, r3, r4
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f6bf af30 	bge.w	8005b18 <_dtoa_r+0x718>
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	9a03      	ldr	r2, [sp, #12]
 8005cbc:	1a9e      	subs	r6, r3, r2
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e72b      	b.n	8005b1a <_dtoa_r+0x71a>
 8005cc2:	9b08      	ldr	r3, [sp, #32]
 8005cc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cc6:	9408      	str	r4, [sp, #32]
 8005cc8:	1ae3      	subs	r3, r4, r3
 8005cca:	441a      	add	r2, r3
 8005ccc:	9e00      	ldr	r6, [sp, #0]
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005cd2:	2400      	movs	r4, #0
 8005cd4:	e721      	b.n	8005b1a <_dtoa_r+0x71a>
 8005cd6:	9c08      	ldr	r4, [sp, #32]
 8005cd8:	9e00      	ldr	r6, [sp, #0]
 8005cda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005cdc:	e728      	b.n	8005b30 <_dtoa_r+0x730>
 8005cde:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005ce2:	e751      	b.n	8005b88 <_dtoa_r+0x788>
 8005ce4:	9a08      	ldr	r2, [sp, #32]
 8005ce6:	9902      	ldr	r1, [sp, #8]
 8005ce8:	e750      	b.n	8005b8c <_dtoa_r+0x78c>
 8005cea:	f8cd 8008 	str.w	r8, [sp, #8]
 8005cee:	e751      	b.n	8005b94 <_dtoa_r+0x794>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e779      	b.n	8005be8 <_dtoa_r+0x7e8>
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	e777      	b.n	8005be8 <_dtoa_r+0x7e8>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9308      	str	r3, [sp, #32]
 8005cfc:	e779      	b.n	8005bf2 <_dtoa_r+0x7f2>
 8005cfe:	d093      	beq.n	8005c28 <_dtoa_r+0x828>
 8005d00:	9a00      	ldr	r2, [sp, #0]
 8005d02:	331c      	adds	r3, #28
 8005d04:	441a      	add	r2, r3
 8005d06:	9200      	str	r2, [sp, #0]
 8005d08:	9a06      	ldr	r2, [sp, #24]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	441e      	add	r6, r3
 8005d0e:	9206      	str	r2, [sp, #24]
 8005d10:	e78a      	b.n	8005c28 <_dtoa_r+0x828>
 8005d12:	4603      	mov	r3, r0
 8005d14:	e7f4      	b.n	8005d00 <_dtoa_r+0x900>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	46b8      	mov	r8, r7
 8005d1c:	dc20      	bgt.n	8005d60 <_dtoa_r+0x960>
 8005d1e:	469b      	mov	fp, r3
 8005d20:	9b07      	ldr	r3, [sp, #28]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	dd1e      	ble.n	8005d64 <_dtoa_r+0x964>
 8005d26:	f1bb 0f00 	cmp.w	fp, #0
 8005d2a:	f47f adb1 	bne.w	8005890 <_dtoa_r+0x490>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	465b      	mov	r3, fp
 8005d32:	2205      	movs	r2, #5
 8005d34:	4648      	mov	r0, r9
 8005d36:	f000 fa95 	bl	8006264 <__multadd>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	9802      	ldr	r0, [sp, #8]
 8005d40:	f000 fca0 	bl	8006684 <__mcmp>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f77f ada3 	ble.w	8005890 <_dtoa_r+0x490>
 8005d4a:	4656      	mov	r6, sl
 8005d4c:	2331      	movs	r3, #49	@ 0x31
 8005d4e:	f806 3b01 	strb.w	r3, [r6], #1
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	e59f      	b.n	8005898 <_dtoa_r+0x498>
 8005d58:	9c03      	ldr	r4, [sp, #12]
 8005d5a:	46b8      	mov	r8, r7
 8005d5c:	4625      	mov	r5, r4
 8005d5e:	e7f4      	b.n	8005d4a <_dtoa_r+0x94a>
 8005d60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8101 	beq.w	8005f6e <_dtoa_r+0xb6e>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	dd05      	ble.n	8005d7c <_dtoa_r+0x97c>
 8005d70:	4629      	mov	r1, r5
 8005d72:	4632      	mov	r2, r6
 8005d74:	4648      	mov	r0, r9
 8005d76:	f000 fc19 	bl	80065ac <__lshift>
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d05c      	beq.n	8005e3c <_dtoa_r+0xa3c>
 8005d82:	6869      	ldr	r1, [r5, #4]
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 fa0b 	bl	80061a0 <_Balloc>
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	b928      	cbnz	r0, 8005d9a <_dtoa_r+0x99a>
 8005d8e:	4b82      	ldr	r3, [pc, #520]	@ (8005f98 <_dtoa_r+0xb98>)
 8005d90:	4602      	mov	r2, r0
 8005d92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d96:	f7ff bb4a 	b.w	800542e <_dtoa_r+0x2e>
 8005d9a:	692a      	ldr	r2, [r5, #16]
 8005d9c:	3202      	adds	r2, #2
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	f105 010c 	add.w	r1, r5, #12
 8005da4:	300c      	adds	r0, #12
 8005da6:	f000 fff7 	bl	8006d98 <memcpy>
 8005daa:	2201      	movs	r2, #1
 8005dac:	4631      	mov	r1, r6
 8005dae:	4648      	mov	r0, r9
 8005db0:	f000 fbfc 	bl	80065ac <__lshift>
 8005db4:	f10a 0301 	add.w	r3, sl, #1
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	eb0a 030b 	add.w	r3, sl, fp
 8005dbe:	9308      	str	r3, [sp, #32]
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	462f      	mov	r7, r5
 8005dc8:	9306      	str	r3, [sp, #24]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	9802      	ldr	r0, [sp, #8]
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8005dd6:	f7ff fa88 	bl	80052ea <quorem>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	3330      	adds	r3, #48	@ 0x30
 8005dde:	9003      	str	r0, [sp, #12]
 8005de0:	4639      	mov	r1, r7
 8005de2:	9802      	ldr	r0, [sp, #8]
 8005de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de6:	f000 fc4d 	bl	8006684 <__mcmp>
 8005dea:	462a      	mov	r2, r5
 8005dec:	9004      	str	r0, [sp, #16]
 8005dee:	4621      	mov	r1, r4
 8005df0:	4648      	mov	r0, r9
 8005df2:	f000 fc63 	bl	80066bc <__mdiff>
 8005df6:	68c2      	ldr	r2, [r0, #12]
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	bb02      	cbnz	r2, 8005e40 <_dtoa_r+0xa40>
 8005dfe:	4601      	mov	r1, r0
 8005e00:	9802      	ldr	r0, [sp, #8]
 8005e02:	f000 fc3f 	bl	8006684 <__mcmp>
 8005e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4648      	mov	r0, r9
 8005e0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e12:	f000 fa05 	bl	8006220 <_Bfree>
 8005e16:	9b07      	ldr	r3, [sp, #28]
 8005e18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e1a:	9e00      	ldr	r6, [sp, #0]
 8005e1c:	ea42 0103 	orr.w	r1, r2, r3
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	4319      	orrs	r1, r3
 8005e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e26:	d10d      	bne.n	8005e44 <_dtoa_r+0xa44>
 8005e28:	2b39      	cmp	r3, #57	@ 0x39
 8005e2a:	d027      	beq.n	8005e7c <_dtoa_r+0xa7c>
 8005e2c:	9a04      	ldr	r2, [sp, #16]
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	dd01      	ble.n	8005e36 <_dtoa_r+0xa36>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	3331      	adds	r3, #49	@ 0x31
 8005e36:	f88b 3000 	strb.w	r3, [fp]
 8005e3a:	e52e      	b.n	800589a <_dtoa_r+0x49a>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e7b9      	b.n	8005db4 <_dtoa_r+0x9b4>
 8005e40:	2201      	movs	r2, #1
 8005e42:	e7e2      	b.n	8005e0a <_dtoa_r+0xa0a>
 8005e44:	9904      	ldr	r1, [sp, #16]
 8005e46:	2900      	cmp	r1, #0
 8005e48:	db04      	blt.n	8005e54 <_dtoa_r+0xa54>
 8005e4a:	9807      	ldr	r0, [sp, #28]
 8005e4c:	4301      	orrs	r1, r0
 8005e4e:	9806      	ldr	r0, [sp, #24]
 8005e50:	4301      	orrs	r1, r0
 8005e52:	d120      	bne.n	8005e96 <_dtoa_r+0xa96>
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	ddee      	ble.n	8005e36 <_dtoa_r+0xa36>
 8005e58:	9902      	ldr	r1, [sp, #8]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	4648      	mov	r0, r9
 8005e60:	f000 fba4 	bl	80065ac <__lshift>
 8005e64:	4621      	mov	r1, r4
 8005e66:	9002      	str	r0, [sp, #8]
 8005e68:	f000 fc0c 	bl	8006684 <__mcmp>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	9b00      	ldr	r3, [sp, #0]
 8005e70:	dc02      	bgt.n	8005e78 <_dtoa_r+0xa78>
 8005e72:	d1e0      	bne.n	8005e36 <_dtoa_r+0xa36>
 8005e74:	07da      	lsls	r2, r3, #31
 8005e76:	d5de      	bpl.n	8005e36 <_dtoa_r+0xa36>
 8005e78:	2b39      	cmp	r3, #57	@ 0x39
 8005e7a:	d1da      	bne.n	8005e32 <_dtoa_r+0xa32>
 8005e7c:	2339      	movs	r3, #57	@ 0x39
 8005e7e:	f88b 3000 	strb.w	r3, [fp]
 8005e82:	4633      	mov	r3, r6
 8005e84:	461e      	mov	r6, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e8c:	2a39      	cmp	r2, #57	@ 0x39
 8005e8e:	d04e      	beq.n	8005f2e <_dtoa_r+0xb2e>
 8005e90:	3201      	adds	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e501      	b.n	800589a <_dtoa_r+0x49a>
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	dd03      	ble.n	8005ea2 <_dtoa_r+0xaa2>
 8005e9a:	2b39      	cmp	r3, #57	@ 0x39
 8005e9c:	d0ee      	beq.n	8005e7c <_dtoa_r+0xa7c>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	e7c9      	b.n	8005e36 <_dtoa_r+0xa36>
 8005ea2:	9a00      	ldr	r2, [sp, #0]
 8005ea4:	9908      	ldr	r1, [sp, #32]
 8005ea6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005eaa:	428a      	cmp	r2, r1
 8005eac:	d028      	beq.n	8005f00 <_dtoa_r+0xb00>
 8005eae:	9902      	ldr	r1, [sp, #8]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	f000 f9d5 	bl	8006264 <__multadd>
 8005eba:	42af      	cmp	r7, r5
 8005ebc:	9002      	str	r0, [sp, #8]
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	f04f 020a 	mov.w	r2, #10
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	4648      	mov	r0, r9
 8005eca:	d107      	bne.n	8005edc <_dtoa_r+0xadc>
 8005ecc:	f000 f9ca 	bl	8006264 <__multadd>
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	e777      	b.n	8005dcc <_dtoa_r+0x9cc>
 8005edc:	f000 f9c2 	bl	8006264 <__multadd>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4607      	mov	r7, r0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	220a      	movs	r2, #10
 8005ee8:	4648      	mov	r0, r9
 8005eea:	f000 f9bb 	bl	8006264 <__multadd>
 8005eee:	4605      	mov	r5, r0
 8005ef0:	e7f0      	b.n	8005ed4 <_dtoa_r+0xad4>
 8005ef2:	f1bb 0f00 	cmp.w	fp, #0
 8005ef6:	bfcc      	ite	gt
 8005ef8:	465e      	movgt	r6, fp
 8005efa:	2601      	movle	r6, #1
 8005efc:	4456      	add	r6, sl
 8005efe:	2700      	movs	r7, #0
 8005f00:	9902      	ldr	r1, [sp, #8]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	4648      	mov	r0, r9
 8005f08:	f000 fb50 	bl	80065ac <__lshift>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	9002      	str	r0, [sp, #8]
 8005f10:	f000 fbb8 	bl	8006684 <__mcmp>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	dcb4      	bgt.n	8005e82 <_dtoa_r+0xa82>
 8005f18:	d102      	bne.n	8005f20 <_dtoa_r+0xb20>
 8005f1a:	9b00      	ldr	r3, [sp, #0]
 8005f1c:	07db      	lsls	r3, r3, #31
 8005f1e:	d4b0      	bmi.n	8005e82 <_dtoa_r+0xa82>
 8005f20:	4633      	mov	r3, r6
 8005f22:	461e      	mov	r6, r3
 8005f24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f28:	2a30      	cmp	r2, #48	@ 0x30
 8005f2a:	d0fa      	beq.n	8005f22 <_dtoa_r+0xb22>
 8005f2c:	e4b5      	b.n	800589a <_dtoa_r+0x49a>
 8005f2e:	459a      	cmp	sl, r3
 8005f30:	d1a8      	bne.n	8005e84 <_dtoa_r+0xa84>
 8005f32:	2331      	movs	r3, #49	@ 0x31
 8005f34:	f108 0801 	add.w	r8, r8, #1
 8005f38:	f88a 3000 	strb.w	r3, [sl]
 8005f3c:	e4ad      	b.n	800589a <_dtoa_r+0x49a>
 8005f3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f9c <_dtoa_r+0xb9c>
 8005f44:	b11b      	cbz	r3, 8005f4e <_dtoa_r+0xb4e>
 8005f46:	f10a 0308 	add.w	r3, sl, #8
 8005f4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4650      	mov	r0, sl
 8005f50:	b017      	add	sp, #92	@ 0x5c
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f77f ae2e 	ble.w	8005bba <_dtoa_r+0x7ba>
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	2001      	movs	r0, #1
 8005f64:	e64d      	b.n	8005c02 <_dtoa_r+0x802>
 8005f66:	f1bb 0f00 	cmp.w	fp, #0
 8005f6a:	f77f aed9 	ble.w	8005d20 <_dtoa_r+0x920>
 8005f6e:	4656      	mov	r6, sl
 8005f70:	9802      	ldr	r0, [sp, #8]
 8005f72:	4621      	mov	r1, r4
 8005f74:	f7ff f9b9 	bl	80052ea <quorem>
 8005f78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f80:	eba6 020a 	sub.w	r2, r6, sl
 8005f84:	4593      	cmp	fp, r2
 8005f86:	ddb4      	ble.n	8005ef2 <_dtoa_r+0xaf2>
 8005f88:	9902      	ldr	r1, [sp, #8]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	220a      	movs	r2, #10
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f000 f968 	bl	8006264 <__multadd>
 8005f94:	9002      	str	r0, [sp, #8]
 8005f96:	e7eb      	b.n	8005f70 <_dtoa_r+0xb70>
 8005f98:	08007908 	.word	0x08007908
 8005f9c:	0800788c 	.word	0x0800788c

08005fa0 <_free_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d041      	beq.n	800602c <_free_r+0x8c>
 8005fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fac:	1f0c      	subs	r4, r1, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfb8      	it	lt
 8005fb2:	18e4      	addlt	r4, r4, r3
 8005fb4:	f000 f8e8 	bl	8006188 <__malloc_lock>
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006030 <_free_r+0x90>)
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	b933      	cbnz	r3, 8005fcc <_free_r+0x2c>
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc8:	f000 b8e4 	b.w	8006194 <__malloc_unlock>
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d908      	bls.n	8005fe2 <_free_r+0x42>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	1821      	adds	r1, r4, r0
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf01      	itttt	eq
 8005fd8:	6819      	ldreq	r1, [r3, #0]
 8005fda:	685b      	ldreq	r3, [r3, #4]
 8005fdc:	1809      	addeq	r1, r1, r0
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	e7ed      	b.n	8005fbe <_free_r+0x1e>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b10b      	cbz	r3, 8005fec <_free_r+0x4c>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d9fa      	bls.n	8005fe2 <_free_r+0x42>
 8005fec:	6811      	ldr	r1, [r2, #0]
 8005fee:	1850      	adds	r0, r2, r1
 8005ff0:	42a0      	cmp	r0, r4
 8005ff2:	d10b      	bne.n	800600c <_free_r+0x6c>
 8005ff4:	6820      	ldr	r0, [r4, #0]
 8005ff6:	4401      	add	r1, r0
 8005ff8:	1850      	adds	r0, r2, r1
 8005ffa:	4283      	cmp	r3, r0
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	d1e0      	bne.n	8005fc2 <_free_r+0x22>
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	6053      	str	r3, [r2, #4]
 8006006:	4408      	add	r0, r1
 8006008:	6010      	str	r0, [r2, #0]
 800600a:	e7da      	b.n	8005fc2 <_free_r+0x22>
 800600c:	d902      	bls.n	8006014 <_free_r+0x74>
 800600e:	230c      	movs	r3, #12
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	e7d6      	b.n	8005fc2 <_free_r+0x22>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	1821      	adds	r1, r4, r0
 8006018:	428b      	cmp	r3, r1
 800601a:	bf04      	itt	eq
 800601c:	6819      	ldreq	r1, [r3, #0]
 800601e:	685b      	ldreq	r3, [r3, #4]
 8006020:	6063      	str	r3, [r4, #4]
 8006022:	bf04      	itt	eq
 8006024:	1809      	addeq	r1, r1, r0
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	6054      	str	r4, [r2, #4]
 800602a:	e7ca      	b.n	8005fc2 <_free_r+0x22>
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	200003e8 	.word	0x200003e8

08006034 <malloc>:
 8006034:	4b02      	ldr	r3, [pc, #8]	@ (8006040 <malloc+0xc>)
 8006036:	4601      	mov	r1, r0
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	f000 b825 	b.w	8006088 <_malloc_r>
 800603e:	bf00      	nop
 8006040:	20000018 	.word	0x20000018

08006044 <sbrk_aligned>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	4e0f      	ldr	r6, [pc, #60]	@ (8006084 <sbrk_aligned+0x40>)
 8006048:	460c      	mov	r4, r1
 800604a:	6831      	ldr	r1, [r6, #0]
 800604c:	4605      	mov	r5, r0
 800604e:	b911      	cbnz	r1, 8006056 <sbrk_aligned+0x12>
 8006050:	f000 fe92 	bl	8006d78 <_sbrk_r>
 8006054:	6030      	str	r0, [r6, #0]
 8006056:	4621      	mov	r1, r4
 8006058:	4628      	mov	r0, r5
 800605a:	f000 fe8d 	bl	8006d78 <_sbrk_r>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	d103      	bne.n	800606a <sbrk_aligned+0x26>
 8006062:	f04f 34ff 	mov.w	r4, #4294967295
 8006066:	4620      	mov	r0, r4
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	1cc4      	adds	r4, r0, #3
 800606c:	f024 0403 	bic.w	r4, r4, #3
 8006070:	42a0      	cmp	r0, r4
 8006072:	d0f8      	beq.n	8006066 <sbrk_aligned+0x22>
 8006074:	1a21      	subs	r1, r4, r0
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fe7e 	bl	8006d78 <_sbrk_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d1f2      	bne.n	8006066 <sbrk_aligned+0x22>
 8006080:	e7ef      	b.n	8006062 <sbrk_aligned+0x1e>
 8006082:	bf00      	nop
 8006084:	200003e4 	.word	0x200003e4

08006088 <_malloc_r>:
 8006088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800608c:	1ccd      	adds	r5, r1, #3
 800608e:	f025 0503 	bic.w	r5, r5, #3
 8006092:	3508      	adds	r5, #8
 8006094:	2d0c      	cmp	r5, #12
 8006096:	bf38      	it	cc
 8006098:	250c      	movcc	r5, #12
 800609a:	2d00      	cmp	r5, #0
 800609c:	4606      	mov	r6, r0
 800609e:	db01      	blt.n	80060a4 <_malloc_r+0x1c>
 80060a0:	42a9      	cmp	r1, r5
 80060a2:	d904      	bls.n	80060ae <_malloc_r+0x26>
 80060a4:	230c      	movs	r3, #12
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	2000      	movs	r0, #0
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006184 <_malloc_r+0xfc>
 80060b2:	f000 f869 	bl	8006188 <__malloc_lock>
 80060b6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ba:	461c      	mov	r4, r3
 80060bc:	bb44      	cbnz	r4, 8006110 <_malloc_r+0x88>
 80060be:	4629      	mov	r1, r5
 80060c0:	4630      	mov	r0, r6
 80060c2:	f7ff ffbf 	bl	8006044 <sbrk_aligned>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	4604      	mov	r4, r0
 80060ca:	d158      	bne.n	800617e <_malloc_r+0xf6>
 80060cc:	f8d8 4000 	ldr.w	r4, [r8]
 80060d0:	4627      	mov	r7, r4
 80060d2:	2f00      	cmp	r7, #0
 80060d4:	d143      	bne.n	800615e <_malloc_r+0xd6>
 80060d6:	2c00      	cmp	r4, #0
 80060d8:	d04b      	beq.n	8006172 <_malloc_r+0xea>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	4639      	mov	r1, r7
 80060de:	4630      	mov	r0, r6
 80060e0:	eb04 0903 	add.w	r9, r4, r3
 80060e4:	f000 fe48 	bl	8006d78 <_sbrk_r>
 80060e8:	4581      	cmp	r9, r0
 80060ea:	d142      	bne.n	8006172 <_malloc_r+0xea>
 80060ec:	6821      	ldr	r1, [r4, #0]
 80060ee:	1a6d      	subs	r5, r5, r1
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ffa6 	bl	8006044 <sbrk_aligned>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d03a      	beq.n	8006172 <_malloc_r+0xea>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	442b      	add	r3, r5
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	f8d8 3000 	ldr.w	r3, [r8]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	bb62      	cbnz	r2, 8006164 <_malloc_r+0xdc>
 800610a:	f8c8 7000 	str.w	r7, [r8]
 800610e:	e00f      	b.n	8006130 <_malloc_r+0xa8>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	1b52      	subs	r2, r2, r5
 8006114:	d420      	bmi.n	8006158 <_malloc_r+0xd0>
 8006116:	2a0b      	cmp	r2, #11
 8006118:	d917      	bls.n	800614a <_malloc_r+0xc2>
 800611a:	1961      	adds	r1, r4, r5
 800611c:	42a3      	cmp	r3, r4
 800611e:	6025      	str	r5, [r4, #0]
 8006120:	bf18      	it	ne
 8006122:	6059      	strne	r1, [r3, #4]
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	bf08      	it	eq
 8006128:	f8c8 1000 	streq.w	r1, [r8]
 800612c:	5162      	str	r2, [r4, r5]
 800612e:	604b      	str	r3, [r1, #4]
 8006130:	4630      	mov	r0, r6
 8006132:	f000 f82f 	bl	8006194 <__malloc_unlock>
 8006136:	f104 000b 	add.w	r0, r4, #11
 800613a:	1d23      	adds	r3, r4, #4
 800613c:	f020 0007 	bic.w	r0, r0, #7
 8006140:	1ac2      	subs	r2, r0, r3
 8006142:	bf1c      	itt	ne
 8006144:	1a1b      	subne	r3, r3, r0
 8006146:	50a3      	strne	r3, [r4, r2]
 8006148:	e7af      	b.n	80060aa <_malloc_r+0x22>
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	42a3      	cmp	r3, r4
 800614e:	bf0c      	ite	eq
 8006150:	f8c8 2000 	streq.w	r2, [r8]
 8006154:	605a      	strne	r2, [r3, #4]
 8006156:	e7eb      	b.n	8006130 <_malloc_r+0xa8>
 8006158:	4623      	mov	r3, r4
 800615a:	6864      	ldr	r4, [r4, #4]
 800615c:	e7ae      	b.n	80060bc <_malloc_r+0x34>
 800615e:	463c      	mov	r4, r7
 8006160:	687f      	ldr	r7, [r7, #4]
 8006162:	e7b6      	b.n	80060d2 <_malloc_r+0x4a>
 8006164:	461a      	mov	r2, r3
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	42a3      	cmp	r3, r4
 800616a:	d1fb      	bne.n	8006164 <_malloc_r+0xdc>
 800616c:	2300      	movs	r3, #0
 800616e:	6053      	str	r3, [r2, #4]
 8006170:	e7de      	b.n	8006130 <_malloc_r+0xa8>
 8006172:	230c      	movs	r3, #12
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	4630      	mov	r0, r6
 8006178:	f000 f80c 	bl	8006194 <__malloc_unlock>
 800617c:	e794      	b.n	80060a8 <_malloc_r+0x20>
 800617e:	6005      	str	r5, [r0, #0]
 8006180:	e7d6      	b.n	8006130 <_malloc_r+0xa8>
 8006182:	bf00      	nop
 8006184:	200003e8 	.word	0x200003e8

08006188 <__malloc_lock>:
 8006188:	4801      	ldr	r0, [pc, #4]	@ (8006190 <__malloc_lock+0x8>)
 800618a:	f7ff b8ac 	b.w	80052e6 <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	200003e0 	.word	0x200003e0

08006194 <__malloc_unlock>:
 8006194:	4801      	ldr	r0, [pc, #4]	@ (800619c <__malloc_unlock+0x8>)
 8006196:	f7ff b8a7 	b.w	80052e8 <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	200003e0 	.word	0x200003e0

080061a0 <_Balloc>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	69c6      	ldr	r6, [r0, #28]
 80061a4:	4604      	mov	r4, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	b976      	cbnz	r6, 80061c8 <_Balloc+0x28>
 80061aa:	2010      	movs	r0, #16
 80061ac:	f7ff ff42 	bl	8006034 <malloc>
 80061b0:	4602      	mov	r2, r0
 80061b2:	61e0      	str	r0, [r4, #28]
 80061b4:	b920      	cbnz	r0, 80061c0 <_Balloc+0x20>
 80061b6:	4b18      	ldr	r3, [pc, #96]	@ (8006218 <_Balloc+0x78>)
 80061b8:	4818      	ldr	r0, [pc, #96]	@ (800621c <_Balloc+0x7c>)
 80061ba:	216b      	movs	r1, #107	@ 0x6b
 80061bc:	f000 fdfa 	bl	8006db4 <__assert_func>
 80061c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061c4:	6006      	str	r6, [r0, #0]
 80061c6:	60c6      	str	r6, [r0, #12]
 80061c8:	69e6      	ldr	r6, [r4, #28]
 80061ca:	68f3      	ldr	r3, [r6, #12]
 80061cc:	b183      	cbz	r3, 80061f0 <_Balloc+0x50>
 80061ce:	69e3      	ldr	r3, [r4, #28]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061d6:	b9b8      	cbnz	r0, 8006208 <_Balloc+0x68>
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f605 	lsl.w	r6, r1, r5
 80061de:	1d72      	adds	r2, r6, #5
 80061e0:	0092      	lsls	r2, r2, #2
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fe04 	bl	8006df0 <_calloc_r>
 80061e8:	b160      	cbz	r0, 8006204 <_Balloc+0x64>
 80061ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061ee:	e00e      	b.n	800620e <_Balloc+0x6e>
 80061f0:	2221      	movs	r2, #33	@ 0x21
 80061f2:	2104      	movs	r1, #4
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fdfb 	bl	8006df0 <_calloc_r>
 80061fa:	69e3      	ldr	r3, [r4, #28]
 80061fc:	60f0      	str	r0, [r6, #12]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e4      	bne.n	80061ce <_Balloc+0x2e>
 8006204:	2000      	movs	r0, #0
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	6802      	ldr	r2, [r0, #0]
 800620a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800620e:	2300      	movs	r3, #0
 8006210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006214:	e7f7      	b.n	8006206 <_Balloc+0x66>
 8006216:	bf00      	nop
 8006218:	08007899 	.word	0x08007899
 800621c:	08007919 	.word	0x08007919

08006220 <_Bfree>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	69c6      	ldr	r6, [r0, #28]
 8006224:	4605      	mov	r5, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b976      	cbnz	r6, 8006248 <_Bfree+0x28>
 800622a:	2010      	movs	r0, #16
 800622c:	f7ff ff02 	bl	8006034 <malloc>
 8006230:	4602      	mov	r2, r0
 8006232:	61e8      	str	r0, [r5, #28]
 8006234:	b920      	cbnz	r0, 8006240 <_Bfree+0x20>
 8006236:	4b09      	ldr	r3, [pc, #36]	@ (800625c <_Bfree+0x3c>)
 8006238:	4809      	ldr	r0, [pc, #36]	@ (8006260 <_Bfree+0x40>)
 800623a:	218f      	movs	r1, #143	@ 0x8f
 800623c:	f000 fdba 	bl	8006db4 <__assert_func>
 8006240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006244:	6006      	str	r6, [r0, #0]
 8006246:	60c6      	str	r6, [r0, #12]
 8006248:	b13c      	cbz	r4, 800625a <_Bfree+0x3a>
 800624a:	69eb      	ldr	r3, [r5, #28]
 800624c:	6862      	ldr	r2, [r4, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006254:	6021      	str	r1, [r4, #0]
 8006256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	08007899 	.word	0x08007899
 8006260:	08007919 	.word	0x08007919

08006264 <__multadd>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	690d      	ldr	r5, [r1, #16]
 800626a:	4607      	mov	r7, r0
 800626c:	460c      	mov	r4, r1
 800626e:	461e      	mov	r6, r3
 8006270:	f101 0c14 	add.w	ip, r1, #20
 8006274:	2000      	movs	r0, #0
 8006276:	f8dc 3000 	ldr.w	r3, [ip]
 800627a:	b299      	uxth	r1, r3
 800627c:	fb02 6101 	mla	r1, r2, r1, r6
 8006280:	0c1e      	lsrs	r6, r3, #16
 8006282:	0c0b      	lsrs	r3, r1, #16
 8006284:	fb02 3306 	mla	r3, r2, r6, r3
 8006288:	b289      	uxth	r1, r1
 800628a:	3001      	adds	r0, #1
 800628c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006290:	4285      	cmp	r5, r0
 8006292:	f84c 1b04 	str.w	r1, [ip], #4
 8006296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800629a:	dcec      	bgt.n	8006276 <__multadd+0x12>
 800629c:	b30e      	cbz	r6, 80062e2 <__multadd+0x7e>
 800629e:	68a3      	ldr	r3, [r4, #8]
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dc19      	bgt.n	80062d8 <__multadd+0x74>
 80062a4:	6861      	ldr	r1, [r4, #4]
 80062a6:	4638      	mov	r0, r7
 80062a8:	3101      	adds	r1, #1
 80062aa:	f7ff ff79 	bl	80061a0 <_Balloc>
 80062ae:	4680      	mov	r8, r0
 80062b0:	b928      	cbnz	r0, 80062be <__multadd+0x5a>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <__multadd+0x84>)
 80062b6:	480d      	ldr	r0, [pc, #52]	@ (80062ec <__multadd+0x88>)
 80062b8:	21ba      	movs	r1, #186	@ 0xba
 80062ba:	f000 fd7b 	bl	8006db4 <__assert_func>
 80062be:	6922      	ldr	r2, [r4, #16]
 80062c0:	3202      	adds	r2, #2
 80062c2:	f104 010c 	add.w	r1, r4, #12
 80062c6:	0092      	lsls	r2, r2, #2
 80062c8:	300c      	adds	r0, #12
 80062ca:	f000 fd65 	bl	8006d98 <memcpy>
 80062ce:	4621      	mov	r1, r4
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ffa5 	bl	8006220 <_Bfree>
 80062d6:	4644      	mov	r4, r8
 80062d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062dc:	3501      	adds	r5, #1
 80062de:	615e      	str	r6, [r3, #20]
 80062e0:	6125      	str	r5, [r4, #16]
 80062e2:	4620      	mov	r0, r4
 80062e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e8:	08007908 	.word	0x08007908
 80062ec:	08007919 	.word	0x08007919

080062f0 <__hi0bits>:
 80062f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062f4:	4603      	mov	r3, r0
 80062f6:	bf36      	itet	cc
 80062f8:	0403      	lslcc	r3, r0, #16
 80062fa:	2000      	movcs	r0, #0
 80062fc:	2010      	movcc	r0, #16
 80062fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006302:	bf3c      	itt	cc
 8006304:	021b      	lslcc	r3, r3, #8
 8006306:	3008      	addcc	r0, #8
 8006308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800630c:	bf3c      	itt	cc
 800630e:	011b      	lslcc	r3, r3, #4
 8006310:	3004      	addcc	r0, #4
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	bf3c      	itt	cc
 8006318:	009b      	lslcc	r3, r3, #2
 800631a:	3002      	addcc	r0, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	db05      	blt.n	800632c <__hi0bits+0x3c>
 8006320:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006324:	f100 0001 	add.w	r0, r0, #1
 8006328:	bf08      	it	eq
 800632a:	2020      	moveq	r0, #32
 800632c:	4770      	bx	lr

0800632e <__lo0bits>:
 800632e:	6803      	ldr	r3, [r0, #0]
 8006330:	4602      	mov	r2, r0
 8006332:	f013 0007 	ands.w	r0, r3, #7
 8006336:	d00b      	beq.n	8006350 <__lo0bits+0x22>
 8006338:	07d9      	lsls	r1, r3, #31
 800633a:	d421      	bmi.n	8006380 <__lo0bits+0x52>
 800633c:	0798      	lsls	r0, r3, #30
 800633e:	bf49      	itett	mi
 8006340:	085b      	lsrmi	r3, r3, #1
 8006342:	089b      	lsrpl	r3, r3, #2
 8006344:	2001      	movmi	r0, #1
 8006346:	6013      	strmi	r3, [r2, #0]
 8006348:	bf5c      	itt	pl
 800634a:	6013      	strpl	r3, [r2, #0]
 800634c:	2002      	movpl	r0, #2
 800634e:	4770      	bx	lr
 8006350:	b299      	uxth	r1, r3
 8006352:	b909      	cbnz	r1, 8006358 <__lo0bits+0x2a>
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	2010      	movs	r0, #16
 8006358:	b2d9      	uxtb	r1, r3
 800635a:	b909      	cbnz	r1, 8006360 <__lo0bits+0x32>
 800635c:	3008      	adds	r0, #8
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	0719      	lsls	r1, r3, #28
 8006362:	bf04      	itt	eq
 8006364:	091b      	lsreq	r3, r3, #4
 8006366:	3004      	addeq	r0, #4
 8006368:	0799      	lsls	r1, r3, #30
 800636a:	bf04      	itt	eq
 800636c:	089b      	lsreq	r3, r3, #2
 800636e:	3002      	addeq	r0, #2
 8006370:	07d9      	lsls	r1, r3, #31
 8006372:	d403      	bmi.n	800637c <__lo0bits+0x4e>
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	f100 0001 	add.w	r0, r0, #1
 800637a:	d003      	beq.n	8006384 <__lo0bits+0x56>
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4770      	bx	lr
 8006380:	2000      	movs	r0, #0
 8006382:	4770      	bx	lr
 8006384:	2020      	movs	r0, #32
 8006386:	4770      	bx	lr

08006388 <__i2b>:
 8006388:	b510      	push	{r4, lr}
 800638a:	460c      	mov	r4, r1
 800638c:	2101      	movs	r1, #1
 800638e:	f7ff ff07 	bl	80061a0 <_Balloc>
 8006392:	4602      	mov	r2, r0
 8006394:	b928      	cbnz	r0, 80063a2 <__i2b+0x1a>
 8006396:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <__i2b+0x24>)
 8006398:	4805      	ldr	r0, [pc, #20]	@ (80063b0 <__i2b+0x28>)
 800639a:	f240 1145 	movw	r1, #325	@ 0x145
 800639e:	f000 fd09 	bl	8006db4 <__assert_func>
 80063a2:	2301      	movs	r3, #1
 80063a4:	6144      	str	r4, [r0, #20]
 80063a6:	6103      	str	r3, [r0, #16]
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	bf00      	nop
 80063ac:	08007908 	.word	0x08007908
 80063b0:	08007919 	.word	0x08007919

080063b4 <__multiply>:
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	4617      	mov	r7, r2
 80063ba:	690a      	ldr	r2, [r1, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	429a      	cmp	r2, r3
 80063c0:	bfa8      	it	ge
 80063c2:	463b      	movge	r3, r7
 80063c4:	4689      	mov	r9, r1
 80063c6:	bfa4      	itt	ge
 80063c8:	460f      	movge	r7, r1
 80063ca:	4699      	movge	r9, r3
 80063cc:	693d      	ldr	r5, [r7, #16]
 80063ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	eb05 060a 	add.w	r6, r5, sl
 80063da:	42b3      	cmp	r3, r6
 80063dc:	b085      	sub	sp, #20
 80063de:	bfb8      	it	lt
 80063e0:	3101      	addlt	r1, #1
 80063e2:	f7ff fedd 	bl	80061a0 <_Balloc>
 80063e6:	b930      	cbnz	r0, 80063f6 <__multiply+0x42>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b41      	ldr	r3, [pc, #260]	@ (80064f0 <__multiply+0x13c>)
 80063ec:	4841      	ldr	r0, [pc, #260]	@ (80064f4 <__multiply+0x140>)
 80063ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063f2:	f000 fcdf 	bl	8006db4 <__assert_func>
 80063f6:	f100 0414 	add.w	r4, r0, #20
 80063fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80063fe:	4623      	mov	r3, r4
 8006400:	2200      	movs	r2, #0
 8006402:	4573      	cmp	r3, lr
 8006404:	d320      	bcc.n	8006448 <__multiply+0x94>
 8006406:	f107 0814 	add.w	r8, r7, #20
 800640a:	f109 0114 	add.w	r1, r9, #20
 800640e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006412:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	1beb      	subs	r3, r5, r7
 800641a:	3b15      	subs	r3, #21
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	3304      	adds	r3, #4
 8006422:	3715      	adds	r7, #21
 8006424:	42bd      	cmp	r5, r7
 8006426:	bf38      	it	cc
 8006428:	2304      	movcc	r3, #4
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	9103      	str	r1, [sp, #12]
 8006430:	428b      	cmp	r3, r1
 8006432:	d80c      	bhi.n	800644e <__multiply+0x9a>
 8006434:	2e00      	cmp	r6, #0
 8006436:	dd03      	ble.n	8006440 <__multiply+0x8c>
 8006438:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800643c:	2b00      	cmp	r3, #0
 800643e:	d055      	beq.n	80064ec <__multiply+0x138>
 8006440:	6106      	str	r6, [r0, #16]
 8006442:	b005      	add	sp, #20
 8006444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006448:	f843 2b04 	str.w	r2, [r3], #4
 800644c:	e7d9      	b.n	8006402 <__multiply+0x4e>
 800644e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006452:	f1ba 0f00 	cmp.w	sl, #0
 8006456:	d01f      	beq.n	8006498 <__multiply+0xe4>
 8006458:	46c4      	mov	ip, r8
 800645a:	46a1      	mov	r9, r4
 800645c:	2700      	movs	r7, #0
 800645e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006462:	f8d9 3000 	ldr.w	r3, [r9]
 8006466:	fa1f fb82 	uxth.w	fp, r2
 800646a:	b29b      	uxth	r3, r3
 800646c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006470:	443b      	add	r3, r7
 8006472:	f8d9 7000 	ldr.w	r7, [r9]
 8006476:	0c12      	lsrs	r2, r2, #16
 8006478:	0c3f      	lsrs	r7, r7, #16
 800647a:	fb0a 7202 	mla	r2, sl, r2, r7
 800647e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006488:	4565      	cmp	r5, ip
 800648a:	f849 3b04 	str.w	r3, [r9], #4
 800648e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006492:	d8e4      	bhi.n	800645e <__multiply+0xaa>
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	50e7      	str	r7, [r4, r3]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800649e:	3104      	adds	r1, #4
 80064a0:	f1b9 0f00 	cmp.w	r9, #0
 80064a4:	d020      	beq.n	80064e8 <__multiply+0x134>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	4647      	mov	r7, r8
 80064aa:	46a4      	mov	ip, r4
 80064ac:	f04f 0a00 	mov.w	sl, #0
 80064b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80064b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80064b8:	fb09 220b 	mla	r2, r9, fp, r2
 80064bc:	4452      	add	r2, sl
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c4:	f84c 3b04 	str.w	r3, [ip], #4
 80064c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80064cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80064d4:	fb09 330a 	mla	r3, r9, sl, r3
 80064d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80064dc:	42bd      	cmp	r5, r7
 80064de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064e2:	d8e5      	bhi.n	80064b0 <__multiply+0xfc>
 80064e4:	9a01      	ldr	r2, [sp, #4]
 80064e6:	50a3      	str	r3, [r4, r2]
 80064e8:	3404      	adds	r4, #4
 80064ea:	e79f      	b.n	800642c <__multiply+0x78>
 80064ec:	3e01      	subs	r6, #1
 80064ee:	e7a1      	b.n	8006434 <__multiply+0x80>
 80064f0:	08007908 	.word	0x08007908
 80064f4:	08007919 	.word	0x08007919

080064f8 <__pow5mult>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	4615      	mov	r5, r2
 80064fe:	f012 0203 	ands.w	r2, r2, #3
 8006502:	4607      	mov	r7, r0
 8006504:	460e      	mov	r6, r1
 8006506:	d007      	beq.n	8006518 <__pow5mult+0x20>
 8006508:	4c25      	ldr	r4, [pc, #148]	@ (80065a0 <__pow5mult+0xa8>)
 800650a:	3a01      	subs	r2, #1
 800650c:	2300      	movs	r3, #0
 800650e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006512:	f7ff fea7 	bl	8006264 <__multadd>
 8006516:	4606      	mov	r6, r0
 8006518:	10ad      	asrs	r5, r5, #2
 800651a:	d03d      	beq.n	8006598 <__pow5mult+0xa0>
 800651c:	69fc      	ldr	r4, [r7, #28]
 800651e:	b97c      	cbnz	r4, 8006540 <__pow5mult+0x48>
 8006520:	2010      	movs	r0, #16
 8006522:	f7ff fd87 	bl	8006034 <malloc>
 8006526:	4602      	mov	r2, r0
 8006528:	61f8      	str	r0, [r7, #28]
 800652a:	b928      	cbnz	r0, 8006538 <__pow5mult+0x40>
 800652c:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <__pow5mult+0xac>)
 800652e:	481e      	ldr	r0, [pc, #120]	@ (80065a8 <__pow5mult+0xb0>)
 8006530:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006534:	f000 fc3e 	bl	8006db4 <__assert_func>
 8006538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	60c4      	str	r4, [r0, #12]
 8006540:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006548:	b94c      	cbnz	r4, 800655e <__pow5mult+0x66>
 800654a:	f240 2171 	movw	r1, #625	@ 0x271
 800654e:	4638      	mov	r0, r7
 8006550:	f7ff ff1a 	bl	8006388 <__i2b>
 8006554:	2300      	movs	r3, #0
 8006556:	f8c8 0008 	str.w	r0, [r8, #8]
 800655a:	4604      	mov	r4, r0
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	f04f 0900 	mov.w	r9, #0
 8006562:	07eb      	lsls	r3, r5, #31
 8006564:	d50a      	bpl.n	800657c <__pow5mult+0x84>
 8006566:	4631      	mov	r1, r6
 8006568:	4622      	mov	r2, r4
 800656a:	4638      	mov	r0, r7
 800656c:	f7ff ff22 	bl	80063b4 <__multiply>
 8006570:	4631      	mov	r1, r6
 8006572:	4680      	mov	r8, r0
 8006574:	4638      	mov	r0, r7
 8006576:	f7ff fe53 	bl	8006220 <_Bfree>
 800657a:	4646      	mov	r6, r8
 800657c:	106d      	asrs	r5, r5, #1
 800657e:	d00b      	beq.n	8006598 <__pow5mult+0xa0>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	b938      	cbnz	r0, 8006594 <__pow5mult+0x9c>
 8006584:	4622      	mov	r2, r4
 8006586:	4621      	mov	r1, r4
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff ff13 	bl	80063b4 <__multiply>
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	f8c0 9000 	str.w	r9, [r0]
 8006594:	4604      	mov	r4, r0
 8006596:	e7e4      	b.n	8006562 <__pow5mult+0x6a>
 8006598:	4630      	mov	r0, r6
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	bf00      	nop
 80065a0:	080079cc 	.word	0x080079cc
 80065a4:	08007899 	.word	0x08007899
 80065a8:	08007919 	.word	0x08007919

080065ac <__lshift>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	460c      	mov	r4, r1
 80065b2:	6849      	ldr	r1, [r1, #4]
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	4607      	mov	r7, r0
 80065be:	4691      	mov	r9, r2
 80065c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065c4:	f108 0601 	add.w	r6, r8, #1
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	db0b      	blt.n	80065e4 <__lshift+0x38>
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff fde7 	bl	80061a0 <_Balloc>
 80065d2:	4605      	mov	r5, r0
 80065d4:	b948      	cbnz	r0, 80065ea <__lshift+0x3e>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b28      	ldr	r3, [pc, #160]	@ (800667c <__lshift+0xd0>)
 80065da:	4829      	ldr	r0, [pc, #164]	@ (8006680 <__lshift+0xd4>)
 80065dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065e0:	f000 fbe8 	bl	8006db4 <__assert_func>
 80065e4:	3101      	adds	r1, #1
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	e7ee      	b.n	80065c8 <__lshift+0x1c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f100 0114 	add.w	r1, r0, #20
 80065f0:	f100 0210 	add.w	r2, r0, #16
 80065f4:	4618      	mov	r0, r3
 80065f6:	4553      	cmp	r3, sl
 80065f8:	db33      	blt.n	8006662 <__lshift+0xb6>
 80065fa:	6920      	ldr	r0, [r4, #16]
 80065fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006600:	f104 0314 	add.w	r3, r4, #20
 8006604:	f019 091f 	ands.w	r9, r9, #31
 8006608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800660c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006610:	d02b      	beq.n	800666a <__lshift+0xbe>
 8006612:	f1c9 0e20 	rsb	lr, r9, #32
 8006616:	468a      	mov	sl, r1
 8006618:	2200      	movs	r2, #0
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	fa00 f009 	lsl.w	r0, r0, r9
 8006620:	4310      	orrs	r0, r2
 8006622:	f84a 0b04 	str.w	r0, [sl], #4
 8006626:	f853 2b04 	ldr.w	r2, [r3], #4
 800662a:	459c      	cmp	ip, r3
 800662c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006630:	d8f3      	bhi.n	800661a <__lshift+0x6e>
 8006632:	ebac 0304 	sub.w	r3, ip, r4
 8006636:	3b15      	subs	r3, #21
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	f104 0015 	add.w	r0, r4, #21
 8006642:	4560      	cmp	r0, ip
 8006644:	bf88      	it	hi
 8006646:	2304      	movhi	r3, #4
 8006648:	50ca      	str	r2, [r1, r3]
 800664a:	b10a      	cbz	r2, 8006650 <__lshift+0xa4>
 800664c:	f108 0602 	add.w	r6, r8, #2
 8006650:	3e01      	subs	r6, #1
 8006652:	4638      	mov	r0, r7
 8006654:	612e      	str	r6, [r5, #16]
 8006656:	4621      	mov	r1, r4
 8006658:	f7ff fde2 	bl	8006220 <_Bfree>
 800665c:	4628      	mov	r0, r5
 800665e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006662:	f842 0f04 	str.w	r0, [r2, #4]!
 8006666:	3301      	adds	r3, #1
 8006668:	e7c5      	b.n	80065f6 <__lshift+0x4a>
 800666a:	3904      	subs	r1, #4
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	f841 2f04 	str.w	r2, [r1, #4]!
 8006674:	459c      	cmp	ip, r3
 8006676:	d8f9      	bhi.n	800666c <__lshift+0xc0>
 8006678:	e7ea      	b.n	8006650 <__lshift+0xa4>
 800667a:	bf00      	nop
 800667c:	08007908 	.word	0x08007908
 8006680:	08007919 	.word	0x08007919

08006684 <__mcmp>:
 8006684:	690a      	ldr	r2, [r1, #16]
 8006686:	4603      	mov	r3, r0
 8006688:	6900      	ldr	r0, [r0, #16]
 800668a:	1a80      	subs	r0, r0, r2
 800668c:	b530      	push	{r4, r5, lr}
 800668e:	d10e      	bne.n	80066ae <__mcmp+0x2a>
 8006690:	3314      	adds	r3, #20
 8006692:	3114      	adds	r1, #20
 8006694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800669c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066a4:	4295      	cmp	r5, r2
 80066a6:	d003      	beq.n	80066b0 <__mcmp+0x2c>
 80066a8:	d205      	bcs.n	80066b6 <__mcmp+0x32>
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
 80066ae:	bd30      	pop	{r4, r5, pc}
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d3f3      	bcc.n	800669c <__mcmp+0x18>
 80066b4:	e7fb      	b.n	80066ae <__mcmp+0x2a>
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7f9      	b.n	80066ae <__mcmp+0x2a>
	...

080066bc <__mdiff>:
 80066bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4689      	mov	r9, r1
 80066c2:	4606      	mov	r6, r0
 80066c4:	4611      	mov	r1, r2
 80066c6:	4648      	mov	r0, r9
 80066c8:	4614      	mov	r4, r2
 80066ca:	f7ff ffdb 	bl	8006684 <__mcmp>
 80066ce:	1e05      	subs	r5, r0, #0
 80066d0:	d112      	bne.n	80066f8 <__mdiff+0x3c>
 80066d2:	4629      	mov	r1, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff fd63 	bl	80061a0 <_Balloc>
 80066da:	4602      	mov	r2, r0
 80066dc:	b928      	cbnz	r0, 80066ea <__mdiff+0x2e>
 80066de:	4b3f      	ldr	r3, [pc, #252]	@ (80067dc <__mdiff+0x120>)
 80066e0:	f240 2137 	movw	r1, #567	@ 0x237
 80066e4:	483e      	ldr	r0, [pc, #248]	@ (80067e0 <__mdiff+0x124>)
 80066e6:	f000 fb65 	bl	8006db4 <__assert_func>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066f0:	4610      	mov	r0, r2
 80066f2:	b003      	add	sp, #12
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	bfbc      	itt	lt
 80066fa:	464b      	movlt	r3, r9
 80066fc:	46a1      	movlt	r9, r4
 80066fe:	4630      	mov	r0, r6
 8006700:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006704:	bfba      	itte	lt
 8006706:	461c      	movlt	r4, r3
 8006708:	2501      	movlt	r5, #1
 800670a:	2500      	movge	r5, #0
 800670c:	f7ff fd48 	bl	80061a0 <_Balloc>
 8006710:	4602      	mov	r2, r0
 8006712:	b918      	cbnz	r0, 800671c <__mdiff+0x60>
 8006714:	4b31      	ldr	r3, [pc, #196]	@ (80067dc <__mdiff+0x120>)
 8006716:	f240 2145 	movw	r1, #581	@ 0x245
 800671a:	e7e3      	b.n	80066e4 <__mdiff+0x28>
 800671c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006720:	6926      	ldr	r6, [r4, #16]
 8006722:	60c5      	str	r5, [r0, #12]
 8006724:	f109 0310 	add.w	r3, r9, #16
 8006728:	f109 0514 	add.w	r5, r9, #20
 800672c:	f104 0e14 	add.w	lr, r4, #20
 8006730:	f100 0b14 	add.w	fp, r0, #20
 8006734:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006738:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	46d9      	mov	r9, fp
 8006740:	f04f 0c00 	mov.w	ip, #0
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	f85e 0b04 	ldr.w	r0, [lr], #4
 800674a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	fa1f f38a 	uxth.w	r3, sl
 8006754:	4619      	mov	r1, r3
 8006756:	b283      	uxth	r3, r0
 8006758:	1acb      	subs	r3, r1, r3
 800675a:	0c00      	lsrs	r0, r0, #16
 800675c:	4463      	add	r3, ip
 800675e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006762:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800676c:	4576      	cmp	r6, lr
 800676e:	f849 3b04 	str.w	r3, [r9], #4
 8006772:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006776:	d8e5      	bhi.n	8006744 <__mdiff+0x88>
 8006778:	1b33      	subs	r3, r6, r4
 800677a:	3b15      	subs	r3, #21
 800677c:	f023 0303 	bic.w	r3, r3, #3
 8006780:	3415      	adds	r4, #21
 8006782:	3304      	adds	r3, #4
 8006784:	42a6      	cmp	r6, r4
 8006786:	bf38      	it	cc
 8006788:	2304      	movcc	r3, #4
 800678a:	441d      	add	r5, r3
 800678c:	445b      	add	r3, fp
 800678e:	461e      	mov	r6, r3
 8006790:	462c      	mov	r4, r5
 8006792:	4544      	cmp	r4, r8
 8006794:	d30e      	bcc.n	80067b4 <__mdiff+0xf8>
 8006796:	f108 0103 	add.w	r1, r8, #3
 800679a:	1b49      	subs	r1, r1, r5
 800679c:	f021 0103 	bic.w	r1, r1, #3
 80067a0:	3d03      	subs	r5, #3
 80067a2:	45a8      	cmp	r8, r5
 80067a4:	bf38      	it	cc
 80067a6:	2100      	movcc	r1, #0
 80067a8:	440b      	add	r3, r1
 80067aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067ae:	b191      	cbz	r1, 80067d6 <__mdiff+0x11a>
 80067b0:	6117      	str	r7, [r2, #16]
 80067b2:	e79d      	b.n	80066f0 <__mdiff+0x34>
 80067b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80067b8:	46e6      	mov	lr, ip
 80067ba:	0c08      	lsrs	r0, r1, #16
 80067bc:	fa1c fc81 	uxtah	ip, ip, r1
 80067c0:	4471      	add	r1, lr
 80067c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80067c6:	b289      	uxth	r1, r1
 80067c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067cc:	f846 1b04 	str.w	r1, [r6], #4
 80067d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067d4:	e7dd      	b.n	8006792 <__mdiff+0xd6>
 80067d6:	3f01      	subs	r7, #1
 80067d8:	e7e7      	b.n	80067aa <__mdiff+0xee>
 80067da:	bf00      	nop
 80067dc:	08007908 	.word	0x08007908
 80067e0:	08007919 	.word	0x08007919

080067e4 <__d2b>:
 80067e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	460f      	mov	r7, r1
 80067ea:	2101      	movs	r1, #1
 80067ec:	ec59 8b10 	vmov	r8, r9, d0
 80067f0:	4616      	mov	r6, r2
 80067f2:	f7ff fcd5 	bl	80061a0 <_Balloc>
 80067f6:	4604      	mov	r4, r0
 80067f8:	b930      	cbnz	r0, 8006808 <__d2b+0x24>
 80067fa:	4602      	mov	r2, r0
 80067fc:	4b23      	ldr	r3, [pc, #140]	@ (800688c <__d2b+0xa8>)
 80067fe:	4824      	ldr	r0, [pc, #144]	@ (8006890 <__d2b+0xac>)
 8006800:	f240 310f 	movw	r1, #783	@ 0x30f
 8006804:	f000 fad6 	bl	8006db4 <__assert_func>
 8006808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800680c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006810:	b10d      	cbz	r5, 8006816 <__d2b+0x32>
 8006812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	f1b8 0300 	subs.w	r3, r8, #0
 800681c:	d023      	beq.n	8006866 <__d2b+0x82>
 800681e:	4668      	mov	r0, sp
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	f7ff fd84 	bl	800632e <__lo0bits>
 8006826:	e9dd 1200 	ldrd	r1, r2, [sp]
 800682a:	b1d0      	cbz	r0, 8006862 <__d2b+0x7e>
 800682c:	f1c0 0320 	rsb	r3, r0, #32
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	430b      	orrs	r3, r1
 8006836:	40c2      	lsrs	r2, r0
 8006838:	6163      	str	r3, [r4, #20]
 800683a:	9201      	str	r2, [sp, #4]
 800683c:	9b01      	ldr	r3, [sp, #4]
 800683e:	61a3      	str	r3, [r4, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2201      	moveq	r2, #1
 8006846:	2202      	movne	r2, #2
 8006848:	6122      	str	r2, [r4, #16]
 800684a:	b1a5      	cbz	r5, 8006876 <__d2b+0x92>
 800684c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006850:	4405      	add	r5, r0
 8006852:	603d      	str	r5, [r7, #0]
 8006854:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4620      	mov	r0, r4
 800685c:	b003      	add	sp, #12
 800685e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006862:	6161      	str	r1, [r4, #20]
 8006864:	e7ea      	b.n	800683c <__d2b+0x58>
 8006866:	a801      	add	r0, sp, #4
 8006868:	f7ff fd61 	bl	800632e <__lo0bits>
 800686c:	9b01      	ldr	r3, [sp, #4]
 800686e:	6163      	str	r3, [r4, #20]
 8006870:	3020      	adds	r0, #32
 8006872:	2201      	movs	r2, #1
 8006874:	e7e8      	b.n	8006848 <__d2b+0x64>
 8006876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800687a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800687e:	6038      	str	r0, [r7, #0]
 8006880:	6918      	ldr	r0, [r3, #16]
 8006882:	f7ff fd35 	bl	80062f0 <__hi0bits>
 8006886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800688a:	e7e5      	b.n	8006858 <__d2b+0x74>
 800688c:	08007908 	.word	0x08007908
 8006890:	08007919 	.word	0x08007919

08006894 <__sfputc_r>:
 8006894:	6893      	ldr	r3, [r2, #8]
 8006896:	3b01      	subs	r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	b410      	push	{r4}
 800689c:	6093      	str	r3, [r2, #8]
 800689e:	da08      	bge.n	80068b2 <__sfputc_r+0x1e>
 80068a0:	6994      	ldr	r4, [r2, #24]
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	db01      	blt.n	80068aa <__sfputc_r+0x16>
 80068a6:	290a      	cmp	r1, #10
 80068a8:	d103      	bne.n	80068b2 <__sfputc_r+0x1e>
 80068aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ae:	f7fe bc08 	b.w	80050c2 <__swbuf_r>
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	1c58      	adds	r0, r3, #1
 80068b6:	6010      	str	r0, [r2, #0]
 80068b8:	7019      	strb	r1, [r3, #0]
 80068ba:	4608      	mov	r0, r1
 80068bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <__sfputs_r>:
 80068c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c4:	4606      	mov	r6, r0
 80068c6:	460f      	mov	r7, r1
 80068c8:	4614      	mov	r4, r2
 80068ca:	18d5      	adds	r5, r2, r3
 80068cc:	42ac      	cmp	r4, r5
 80068ce:	d101      	bne.n	80068d4 <__sfputs_r+0x12>
 80068d0:	2000      	movs	r0, #0
 80068d2:	e007      	b.n	80068e4 <__sfputs_r+0x22>
 80068d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d8:	463a      	mov	r2, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ffda 	bl	8006894 <__sfputc_r>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d1f3      	bne.n	80068cc <__sfputs_r+0xa>
 80068e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068e8 <_vfiprintf_r>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	460d      	mov	r5, r1
 80068ee:	b09d      	sub	sp, #116	@ 0x74
 80068f0:	4614      	mov	r4, r2
 80068f2:	4698      	mov	r8, r3
 80068f4:	4606      	mov	r6, r0
 80068f6:	b118      	cbz	r0, 8006900 <_vfiprintf_r+0x18>
 80068f8:	6a03      	ldr	r3, [r0, #32]
 80068fa:	b90b      	cbnz	r3, 8006900 <_vfiprintf_r+0x18>
 80068fc:	f7fe faf8 	bl	8004ef0 <__sinit>
 8006900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006902:	07d9      	lsls	r1, r3, #31
 8006904:	d405      	bmi.n	8006912 <_vfiprintf_r+0x2a>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	059a      	lsls	r2, r3, #22
 800690a:	d402      	bmi.n	8006912 <_vfiprintf_r+0x2a>
 800690c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800690e:	f7fe fcea 	bl	80052e6 <__retarget_lock_acquire_recursive>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	071b      	lsls	r3, r3, #28
 8006916:	d501      	bpl.n	800691c <_vfiprintf_r+0x34>
 8006918:	692b      	ldr	r3, [r5, #16]
 800691a:	b99b      	cbnz	r3, 8006944 <_vfiprintf_r+0x5c>
 800691c:	4629      	mov	r1, r5
 800691e:	4630      	mov	r0, r6
 8006920:	f7fe fc0e 	bl	8005140 <__swsetup_r>
 8006924:	b170      	cbz	r0, 8006944 <_vfiprintf_r+0x5c>
 8006926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006928:	07dc      	lsls	r4, r3, #31
 800692a:	d504      	bpl.n	8006936 <_vfiprintf_r+0x4e>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b01d      	add	sp, #116	@ 0x74
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	89ab      	ldrh	r3, [r5, #12]
 8006938:	0598      	lsls	r0, r3, #22
 800693a:	d4f7      	bmi.n	800692c <_vfiprintf_r+0x44>
 800693c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800693e:	f7fe fcd3 	bl	80052e8 <__retarget_lock_release_recursive>
 8006942:	e7f3      	b.n	800692c <_vfiprintf_r+0x44>
 8006944:	2300      	movs	r3, #0
 8006946:	9309      	str	r3, [sp, #36]	@ 0x24
 8006948:	2320      	movs	r3, #32
 800694a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800694e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006952:	2330      	movs	r3, #48	@ 0x30
 8006954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b04 <_vfiprintf_r+0x21c>
 8006958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800695c:	f04f 0901 	mov.w	r9, #1
 8006960:	4623      	mov	r3, r4
 8006962:	469a      	mov	sl, r3
 8006964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006968:	b10a      	cbz	r2, 800696e <_vfiprintf_r+0x86>
 800696a:	2a25      	cmp	r2, #37	@ 0x25
 800696c:	d1f9      	bne.n	8006962 <_vfiprintf_r+0x7a>
 800696e:	ebba 0b04 	subs.w	fp, sl, r4
 8006972:	d00b      	beq.n	800698c <_vfiprintf_r+0xa4>
 8006974:	465b      	mov	r3, fp
 8006976:	4622      	mov	r2, r4
 8006978:	4629      	mov	r1, r5
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ffa1 	bl	80068c2 <__sfputs_r>
 8006980:	3001      	adds	r0, #1
 8006982:	f000 80a7 	beq.w	8006ad4 <_vfiprintf_r+0x1ec>
 8006986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006988:	445a      	add	r2, fp
 800698a:	9209      	str	r2, [sp, #36]	@ 0x24
 800698c:	f89a 3000 	ldrb.w	r3, [sl]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 809f 	beq.w	8006ad4 <_vfiprintf_r+0x1ec>
 8006996:	2300      	movs	r3, #0
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a0:	f10a 0a01 	add.w	sl, sl, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	9307      	str	r3, [sp, #28]
 80069a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80069ae:	4654      	mov	r4, sl
 80069b0:	2205      	movs	r2, #5
 80069b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b6:	4853      	ldr	r0, [pc, #332]	@ (8006b04 <_vfiprintf_r+0x21c>)
 80069b8:	f7f9 fc2a 	bl	8000210 <memchr>
 80069bc:	9a04      	ldr	r2, [sp, #16]
 80069be:	b9d8      	cbnz	r0, 80069f8 <_vfiprintf_r+0x110>
 80069c0:	06d1      	lsls	r1, r2, #27
 80069c2:	bf44      	itt	mi
 80069c4:	2320      	movmi	r3, #32
 80069c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069ca:	0713      	lsls	r3, r2, #28
 80069cc:	bf44      	itt	mi
 80069ce:	232b      	movmi	r3, #43	@ 0x2b
 80069d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069d4:	f89a 3000 	ldrb.w	r3, [sl]
 80069d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069da:	d015      	beq.n	8006a08 <_vfiprintf_r+0x120>
 80069dc:	9a07      	ldr	r2, [sp, #28]
 80069de:	4654      	mov	r4, sl
 80069e0:	2000      	movs	r0, #0
 80069e2:	f04f 0c0a 	mov.w	ip, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ec:	3b30      	subs	r3, #48	@ 0x30
 80069ee:	2b09      	cmp	r3, #9
 80069f0:	d94b      	bls.n	8006a8a <_vfiprintf_r+0x1a2>
 80069f2:	b1b0      	cbz	r0, 8006a22 <_vfiprintf_r+0x13a>
 80069f4:	9207      	str	r2, [sp, #28]
 80069f6:	e014      	b.n	8006a22 <_vfiprintf_r+0x13a>
 80069f8:	eba0 0308 	sub.w	r3, r0, r8
 80069fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006a00:	4313      	orrs	r3, r2
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	46a2      	mov	sl, r4
 8006a06:	e7d2      	b.n	80069ae <_vfiprintf_r+0xc6>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	1d19      	adds	r1, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	9103      	str	r1, [sp, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfbb      	ittet	lt
 8006a14:	425b      	neglt	r3, r3
 8006a16:	f042 0202 	orrlt.w	r2, r2, #2
 8006a1a:	9307      	strge	r3, [sp, #28]
 8006a1c:	9307      	strlt	r3, [sp, #28]
 8006a1e:	bfb8      	it	lt
 8006a20:	9204      	strlt	r2, [sp, #16]
 8006a22:	7823      	ldrb	r3, [r4, #0]
 8006a24:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a26:	d10a      	bne.n	8006a3e <_vfiprintf_r+0x156>
 8006a28:	7863      	ldrb	r3, [r4, #1]
 8006a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a2c:	d132      	bne.n	8006a94 <_vfiprintf_r+0x1ac>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	1d1a      	adds	r2, r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	9203      	str	r2, [sp, #12]
 8006a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a3a:	3402      	adds	r4, #2
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b14 <_vfiprintf_r+0x22c>
 8006a42:	7821      	ldrb	r1, [r4, #0]
 8006a44:	2203      	movs	r2, #3
 8006a46:	4650      	mov	r0, sl
 8006a48:	f7f9 fbe2 	bl	8000210 <memchr>
 8006a4c:	b138      	cbz	r0, 8006a5e <_vfiprintf_r+0x176>
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	eba0 000a 	sub.w	r0, r0, sl
 8006a54:	2240      	movs	r2, #64	@ 0x40
 8006a56:	4082      	lsls	r2, r0
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	3401      	adds	r4, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4829      	ldr	r0, [pc, #164]	@ (8006b08 <_vfiprintf_r+0x220>)
 8006a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a68:	2206      	movs	r2, #6
 8006a6a:	f7f9 fbd1 	bl	8000210 <memchr>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d03f      	beq.n	8006af2 <_vfiprintf_r+0x20a>
 8006a72:	4b26      	ldr	r3, [pc, #152]	@ (8006b0c <_vfiprintf_r+0x224>)
 8006a74:	bb1b      	cbnz	r3, 8006abe <_vfiprintf_r+0x1d6>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	3307      	adds	r3, #7
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	3308      	adds	r3, #8
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	443b      	add	r3, r7
 8006a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a88:	e76a      	b.n	8006960 <_vfiprintf_r+0x78>
 8006a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a8e:	460c      	mov	r4, r1
 8006a90:	2001      	movs	r0, #1
 8006a92:	e7a8      	b.n	80069e6 <_vfiprintf_r+0xfe>
 8006a94:	2300      	movs	r3, #0
 8006a96:	3401      	adds	r4, #1
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f04f 0c0a 	mov.w	ip, #10
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa6:	3a30      	subs	r2, #48	@ 0x30
 8006aa8:	2a09      	cmp	r2, #9
 8006aaa:	d903      	bls.n	8006ab4 <_vfiprintf_r+0x1cc>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0c6      	beq.n	8006a3e <_vfiprintf_r+0x156>
 8006ab0:	9105      	str	r1, [sp, #20]
 8006ab2:	e7c4      	b.n	8006a3e <_vfiprintf_r+0x156>
 8006ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab8:	4604      	mov	r4, r0
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7f0      	b.n	8006aa0 <_vfiprintf_r+0x1b8>
 8006abe:	ab03      	add	r3, sp, #12
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <_vfiprintf_r+0x228>)
 8006ac6:	a904      	add	r1, sp, #16
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7fd fdcf 	bl	800466c <_printf_float>
 8006ace:	4607      	mov	r7, r0
 8006ad0:	1c78      	adds	r0, r7, #1
 8006ad2:	d1d6      	bne.n	8006a82 <_vfiprintf_r+0x19a>
 8006ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ad6:	07d9      	lsls	r1, r3, #31
 8006ad8:	d405      	bmi.n	8006ae6 <_vfiprintf_r+0x1fe>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	059a      	lsls	r2, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_vfiprintf_r+0x1fe>
 8006ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ae2:	f7fe fc01 	bl	80052e8 <__retarget_lock_release_recursive>
 8006ae6:	89ab      	ldrh	r3, [r5, #12]
 8006ae8:	065b      	lsls	r3, r3, #25
 8006aea:	f53f af1f 	bmi.w	800692c <_vfiprintf_r+0x44>
 8006aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006af0:	e71e      	b.n	8006930 <_vfiprintf_r+0x48>
 8006af2:	ab03      	add	r3, sp, #12
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	462a      	mov	r2, r5
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <_vfiprintf_r+0x228>)
 8006afa:	a904      	add	r1, sp, #16
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7fe f84d 	bl	8004b9c <_printf_i>
 8006b02:	e7e4      	b.n	8006ace <_vfiprintf_r+0x1e6>
 8006b04:	08007972 	.word	0x08007972
 8006b08:	0800797c 	.word	0x0800797c
 8006b0c:	0800466d 	.word	0x0800466d
 8006b10:	080068c3 	.word	0x080068c3
 8006b14:	08007978 	.word	0x08007978

08006b18 <__sflush_r>:
 8006b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b20:	0716      	lsls	r6, r2, #28
 8006b22:	4605      	mov	r5, r0
 8006b24:	460c      	mov	r4, r1
 8006b26:	d454      	bmi.n	8006bd2 <__sflush_r+0xba>
 8006b28:	684b      	ldr	r3, [r1, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dc02      	bgt.n	8006b34 <__sflush_r+0x1c>
 8006b2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dd48      	ble.n	8006bc6 <__sflush_r+0xae>
 8006b34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	d045      	beq.n	8006bc6 <__sflush_r+0xae>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b40:	682f      	ldr	r7, [r5, #0]
 8006b42:	6a21      	ldr	r1, [r4, #32]
 8006b44:	602b      	str	r3, [r5, #0]
 8006b46:	d030      	beq.n	8006baa <__sflush_r+0x92>
 8006b48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	0759      	lsls	r1, r3, #29
 8006b4e:	d505      	bpl.n	8006b5c <__sflush_r+0x44>
 8006b50:	6863      	ldr	r3, [r4, #4]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b56:	b10b      	cbz	r3, 8006b5c <__sflush_r+0x44>
 8006b58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b5a:	1ad2      	subs	r2, r2, r3
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b60:	6a21      	ldr	r1, [r4, #32]
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b0      	blx	r6
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	d106      	bne.n	8006b7a <__sflush_r+0x62>
 8006b6c:	6829      	ldr	r1, [r5, #0]
 8006b6e:	291d      	cmp	r1, #29
 8006b70:	d82b      	bhi.n	8006bca <__sflush_r+0xb2>
 8006b72:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <__sflush_r+0x104>)
 8006b74:	40ca      	lsrs	r2, r1
 8006b76:	07d6      	lsls	r6, r2, #31
 8006b78:	d527      	bpl.n	8006bca <__sflush_r+0xb2>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	6062      	str	r2, [r4, #4]
 8006b7e:	04d9      	lsls	r1, r3, #19
 8006b80:	6922      	ldr	r2, [r4, #16]
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	d504      	bpl.n	8006b90 <__sflush_r+0x78>
 8006b86:	1c42      	adds	r2, r0, #1
 8006b88:	d101      	bne.n	8006b8e <__sflush_r+0x76>
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	b903      	cbnz	r3, 8006b90 <__sflush_r+0x78>
 8006b8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b92:	602f      	str	r7, [r5, #0]
 8006b94:	b1b9      	cbz	r1, 8006bc6 <__sflush_r+0xae>
 8006b96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	d002      	beq.n	8006ba4 <__sflush_r+0x8c>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f7ff f9fe 	bl	8005fa0 <_free_r>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ba8:	e00d      	b.n	8006bc6 <__sflush_r+0xae>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b0      	blx	r6
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	1c50      	adds	r0, r2, #1
 8006bb4:	d1c9      	bne.n	8006b4a <__sflush_r+0x32>
 8006bb6:	682b      	ldr	r3, [r5, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0c6      	beq.n	8006b4a <__sflush_r+0x32>
 8006bbc:	2b1d      	cmp	r3, #29
 8006bbe:	d001      	beq.n	8006bc4 <__sflush_r+0xac>
 8006bc0:	2b16      	cmp	r3, #22
 8006bc2:	d11e      	bne.n	8006c02 <__sflush_r+0xea>
 8006bc4:	602f      	str	r7, [r5, #0]
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e022      	b.n	8006c10 <__sflush_r+0xf8>
 8006bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bce:	b21b      	sxth	r3, r3
 8006bd0:	e01b      	b.n	8006c0a <__sflush_r+0xf2>
 8006bd2:	690f      	ldr	r7, [r1, #16]
 8006bd4:	2f00      	cmp	r7, #0
 8006bd6:	d0f6      	beq.n	8006bc6 <__sflush_r+0xae>
 8006bd8:	0793      	lsls	r3, r2, #30
 8006bda:	680e      	ldr	r6, [r1, #0]
 8006bdc:	bf08      	it	eq
 8006bde:	694b      	ldreq	r3, [r1, #20]
 8006be0:	600f      	str	r7, [r1, #0]
 8006be2:	bf18      	it	ne
 8006be4:	2300      	movne	r3, #0
 8006be6:	eba6 0807 	sub.w	r8, r6, r7
 8006bea:	608b      	str	r3, [r1, #8]
 8006bec:	f1b8 0f00 	cmp.w	r8, #0
 8006bf0:	dde9      	ble.n	8006bc6 <__sflush_r+0xae>
 8006bf2:	6a21      	ldr	r1, [r4, #32]
 8006bf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bf6:	4643      	mov	r3, r8
 8006bf8:	463a      	mov	r2, r7
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	47b0      	blx	r6
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	dc08      	bgt.n	8006c14 <__sflush_r+0xfc>
 8006c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c14:	4407      	add	r7, r0
 8006c16:	eba8 0800 	sub.w	r8, r8, r0
 8006c1a:	e7e7      	b.n	8006bec <__sflush_r+0xd4>
 8006c1c:	20400001 	.word	0x20400001

08006c20 <_fflush_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	690b      	ldr	r3, [r1, #16]
 8006c24:	4605      	mov	r5, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	b913      	cbnz	r3, 8006c30 <_fflush_r+0x10>
 8006c2a:	2500      	movs	r5, #0
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	b118      	cbz	r0, 8006c3a <_fflush_r+0x1a>
 8006c32:	6a03      	ldr	r3, [r0, #32]
 8006c34:	b90b      	cbnz	r3, 8006c3a <_fflush_r+0x1a>
 8006c36:	f7fe f95b 	bl	8004ef0 <__sinit>
 8006c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f3      	beq.n	8006c2a <_fflush_r+0xa>
 8006c42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c44:	07d0      	lsls	r0, r2, #31
 8006c46:	d404      	bmi.n	8006c52 <_fflush_r+0x32>
 8006c48:	0599      	lsls	r1, r3, #22
 8006c4a:	d402      	bmi.n	8006c52 <_fflush_r+0x32>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c4e:	f7fe fb4a 	bl	80052e6 <__retarget_lock_acquire_recursive>
 8006c52:	4628      	mov	r0, r5
 8006c54:	4621      	mov	r1, r4
 8006c56:	f7ff ff5f 	bl	8006b18 <__sflush_r>
 8006c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c5c:	07da      	lsls	r2, r3, #31
 8006c5e:	4605      	mov	r5, r0
 8006c60:	d4e4      	bmi.n	8006c2c <_fflush_r+0xc>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	059b      	lsls	r3, r3, #22
 8006c66:	d4e1      	bmi.n	8006c2c <_fflush_r+0xc>
 8006c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c6a:	f7fe fb3d 	bl	80052e8 <__retarget_lock_release_recursive>
 8006c6e:	e7dd      	b.n	8006c2c <_fflush_r+0xc>

08006c70 <__swhatbuf_r>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	460c      	mov	r4, r1
 8006c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	b096      	sub	sp, #88	@ 0x58
 8006c7c:	4615      	mov	r5, r2
 8006c7e:	461e      	mov	r6, r3
 8006c80:	da0d      	bge.n	8006c9e <__swhatbuf_r+0x2e>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c88:	f04f 0100 	mov.w	r1, #0
 8006c8c:	bf14      	ite	ne
 8006c8e:	2340      	movne	r3, #64	@ 0x40
 8006c90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c94:	2000      	movs	r0, #0
 8006c96:	6031      	str	r1, [r6, #0]
 8006c98:	602b      	str	r3, [r5, #0]
 8006c9a:	b016      	add	sp, #88	@ 0x58
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	466a      	mov	r2, sp
 8006ca0:	f000 f848 	bl	8006d34 <_fstat_r>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dbec      	blt.n	8006c82 <__swhatbuf_r+0x12>
 8006ca8:	9901      	ldr	r1, [sp, #4]
 8006caa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cb2:	4259      	negs	r1, r3
 8006cb4:	4159      	adcs	r1, r3
 8006cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cba:	e7eb      	b.n	8006c94 <__swhatbuf_r+0x24>

08006cbc <__smakebuf_r>:
 8006cbc:	898b      	ldrh	r3, [r1, #12]
 8006cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cc0:	079d      	lsls	r5, r3, #30
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	d507      	bpl.n	8006cd8 <__smakebuf_r+0x1c>
 8006cc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	6123      	str	r3, [r4, #16]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	6163      	str	r3, [r4, #20]
 8006cd4:	b003      	add	sp, #12
 8006cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd8:	ab01      	add	r3, sp, #4
 8006cda:	466a      	mov	r2, sp
 8006cdc:	f7ff ffc8 	bl	8006c70 <__swhatbuf_r>
 8006ce0:	9f00      	ldr	r7, [sp, #0]
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff f9ce 	bl	8006088 <_malloc_r>
 8006cec:	b948      	cbnz	r0, 8006d02 <__smakebuf_r+0x46>
 8006cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf2:	059a      	lsls	r2, r3, #22
 8006cf4:	d4ee      	bmi.n	8006cd4 <__smakebuf_r+0x18>
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	f043 0302 	orr.w	r3, r3, #2
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	e7e2      	b.n	8006cc8 <__smakebuf_r+0xc>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	6020      	str	r0, [r4, #0]
 8006d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	9b01      	ldr	r3, [sp, #4]
 8006d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d12:	b15b      	cbz	r3, 8006d2c <__smakebuf_r+0x70>
 8006d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f81d 	bl	8006d58 <_isatty_r>
 8006d1e:	b128      	cbz	r0, 8006d2c <__smakebuf_r+0x70>
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	431d      	orrs	r5, r3
 8006d30:	81a5      	strh	r5, [r4, #12]
 8006d32:	e7cf      	b.n	8006cd4 <__smakebuf_r+0x18>

08006d34 <_fstat_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d07      	ldr	r5, [pc, #28]	@ (8006d54 <_fstat_r+0x20>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	4611      	mov	r1, r2
 8006d40:	602b      	str	r3, [r5, #0]
 8006d42:	f7fa fd88 	bl	8001856 <_fstat>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d102      	bne.n	8006d50 <_fstat_r+0x1c>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	b103      	cbz	r3, 8006d50 <_fstat_r+0x1c>
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	bd38      	pop	{r3, r4, r5, pc}
 8006d52:	bf00      	nop
 8006d54:	200003dc 	.word	0x200003dc

08006d58 <_isatty_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	@ (8006d74 <_isatty_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fa fd87 	bl	8001876 <_isatty>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_isatty_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_isatty_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	200003dc 	.word	0x200003dc

08006d78 <_sbrk_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	@ (8006d94 <_sbrk_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa fd90 	bl	80018a8 <_sbrk>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_sbrk_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_sbrk_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200003dc 	.word	0x200003dc

08006d98 <memcpy>:
 8006d98:	440a      	add	r2, r1
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da0:	d100      	bne.n	8006da4 <memcpy+0xc>
 8006da2:	4770      	bx	lr
 8006da4:	b510      	push	{r4, lr}
 8006da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dae:	4291      	cmp	r1, r2
 8006db0:	d1f9      	bne.n	8006da6 <memcpy+0xe>
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <__assert_func>:
 8006db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b09      	ldr	r3, [pc, #36]	@ (8006de0 <__assert_func+0x2c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	b14c      	cbz	r4, 8006dd8 <__assert_func+0x24>
 8006dc4:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <__assert_func+0x30>)
 8006dc6:	9100      	str	r1, [sp, #0]
 8006dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dcc:	4906      	ldr	r1, [pc, #24]	@ (8006de8 <__assert_func+0x34>)
 8006dce:	462b      	mov	r3, r5
 8006dd0:	f000 f842 	bl	8006e58 <fiprintf>
 8006dd4:	f000 f852 	bl	8006e7c <abort>
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__assert_func+0x38>)
 8006dda:	461c      	mov	r4, r3
 8006ddc:	e7f3      	b.n	8006dc6 <__assert_func+0x12>
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018
 8006de4:	0800798d 	.word	0x0800798d
 8006de8:	0800799a 	.word	0x0800799a
 8006dec:	080079c8 	.word	0x080079c8

08006df0 <_calloc_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	fba1 5402 	umull	r5, r4, r1, r2
 8006df6:	b934      	cbnz	r4, 8006e06 <_calloc_r+0x16>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7ff f945 	bl	8006088 <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <_calloc_r+0x1e>
 8006e02:	4630      	mov	r0, r6
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
 8006e06:	220c      	movs	r2, #12
 8006e08:	6002      	str	r2, [r0, #0]
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	e7f9      	b.n	8006e02 <_calloc_r+0x12>
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7fe f9eb 	bl	80051ec <memset>
 8006e16:	e7f4      	b.n	8006e02 <_calloc_r+0x12>

08006e18 <__ascii_mbtowc>:
 8006e18:	b082      	sub	sp, #8
 8006e1a:	b901      	cbnz	r1, 8006e1e <__ascii_mbtowc+0x6>
 8006e1c:	a901      	add	r1, sp, #4
 8006e1e:	b142      	cbz	r2, 8006e32 <__ascii_mbtowc+0x1a>
 8006e20:	b14b      	cbz	r3, 8006e36 <__ascii_mbtowc+0x1e>
 8006e22:	7813      	ldrb	r3, [r2, #0]
 8006e24:	600b      	str	r3, [r1, #0]
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	1e10      	subs	r0, r2, #0
 8006e2a:	bf18      	it	ne
 8006e2c:	2001      	movne	r0, #1
 8006e2e:	b002      	add	sp, #8
 8006e30:	4770      	bx	lr
 8006e32:	4610      	mov	r0, r2
 8006e34:	e7fb      	b.n	8006e2e <__ascii_mbtowc+0x16>
 8006e36:	f06f 0001 	mvn.w	r0, #1
 8006e3a:	e7f8      	b.n	8006e2e <__ascii_mbtowc+0x16>

08006e3c <__ascii_wctomb>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4608      	mov	r0, r1
 8006e40:	b141      	cbz	r1, 8006e54 <__ascii_wctomb+0x18>
 8006e42:	2aff      	cmp	r2, #255	@ 0xff
 8006e44:	d904      	bls.n	8006e50 <__ascii_wctomb+0x14>
 8006e46:	228a      	movs	r2, #138	@ 0x8a
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	4770      	bx	lr
 8006e50:	700a      	strb	r2, [r1, #0]
 8006e52:	2001      	movs	r0, #1
 8006e54:	4770      	bx	lr
	...

08006e58 <fiprintf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b503      	push	{r0, r1, lr}
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	4805      	ldr	r0, [pc, #20]	@ (8006e78 <fiprintf+0x20>)
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	f7ff fd3d 	bl	80068e8 <_vfiprintf_r>
 8006e6e:	b002      	add	sp, #8
 8006e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e74:	b003      	add	sp, #12
 8006e76:	4770      	bx	lr
 8006e78:	20000018 	.word	0x20000018

08006e7c <abort>:
 8006e7c:	b508      	push	{r3, lr}
 8006e7e:	2006      	movs	r0, #6
 8006e80:	f000 f82c 	bl	8006edc <raise>
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fa fc96 	bl	80017b6 <_exit>

08006e8a <_raise_r>:
 8006e8a:	291f      	cmp	r1, #31
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4605      	mov	r5, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	d904      	bls.n	8006e9e <_raise_r+0x14>
 8006e94:	2316      	movs	r3, #22
 8006e96:	6003      	str	r3, [r0, #0]
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
 8006e9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ea0:	b112      	cbz	r2, 8006ea8 <_raise_r+0x1e>
 8006ea2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ea6:	b94b      	cbnz	r3, 8006ebc <_raise_r+0x32>
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 f831 	bl	8006f10 <_getpid_r>
 8006eae:	4622      	mov	r2, r4
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb8:	f000 b818 	b.w	8006eec <_kill_r>
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d00a      	beq.n	8006ed6 <_raise_r+0x4c>
 8006ec0:	1c59      	adds	r1, r3, #1
 8006ec2:	d103      	bne.n	8006ecc <_raise_r+0x42>
 8006ec4:	2316      	movs	r3, #22
 8006ec6:	6003      	str	r3, [r0, #0]
 8006ec8:	2001      	movs	r0, #1
 8006eca:	e7e7      	b.n	8006e9c <_raise_r+0x12>
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4798      	blx	r3
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e7e0      	b.n	8006e9c <_raise_r+0x12>
	...

08006edc <raise>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	@ (8006ee8 <raise+0xc>)
 8006ede:	4601      	mov	r1, r0
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	f7ff bfd2 	b.w	8006e8a <_raise_r>
 8006ee6:	bf00      	nop
 8006ee8:	20000018 	.word	0x20000018

08006eec <_kill_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	@ (8006f0c <_kill_r+0x20>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	602b      	str	r3, [r5, #0]
 8006efa:	f7fa fc4c 	bl	8001796 <_kill>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	d102      	bne.n	8006f08 <_kill_r+0x1c>
 8006f02:	682b      	ldr	r3, [r5, #0]
 8006f04:	b103      	cbz	r3, 8006f08 <_kill_r+0x1c>
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	bd38      	pop	{r3, r4, r5, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200003dc 	.word	0x200003dc

08006f10 <_getpid_r>:
 8006f10:	f7fa bc39 	b.w	8001786 <_getpid>

08006f14 <atan2>:
 8006f14:	f000 b904 	b.w	8007120 <__ieee754_atan2>

08006f18 <sqrt>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	ed2d 8b02 	vpush	{d8}
 8006f1e:	ec55 4b10 	vmov	r4, r5, d0
 8006f22:	f000 f825 	bl	8006f70 <__ieee754_sqrt>
 8006f26:	4622      	mov	r2, r4
 8006f28:	462b      	mov	r3, r5
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	eeb0 8a40 	vmov.f32	s16, s0
 8006f32:	eef0 8a60 	vmov.f32	s17, s1
 8006f36:	f7f9 fe19 	bl	8000b6c <__aeabi_dcmpun>
 8006f3a:	b990      	cbnz	r0, 8006f62 <sqrt+0x4a>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4620      	mov	r0, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 fdea 	bl	8000b1c <__aeabi_dcmplt>
 8006f48:	b158      	cbz	r0, 8006f62 <sqrt+0x4a>
 8006f4a:	f7fe f9a1 	bl	8005290 <__errno>
 8006f4e:	2321      	movs	r3, #33	@ 0x21
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	4610      	mov	r0, r2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f7f9 fc97 	bl	800088c <__aeabi_ddiv>
 8006f5e:	ec41 0b18 	vmov	d8, r0, r1
 8006f62:	eeb0 0a48 	vmov.f32	s0, s16
 8006f66:	eef0 0a68 	vmov.f32	s1, s17
 8006f6a:	ecbd 8b02 	vpop	{d8}
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}

08006f70 <__ieee754_sqrt>:
 8006f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	4a66      	ldr	r2, [pc, #408]	@ (8007110 <__ieee754_sqrt+0x1a0>)
 8006f76:	ec55 4b10 	vmov	r4, r5, d0
 8006f7a:	43aa      	bics	r2, r5
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	4621      	mov	r1, r4
 8006f80:	d110      	bne.n	8006fa4 <__ieee754_sqrt+0x34>
 8006f82:	4622      	mov	r2, r4
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 f99a 	bl	80002cc <__adddf3>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	ec45 4b10 	vmov	d0, r4, r5
 8006fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	dc0e      	bgt.n	8006fc6 <__ieee754_sqrt+0x56>
 8006fa8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006fac:	4322      	orrs	r2, r4
 8006fae:	d0f5      	beq.n	8006f9c <__ieee754_sqrt+0x2c>
 8006fb0:	b19d      	cbz	r5, 8006fda <__ieee754_sqrt+0x6a>
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 f986 	bl	80002c8 <__aeabi_dsub>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	f7f9 fc64 	bl	800088c <__aeabi_ddiv>
 8006fc4:	e7e8      	b.n	8006f98 <__ieee754_sqrt+0x28>
 8006fc6:	152a      	asrs	r2, r5, #20
 8006fc8:	d115      	bne.n	8006ff6 <__ieee754_sqrt+0x86>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e009      	b.n	8006fe2 <__ieee754_sqrt+0x72>
 8006fce:	0acb      	lsrs	r3, r1, #11
 8006fd0:	3a15      	subs	r2, #21
 8006fd2:	0549      	lsls	r1, r1, #21
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0fa      	beq.n	8006fce <__ieee754_sqrt+0x5e>
 8006fd8:	e7f7      	b.n	8006fca <__ieee754_sqrt+0x5a>
 8006fda:	462a      	mov	r2, r5
 8006fdc:	e7fa      	b.n	8006fd4 <__ieee754_sqrt+0x64>
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	02dc      	lsls	r4, r3, #11
 8006fe4:	d5fb      	bpl.n	8006fde <__ieee754_sqrt+0x6e>
 8006fe6:	1e44      	subs	r4, r0, #1
 8006fe8:	1b12      	subs	r2, r2, r4
 8006fea:	f1c0 0420 	rsb	r4, r0, #32
 8006fee:	fa21 f404 	lsr.w	r4, r1, r4
 8006ff2:	4323      	orrs	r3, r4
 8006ff4:	4081      	lsls	r1, r0
 8006ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ffa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007002:	07d2      	lsls	r2, r2, #31
 8007004:	bf5c      	itt	pl
 8007006:	005b      	lslpl	r3, r3, #1
 8007008:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800700c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007010:	bf58      	it	pl
 8007012:	0049      	lslpl	r1, r1, #1
 8007014:	2600      	movs	r6, #0
 8007016:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800701a:	107f      	asrs	r7, r7, #1
 800701c:	0049      	lsls	r1, r1, #1
 800701e:	2016      	movs	r0, #22
 8007020:	4632      	mov	r2, r6
 8007022:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007026:	1915      	adds	r5, r2, r4
 8007028:	429d      	cmp	r5, r3
 800702a:	bfde      	ittt	le
 800702c:	192a      	addle	r2, r5, r4
 800702e:	1b5b      	suble	r3, r3, r5
 8007030:	1936      	addle	r6, r6, r4
 8007032:	0fcd      	lsrs	r5, r1, #31
 8007034:	3801      	subs	r0, #1
 8007036:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800703a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800703e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007042:	d1f0      	bne.n	8007026 <__ieee754_sqrt+0xb6>
 8007044:	4605      	mov	r5, r0
 8007046:	2420      	movs	r4, #32
 8007048:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800704c:	4293      	cmp	r3, r2
 800704e:	eb0c 0e00 	add.w	lr, ip, r0
 8007052:	dc02      	bgt.n	800705a <__ieee754_sqrt+0xea>
 8007054:	d113      	bne.n	800707e <__ieee754_sqrt+0x10e>
 8007056:	458e      	cmp	lr, r1
 8007058:	d811      	bhi.n	800707e <__ieee754_sqrt+0x10e>
 800705a:	f1be 0f00 	cmp.w	lr, #0
 800705e:	eb0e 000c 	add.w	r0, lr, ip
 8007062:	da3f      	bge.n	80070e4 <__ieee754_sqrt+0x174>
 8007064:	2800      	cmp	r0, #0
 8007066:	db3d      	blt.n	80070e4 <__ieee754_sqrt+0x174>
 8007068:	f102 0801 	add.w	r8, r2, #1
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	458e      	cmp	lr, r1
 8007070:	bf88      	it	hi
 8007072:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007076:	eba1 010e 	sub.w	r1, r1, lr
 800707a:	4465      	add	r5, ip
 800707c:	4642      	mov	r2, r8
 800707e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007082:	3c01      	subs	r4, #1
 8007084:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007088:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800708c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007090:	d1dc      	bne.n	800704c <__ieee754_sqrt+0xdc>
 8007092:	4319      	orrs	r1, r3
 8007094:	d01b      	beq.n	80070ce <__ieee754_sqrt+0x15e>
 8007096:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007114 <__ieee754_sqrt+0x1a4>
 800709a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007118 <__ieee754_sqrt+0x1a8>
 800709e:	e9da 0100 	ldrd	r0, r1, [sl]
 80070a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80070a6:	f7f9 f90f 	bl	80002c8 <__aeabi_dsub>
 80070aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4640      	mov	r0, r8
 80070b4:	4649      	mov	r1, r9
 80070b6:	f7f9 fd3b 	bl	8000b30 <__aeabi_dcmple>
 80070ba:	b140      	cbz	r0, 80070ce <__ieee754_sqrt+0x15e>
 80070bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80070c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80070c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80070c8:	d10e      	bne.n	80070e8 <__ieee754_sqrt+0x178>
 80070ca:	3601      	adds	r6, #1
 80070cc:	4625      	mov	r5, r4
 80070ce:	1073      	asrs	r3, r6, #1
 80070d0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80070d4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80070d8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80070dc:	086b      	lsrs	r3, r5, #1
 80070de:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80070e2:	e759      	b.n	8006f98 <__ieee754_sqrt+0x28>
 80070e4:	4690      	mov	r8, r2
 80070e6:	e7c1      	b.n	800706c <__ieee754_sqrt+0xfc>
 80070e8:	f7f9 f8f0 	bl	80002cc <__adddf3>
 80070ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4640      	mov	r0, r8
 80070f6:	4649      	mov	r1, r9
 80070f8:	f7f9 fd10 	bl	8000b1c <__aeabi_dcmplt>
 80070fc:	b120      	cbz	r0, 8007108 <__ieee754_sqrt+0x198>
 80070fe:	1cab      	adds	r3, r5, #2
 8007100:	bf08      	it	eq
 8007102:	3601      	addeq	r6, #1
 8007104:	3502      	adds	r5, #2
 8007106:	e7e2      	b.n	80070ce <__ieee754_sqrt+0x15e>
 8007108:	1c6b      	adds	r3, r5, #1
 800710a:	f023 0501 	bic.w	r5, r3, #1
 800710e:	e7de      	b.n	80070ce <__ieee754_sqrt+0x15e>
 8007110:	7ff00000 	.word	0x7ff00000
 8007114:	08007bd8 	.word	0x08007bd8
 8007118:	08007bd0 	.word	0x08007bd0
 800711c:	00000000 	.word	0x00000000

08007120 <__ieee754_atan2>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	ec57 6b11 	vmov	r6, r7, d1
 8007128:	4273      	negs	r3, r6
 800712a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80072a8 <__ieee754_atan2+0x188>
 800712e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007132:	4333      	orrs	r3, r6
 8007134:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007138:	4543      	cmp	r3, r8
 800713a:	ec51 0b10 	vmov	r0, r1, d0
 800713e:	4635      	mov	r5, r6
 8007140:	d809      	bhi.n	8007156 <__ieee754_atan2+0x36>
 8007142:	4244      	negs	r4, r0
 8007144:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007148:	4304      	orrs	r4, r0
 800714a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800714e:	4544      	cmp	r4, r8
 8007150:	468e      	mov	lr, r1
 8007152:	4681      	mov	r9, r0
 8007154:	d907      	bls.n	8007166 <__ieee754_atan2+0x46>
 8007156:	4632      	mov	r2, r6
 8007158:	463b      	mov	r3, r7
 800715a:	f7f9 f8b7 	bl	80002cc <__adddf3>
 800715e:	ec41 0b10 	vmov	d0, r0, r1
 8007162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007166:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800716a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800716e:	4334      	orrs	r4, r6
 8007170:	d103      	bne.n	800717a <__ieee754_atan2+0x5a>
 8007172:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007176:	f000 b89b 	b.w	80072b0 <atan>
 800717a:	17bc      	asrs	r4, r7, #30
 800717c:	f004 0402 	and.w	r4, r4, #2
 8007180:	ea53 0909 	orrs.w	r9, r3, r9
 8007184:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007188:	d107      	bne.n	800719a <__ieee754_atan2+0x7a>
 800718a:	2c02      	cmp	r4, #2
 800718c:	d05f      	beq.n	800724e <__ieee754_atan2+0x12e>
 800718e:	2c03      	cmp	r4, #3
 8007190:	d1e5      	bne.n	800715e <__ieee754_atan2+0x3e>
 8007192:	a143      	add	r1, pc, #268	@ (adr r1, 80072a0 <__ieee754_atan2+0x180>)
 8007194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007198:	e7e1      	b.n	800715e <__ieee754_atan2+0x3e>
 800719a:	4315      	orrs	r5, r2
 800719c:	d106      	bne.n	80071ac <__ieee754_atan2+0x8c>
 800719e:	f1be 0f00 	cmp.w	lr, #0
 80071a2:	db5f      	blt.n	8007264 <__ieee754_atan2+0x144>
 80071a4:	a136      	add	r1, pc, #216	@ (adr r1, 8007280 <__ieee754_atan2+0x160>)
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	e7d8      	b.n	800715e <__ieee754_atan2+0x3e>
 80071ac:	4542      	cmp	r2, r8
 80071ae:	d10f      	bne.n	80071d0 <__ieee754_atan2+0xb0>
 80071b0:	4293      	cmp	r3, r2
 80071b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80071b6:	d107      	bne.n	80071c8 <__ieee754_atan2+0xa8>
 80071b8:	2c02      	cmp	r4, #2
 80071ba:	d84c      	bhi.n	8007256 <__ieee754_atan2+0x136>
 80071bc:	4b36      	ldr	r3, [pc, #216]	@ (8007298 <__ieee754_atan2+0x178>)
 80071be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071c6:	e7ca      	b.n	800715e <__ieee754_atan2+0x3e>
 80071c8:	2c02      	cmp	r4, #2
 80071ca:	d848      	bhi.n	800725e <__ieee754_atan2+0x13e>
 80071cc:	4b33      	ldr	r3, [pc, #204]	@ (800729c <__ieee754_atan2+0x17c>)
 80071ce:	e7f6      	b.n	80071be <__ieee754_atan2+0x9e>
 80071d0:	4543      	cmp	r3, r8
 80071d2:	d0e4      	beq.n	800719e <__ieee754_atan2+0x7e>
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80071da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071de:	da1e      	bge.n	800721e <__ieee754_atan2+0xfe>
 80071e0:	2f00      	cmp	r7, #0
 80071e2:	da01      	bge.n	80071e8 <__ieee754_atan2+0xc8>
 80071e4:	323c      	adds	r2, #60	@ 0x3c
 80071e6:	db1e      	blt.n	8007226 <__ieee754_atan2+0x106>
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	f7f9 fb4e 	bl	800088c <__aeabi_ddiv>
 80071f0:	ec41 0b10 	vmov	d0, r0, r1
 80071f4:	f000 f9f4 	bl	80075e0 <fabs>
 80071f8:	f000 f85a 	bl	80072b0 <atan>
 80071fc:	ec51 0b10 	vmov	r0, r1, d0
 8007200:	2c01      	cmp	r4, #1
 8007202:	d013      	beq.n	800722c <__ieee754_atan2+0x10c>
 8007204:	2c02      	cmp	r4, #2
 8007206:	d015      	beq.n	8007234 <__ieee754_atan2+0x114>
 8007208:	2c00      	cmp	r4, #0
 800720a:	d0a8      	beq.n	800715e <__ieee754_atan2+0x3e>
 800720c:	a318      	add	r3, pc, #96	@ (adr r3, 8007270 <__ieee754_atan2+0x150>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f859 	bl	80002c8 <__aeabi_dsub>
 8007216:	a318      	add	r3, pc, #96	@ (adr r3, 8007278 <__ieee754_atan2+0x158>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	e014      	b.n	8007248 <__ieee754_atan2+0x128>
 800721e:	a118      	add	r1, pc, #96	@ (adr r1, 8007280 <__ieee754_atan2+0x160>)
 8007220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007224:	e7ec      	b.n	8007200 <__ieee754_atan2+0xe0>
 8007226:	2000      	movs	r0, #0
 8007228:	2100      	movs	r1, #0
 800722a:	e7e9      	b.n	8007200 <__ieee754_atan2+0xe0>
 800722c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007230:	4619      	mov	r1, r3
 8007232:	e794      	b.n	800715e <__ieee754_atan2+0x3e>
 8007234:	a30e      	add	r3, pc, #56	@ (adr r3, 8007270 <__ieee754_atan2+0x150>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f845 	bl	80002c8 <__aeabi_dsub>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	a10d      	add	r1, pc, #52	@ (adr r1, 8007278 <__ieee754_atan2+0x158>)
 8007244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007248:	f7f9 f83e 	bl	80002c8 <__aeabi_dsub>
 800724c:	e787      	b.n	800715e <__ieee754_atan2+0x3e>
 800724e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007278 <__ieee754_atan2+0x158>)
 8007250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007254:	e783      	b.n	800715e <__ieee754_atan2+0x3e>
 8007256:	a10c      	add	r1, pc, #48	@ (adr r1, 8007288 <__ieee754_atan2+0x168>)
 8007258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725c:	e77f      	b.n	800715e <__ieee754_atan2+0x3e>
 800725e:	2000      	movs	r0, #0
 8007260:	2100      	movs	r1, #0
 8007262:	e77c      	b.n	800715e <__ieee754_atan2+0x3e>
 8007264:	a10a      	add	r1, pc, #40	@ (adr r1, 8007290 <__ieee754_atan2+0x170>)
 8007266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800726a:	e778      	b.n	800715e <__ieee754_atan2+0x3e>
 800726c:	f3af 8000 	nop.w
 8007270:	33145c07 	.word	0x33145c07
 8007274:	3ca1a626 	.word	0x3ca1a626
 8007278:	54442d18 	.word	0x54442d18
 800727c:	400921fb 	.word	0x400921fb
 8007280:	54442d18 	.word	0x54442d18
 8007284:	3ff921fb 	.word	0x3ff921fb
 8007288:	54442d18 	.word	0x54442d18
 800728c:	3fe921fb 	.word	0x3fe921fb
 8007290:	54442d18 	.word	0x54442d18
 8007294:	bff921fb 	.word	0xbff921fb
 8007298:	08007bf8 	.word	0x08007bf8
 800729c:	08007be0 	.word	0x08007be0
 80072a0:	54442d18 	.word	0x54442d18
 80072a4:	c00921fb 	.word	0xc00921fb
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	00000000 	.word	0x00000000

080072b0 <atan>:
 80072b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	ec55 4b10 	vmov	r4, r5, d0
 80072b8:	4bbf      	ldr	r3, [pc, #764]	@ (80075b8 <atan+0x308>)
 80072ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80072be:	429e      	cmp	r6, r3
 80072c0:	46ab      	mov	fp, r5
 80072c2:	d918      	bls.n	80072f6 <atan+0x46>
 80072c4:	4bbd      	ldr	r3, [pc, #756]	@ (80075bc <atan+0x30c>)
 80072c6:	429e      	cmp	r6, r3
 80072c8:	d801      	bhi.n	80072ce <atan+0x1e>
 80072ca:	d109      	bne.n	80072e0 <atan+0x30>
 80072cc:	b144      	cbz	r4, 80072e0 <atan+0x30>
 80072ce:	4622      	mov	r2, r4
 80072d0:	462b      	mov	r3, r5
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f7f8 fff9 	bl	80002cc <__adddf3>
 80072da:	4604      	mov	r4, r0
 80072dc:	460d      	mov	r5, r1
 80072de:	e006      	b.n	80072ee <atan+0x3e>
 80072e0:	f1bb 0f00 	cmp.w	fp, #0
 80072e4:	f340 812b 	ble.w	800753e <atan+0x28e>
 80072e8:	a597      	add	r5, pc, #604	@ (adr r5, 8007548 <atan+0x298>)
 80072ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072ee:	ec45 4b10 	vmov	d0, r4, r5
 80072f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	4bb2      	ldr	r3, [pc, #712]	@ (80075c0 <atan+0x310>)
 80072f8:	429e      	cmp	r6, r3
 80072fa:	d813      	bhi.n	8007324 <atan+0x74>
 80072fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007300:	429e      	cmp	r6, r3
 8007302:	d80c      	bhi.n	800731e <atan+0x6e>
 8007304:	a392      	add	r3, pc, #584	@ (adr r3, 8007550 <atan+0x2a0>)
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f8 ffdd 	bl	80002cc <__adddf3>
 8007312:	4bac      	ldr	r3, [pc, #688]	@ (80075c4 <atan+0x314>)
 8007314:	2200      	movs	r2, #0
 8007316:	f7f9 fc1f 	bl	8000b58 <__aeabi_dcmpgt>
 800731a:	2800      	cmp	r0, #0
 800731c:	d1e7      	bne.n	80072ee <atan+0x3e>
 800731e:	f04f 3aff 	mov.w	sl, #4294967295
 8007322:	e029      	b.n	8007378 <atan+0xc8>
 8007324:	f000 f95c 	bl	80075e0 <fabs>
 8007328:	4ba7      	ldr	r3, [pc, #668]	@ (80075c8 <atan+0x318>)
 800732a:	429e      	cmp	r6, r3
 800732c:	ec55 4b10 	vmov	r4, r5, d0
 8007330:	f200 80bc 	bhi.w	80074ac <atan+0x1fc>
 8007334:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007338:	429e      	cmp	r6, r3
 800733a:	f200 809e 	bhi.w	800747a <atan+0x1ca>
 800733e:	4622      	mov	r2, r4
 8007340:	462b      	mov	r3, r5
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f8 ffc1 	bl	80002cc <__adddf3>
 800734a:	4b9e      	ldr	r3, [pc, #632]	@ (80075c4 <atan+0x314>)
 800734c:	2200      	movs	r2, #0
 800734e:	f7f8 ffbb 	bl	80002c8 <__aeabi_dsub>
 8007352:	2200      	movs	r2, #0
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f8 ffb4 	bl	80002cc <__adddf3>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 fa8e 	bl	800088c <__aeabi_ddiv>
 8007370:	f04f 0a00 	mov.w	sl, #0
 8007374:	4604      	mov	r4, r0
 8007376:	460d      	mov	r5, r1
 8007378:	4622      	mov	r2, r4
 800737a:	462b      	mov	r3, r5
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f9 f95a 	bl	8000638 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4680      	mov	r8, r0
 800738a:	4689      	mov	r9, r1
 800738c:	f7f9 f954 	bl	8000638 <__aeabi_dmul>
 8007390:	a371      	add	r3, pc, #452	@ (adr r3, 8007558 <atan+0x2a8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	4606      	mov	r6, r0
 8007398:	460f      	mov	r7, r1
 800739a:	f7f9 f94d 	bl	8000638 <__aeabi_dmul>
 800739e:	a370      	add	r3, pc, #448	@ (adr r3, 8007560 <atan+0x2b0>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff92 	bl	80002cc <__adddf3>
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	f7f9 f944 	bl	8000638 <__aeabi_dmul>
 80073b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8007568 <atan+0x2b8>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f8 ff89 	bl	80002cc <__adddf3>
 80073ba:	4632      	mov	r2, r6
 80073bc:	463b      	mov	r3, r7
 80073be:	f7f9 f93b 	bl	8000638 <__aeabi_dmul>
 80073c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007570 <atan+0x2c0>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 ff80 	bl	80002cc <__adddf3>
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	f7f9 f932 	bl	8000638 <__aeabi_dmul>
 80073d4:	a368      	add	r3, pc, #416	@ (adr r3, 8007578 <atan+0x2c8>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f8 ff77 	bl	80002cc <__adddf3>
 80073de:	4632      	mov	r2, r6
 80073e0:	463b      	mov	r3, r7
 80073e2:	f7f9 f929 	bl	8000638 <__aeabi_dmul>
 80073e6:	a366      	add	r3, pc, #408	@ (adr r3, 8007580 <atan+0x2d0>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f7f8 ff6e 	bl	80002cc <__adddf3>
 80073f0:	4642      	mov	r2, r8
 80073f2:	464b      	mov	r3, r9
 80073f4:	f7f9 f920 	bl	8000638 <__aeabi_dmul>
 80073f8:	a363      	add	r3, pc, #396	@ (adr r3, 8007588 <atan+0x2d8>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	4680      	mov	r8, r0
 8007400:	4689      	mov	r9, r1
 8007402:	4630      	mov	r0, r6
 8007404:	4639      	mov	r1, r7
 8007406:	f7f9 f917 	bl	8000638 <__aeabi_dmul>
 800740a:	a361      	add	r3, pc, #388	@ (adr r3, 8007590 <atan+0x2e0>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f7f8 ff5a 	bl	80002c8 <__aeabi_dsub>
 8007414:	4632      	mov	r2, r6
 8007416:	463b      	mov	r3, r7
 8007418:	f7f9 f90e 	bl	8000638 <__aeabi_dmul>
 800741c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007598 <atan+0x2e8>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f8 ff51 	bl	80002c8 <__aeabi_dsub>
 8007426:	4632      	mov	r2, r6
 8007428:	463b      	mov	r3, r7
 800742a:	f7f9 f905 	bl	8000638 <__aeabi_dmul>
 800742e:	a35c      	add	r3, pc, #368	@ (adr r3, 80075a0 <atan+0x2f0>)
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	f7f8 ff48 	bl	80002c8 <__aeabi_dsub>
 8007438:	4632      	mov	r2, r6
 800743a:	463b      	mov	r3, r7
 800743c:	f7f9 f8fc 	bl	8000638 <__aeabi_dmul>
 8007440:	a359      	add	r3, pc, #356	@ (adr r3, 80075a8 <atan+0x2f8>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f7f8 ff3f 	bl	80002c8 <__aeabi_dsub>
 800744a:	4632      	mov	r2, r6
 800744c:	463b      	mov	r3, r7
 800744e:	f7f9 f8f3 	bl	8000638 <__aeabi_dmul>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f8 ff37 	bl	80002cc <__adddf3>
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	f7f9 f8e9 	bl	8000638 <__aeabi_dmul>
 8007466:	f1ba 3fff 	cmp.w	sl, #4294967295
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	d148      	bne.n	8007502 <atan+0x252>
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	f7f8 ff28 	bl	80002c8 <__aeabi_dsub>
 8007478:	e72f      	b.n	80072da <atan+0x2a>
 800747a:	4b52      	ldr	r3, [pc, #328]	@ (80075c4 <atan+0x314>)
 800747c:	2200      	movs	r2, #0
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f8 ff21 	bl	80002c8 <__aeabi_dsub>
 8007486:	4b4f      	ldr	r3, [pc, #316]	@ (80075c4 <atan+0x314>)
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	2200      	movs	r2, #0
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	f7f8 ff1b 	bl	80002cc <__adddf3>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f9 f9f5 	bl	800088c <__aeabi_ddiv>
 80074a2:	f04f 0a01 	mov.w	sl, #1
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	e765      	b.n	8007378 <atan+0xc8>
 80074ac:	4b47      	ldr	r3, [pc, #284]	@ (80075cc <atan+0x31c>)
 80074ae:	429e      	cmp	r6, r3
 80074b0:	d21c      	bcs.n	80074ec <atan+0x23c>
 80074b2:	4b47      	ldr	r3, [pc, #284]	@ (80075d0 <atan+0x320>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f8 ff05 	bl	80002c8 <__aeabi_dsub>
 80074be:	4b44      	ldr	r3, [pc, #272]	@ (80075d0 <atan+0x320>)
 80074c0:	4606      	mov	r6, r0
 80074c2:	460f      	mov	r7, r1
 80074c4:	2200      	movs	r2, #0
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 f8b5 	bl	8000638 <__aeabi_dmul>
 80074ce:	4b3d      	ldr	r3, [pc, #244]	@ (80075c4 <atan+0x314>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	f7f8 fefb 	bl	80002cc <__adddf3>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f9 f9d5 	bl	800088c <__aeabi_ddiv>
 80074e2:	f04f 0a02 	mov.w	sl, #2
 80074e6:	4604      	mov	r4, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	e745      	b.n	8007378 <atan+0xc8>
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	4938      	ldr	r1, [pc, #224]	@ (80075d4 <atan+0x324>)
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7f9 f9ca 	bl	800088c <__aeabi_ddiv>
 80074f8:	f04f 0a03 	mov.w	sl, #3
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	e73a      	b.n	8007378 <atan+0xc8>
 8007502:	4b35      	ldr	r3, [pc, #212]	@ (80075d8 <atan+0x328>)
 8007504:	4e35      	ldr	r6, [pc, #212]	@ (80075dc <atan+0x32c>)
 8007506:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f8 fedb 	bl	80002c8 <__aeabi_dsub>
 8007512:	4622      	mov	r2, r4
 8007514:	462b      	mov	r3, r5
 8007516:	f7f8 fed7 	bl	80002c8 <__aeabi_dsub>
 800751a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007526:	f7f8 fecf 	bl	80002c8 <__aeabi_dsub>
 800752a:	f1bb 0f00 	cmp.w	fp, #0
 800752e:	4604      	mov	r4, r0
 8007530:	460d      	mov	r5, r1
 8007532:	f6bf aedc 	bge.w	80072ee <atan+0x3e>
 8007536:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800753a:	461d      	mov	r5, r3
 800753c:	e6d7      	b.n	80072ee <atan+0x3e>
 800753e:	a51c      	add	r5, pc, #112	@ (adr r5, 80075b0 <atan+0x300>)
 8007540:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007544:	e6d3      	b.n	80072ee <atan+0x3e>
 8007546:	bf00      	nop
 8007548:	54442d18 	.word	0x54442d18
 800754c:	3ff921fb 	.word	0x3ff921fb
 8007550:	8800759c 	.word	0x8800759c
 8007554:	7e37e43c 	.word	0x7e37e43c
 8007558:	e322da11 	.word	0xe322da11
 800755c:	3f90ad3a 	.word	0x3f90ad3a
 8007560:	24760deb 	.word	0x24760deb
 8007564:	3fa97b4b 	.word	0x3fa97b4b
 8007568:	a0d03d51 	.word	0xa0d03d51
 800756c:	3fb10d66 	.word	0x3fb10d66
 8007570:	c54c206e 	.word	0xc54c206e
 8007574:	3fb745cd 	.word	0x3fb745cd
 8007578:	920083ff 	.word	0x920083ff
 800757c:	3fc24924 	.word	0x3fc24924
 8007580:	5555550d 	.word	0x5555550d
 8007584:	3fd55555 	.word	0x3fd55555
 8007588:	2c6a6c2f 	.word	0x2c6a6c2f
 800758c:	bfa2b444 	.word	0xbfa2b444
 8007590:	52defd9a 	.word	0x52defd9a
 8007594:	3fadde2d 	.word	0x3fadde2d
 8007598:	af749a6d 	.word	0xaf749a6d
 800759c:	3fb3b0f2 	.word	0x3fb3b0f2
 80075a0:	fe231671 	.word	0xfe231671
 80075a4:	3fbc71c6 	.word	0x3fbc71c6
 80075a8:	9998ebc4 	.word	0x9998ebc4
 80075ac:	3fc99999 	.word	0x3fc99999
 80075b0:	54442d18 	.word	0x54442d18
 80075b4:	bff921fb 	.word	0xbff921fb
 80075b8:	440fffff 	.word	0x440fffff
 80075bc:	7ff00000 	.word	0x7ff00000
 80075c0:	3fdbffff 	.word	0x3fdbffff
 80075c4:	3ff00000 	.word	0x3ff00000
 80075c8:	3ff2ffff 	.word	0x3ff2ffff
 80075cc:	40038000 	.word	0x40038000
 80075d0:	3ff80000 	.word	0x3ff80000
 80075d4:	bff00000 	.word	0xbff00000
 80075d8:	08007c10 	.word	0x08007c10
 80075dc:	08007c30 	.word	0x08007c30

080075e0 <fabs>:
 80075e0:	ec51 0b10 	vmov	r0, r1, d0
 80075e4:	4602      	mov	r2, r0
 80075e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80075ea:	ec43 2b10 	vmov	d0, r2, r3
 80075ee:	4770      	bx	lr

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
