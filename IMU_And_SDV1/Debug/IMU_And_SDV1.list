
IMU_And_SDV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005698  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08005838  08005838  00006838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b78  08005b78  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b80  08005b80  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b84  08005b84  00006b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08005bf0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005bf0  00007280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab74  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a75  00000000  00000000  00011c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00013688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bb  00000000  00000000  00014078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d23  00000000  00000000  00014833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c24d  00000000  00000000  0002b556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a82f  00000000  00000000  000377a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e0  00000000  00000000  000c2018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c53f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005820 	.word	0x08005820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005820 	.word	0x08005820

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 if (ch == '\n') {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d102      	bne.n	8000f38 <__io_putchar+0x14>
   __io_putchar('\r');
 8000f32:	200d      	movs	r0, #13
 8000f34:	f7ff fff6 	bl	8000f24 <__io_putchar>
 }
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f38:	1d39      	adds	r1, r7, #4
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <__io_putchar+0x2c>)
 8000f42:	f002 fdb9 	bl	8003ab8 <HAL_UART_Transmit>
 return 1;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000d8 	.word	0x200000d8

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fcb4 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f810 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f8c4 	bl	80010ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f64:	f000 f86a 	bl	800103c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 f896 	bl	8001098 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_init();
 8000f6c:	f000 f8ec 	bl	8001148 <mpu6050_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mpu6050_complementary_filter();
 8000f70:	f000 f992 	bl	8001298 <mpu6050_complementary_filter>
	  HAL_Delay(10);
 8000f74:	200a      	movs	r0, #10
 8000f76:	f000 fd17 	bl	80019a8 <HAL_Delay>
	  mpu6050_complementary_filter();
 8000f7a:	bf00      	nop
 8000f7c:	e7f8      	b.n	8000f70 <main+0x1c>
	...

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	@ 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	@ 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fb58 	bl	8004644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <SystemClock_Config+0xb4>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <SystemClock_Config+0xb4>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <SystemClock_Config+0xb4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <SystemClock_Config+0xb8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001038 <SystemClock_Config+0xb8>)
 8000fca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <SystemClock_Config+0xb8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f8b9 	bl	8003168 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ffc:	f000 f89e 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fb1c 	bl	8003658 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001026:	f000 f889 	bl	800113c <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	@ 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_I2C1_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	@ (8001090 <MX_I2C1_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_I2C1_Init+0x50>)
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <MX_I2C1_Init+0x58>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_I2C1_Init+0x50>)
 800105a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_I2C1_Init+0x50>)
 800107a:	f000 ff23 	bl	8001ec4 <HAL_I2C_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001084:	f000 f85a 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000084 	.word	0x20000084
 8001090:	40005400 	.word	0x40005400
 8001094:	000186a0 	.word	0x000186a0

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f002 fca2 	bl	8003a18 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f000 f82f 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000d8 	.word	0x200000d8
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_GPIO_Init+0x4c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <MX_GPIO_Init+0x4c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <MX_GPIO_Init+0x4c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_GPIO_Init+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <MX_GPIO_Init+0x4c>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_GPIO_Init+0x4c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <mpu6050_init>:

uint32_t last_time = 0;

extern I2C_HandleTypeDef hi2c1;

void mpu6050_init(){
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
	  printf(".................................................\n");
 800114e:	4844      	ldr	r0, [pc, #272]	@ (8001260 <mpu6050_init+0x118>)
 8001150:	f003 f998 	bl	8004484 <puts>
	printf("Checking connection...\n");
 8001154:	4843      	ldr	r0, [pc, #268]	@ (8001264 <mpu6050_init+0x11c>)
 8001156:	f003 f995 	bl	8004484 <puts>
	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 100);
 800115a:	2364      	movs	r3, #100	@ 0x64
 800115c:	2201      	movs	r2, #1
 800115e:	21d0      	movs	r1, #208	@ 0xd0
 8001160:	4841      	ldr	r0, [pc, #260]	@ (8001268 <mpu6050_init+0x120>)
 8001162:	f001 fb1f 	bl	80027a4 <HAL_I2C_IsDeviceReady>
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK){
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <mpu6050_init+0x30>
		  printf("Device ready!\n");
 8001170:	483e      	ldr	r0, [pc, #248]	@ (800126c <mpu6050_init+0x124>)
 8001172:	f003 f987 	bl	8004484 <puts>
 8001176:	e008      	b.n	800118a <mpu6050_init+0x42>
	  }
	  else{
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001178:	483d      	ldr	r0, [pc, #244]	@ (8001270 <mpu6050_init+0x128>)
 800117a:	f003 f983 	bl	8004484 <puts>
		  printf("ERROR: Device not detected. Check connection.\n");
 800117e:	483d      	ldr	r0, [pc, #244]	@ (8001274 <mpu6050_init+0x12c>)
 8001180:	f003 f980 	bl	8004484 <puts>
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001184:	483a      	ldr	r0, [pc, #232]	@ (8001270 <mpu6050_init+0x128>)
 8001186:	f003 f97d 	bl	8004484 <puts>
	  }
	  uint8_t temp_data = 0b00001000; // set to
 800118a:	2308      	movs	r3, #8
 800118c:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_GYRO, 1, &temp_data, 1, 100);
 800118e:	2364      	movs	r3, #100	@ 0x64
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2301      	movs	r3, #1
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	1dbb      	adds	r3, r7, #6
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	221b      	movs	r2, #27
 800119e:	21d0      	movs	r1, #208	@ 0xd0
 80011a0:	4831      	ldr	r0, [pc, #196]	@ (8001268 <mpu6050_init+0x120>)
 80011a2:	f000 ffd3 	bl	800214c <HAL_I2C_Mem_Write>
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK){
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <mpu6050_init+0x70>
		  printf("Gyroscope configured!\n");
 80011b0:	4831      	ldr	r0, [pc, #196]	@ (8001278 <mpu6050_init+0x130>)
 80011b2:	f003 f967 	bl	8004484 <puts>
 80011b6:	e008      	b.n	80011ca <mpu6050_init+0x82>
	  }
	  else{
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 80011b8:	482d      	ldr	r0, [pc, #180]	@ (8001270 <mpu6050_init+0x128>)
 80011ba:	f003 f963 	bl	8004484 <puts>
		  printf("ERROR: Cannot configure gyroscope.\n");
 80011be:	482f      	ldr	r0, [pc, #188]	@ (800127c <mpu6050_init+0x134>)
 80011c0:	f003 f960 	bl	8004484 <puts>
		  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 80011c4:	482a      	ldr	r0, [pc, #168]	@ (8001270 <mpu6050_init+0x128>)
 80011c6:	f003 f95d 	bl	8004484 <puts>
	  }
	   temp_data = 0b00001000; // set to +- 4g
 80011ca:	2308      	movs	r3, #8
 80011cc:	71bb      	strb	r3, [r7, #6]
		  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_ACC, 1, &temp_data, 1, 100);
 80011ce:	2364      	movs	r3, #100	@ 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	221c      	movs	r2, #28
 80011de:	21d0      	movs	r1, #208	@ 0xd0
 80011e0:	4821      	ldr	r0, [pc, #132]	@ (8001268 <mpu6050_init+0x120>)
 80011e2:	f000 ffb3 	bl	800214c <HAL_I2C_Mem_Write>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
		  if (ret == HAL_OK){
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <mpu6050_init+0xb0>
			  printf("Accelerometer configured!\n");
 80011f0:	4823      	ldr	r0, [pc, #140]	@ (8001280 <mpu6050_init+0x138>)
 80011f2:	f003 f947 	bl	8004484 <puts>
 80011f6:	e008      	b.n	800120a <mpu6050_init+0xc2>
		  }
		  else{
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 80011f8:	481d      	ldr	r0, [pc, #116]	@ (8001270 <mpu6050_init+0x128>)
 80011fa:	f003 f943 	bl	8004484 <puts>
			  printf("ERROR: Cannot configure accelerometer.\n");
 80011fe:	4821      	ldr	r0, [pc, #132]	@ (8001284 <mpu6050_init+0x13c>)
 8001200:	f003 f940 	bl	8004484 <puts>
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001204:	481a      	ldr	r0, [pc, #104]	@ (8001270 <mpu6050_init+0x128>)
 8001206:	f003 f93d 	bl	8004484 <puts>
		  }

	  temp_data = 0b00001000; // set to +- 4g
 800120a:	2308      	movs	r3, #8
 800120c:	71bb      	strb	r3, [r7, #6]
		  ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MANAGEMENT, 1, &temp_data, 1, 100);
 800120e:	2364      	movs	r3, #100	@ 0x64
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	4811      	ldr	r0, [pc, #68]	@ (8001268 <mpu6050_init+0x120>)
 8001222:	f000 ff93 	bl	800214c <HAL_I2C_Mem_Write>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
		  if (ret == HAL_OK){
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d103      	bne.n	8001238 <mpu6050_init+0xf0>
			  printf("Power management successful,thermometer turned off, exit sleep mode!\n");
 8001230:	4815      	ldr	r0, [pc, #84]	@ (8001288 <mpu6050_init+0x140>)
 8001232:	f003 f927 	bl	8004484 <puts>
 8001236:	e008      	b.n	800124a <mpu6050_init+0x102>
		  }
		  else{
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001238:	480d      	ldr	r0, [pc, #52]	@ (8001270 <mpu6050_init+0x128>)
 800123a:	f003 f923 	bl	8004484 <puts>
			  printf("ERROR: Cannot configure power management.\n");
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <mpu6050_init+0x144>)
 8001240:	f003 f920 	bl	8004484 <puts>
			  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8001244:	480a      	ldr	r0, [pc, #40]	@ (8001270 <mpu6050_init+0x128>)
 8001246:	f003 f91d 	bl	8004484 <puts>
		  }
		  printf("Initialisation finished. \n");
 800124a:	4811      	ldr	r0, [pc, #68]	@ (8001290 <mpu6050_init+0x148>)
 800124c:	f003 f91a 	bl	8004484 <puts>
		  printf(".................................................\n");
 8001250:	4803      	ldr	r0, [pc, #12]	@ (8001260 <mpu6050_init+0x118>)
 8001252:	f003 f917 	bl	8004484 <puts>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08005838 	.word	0x08005838
 8001264:	0800586c 	.word	0x0800586c
 8001268:	20000084 	.word	0x20000084
 800126c:	08005884 	.word	0x08005884
 8001270:	08005894 	.word	0x08005894
 8001274:	080058c0 	.word	0x080058c0
 8001278:	080058f0 	.word	0x080058f0
 800127c:	08005908 	.word	0x08005908
 8001280:	0800592c 	.word	0x0800592c
 8001284:	08005948 	.word	0x08005948
 8001288:	08005970 	.word	0x08005970
 800128c:	080059b8 	.word	0x080059b8
 8001290:	080059e4 	.word	0x080059e4
 8001294:	00000000 	.word	0x00000000

08001298 <mpu6050_complementary_filter>:
    printf("Accel (g): X=%.2f Y=%.2f Z=%.2f\n", ax_g, ay_g, az_g);
    printf("Gyro  (°/s): X=%.2f Y=%.2f Z=%.2f\n", gx_dps, gy_dps, gz_dps);
    printf("Temp  (°C): %.2f\n", temp_c);
}

void mpu6050_complementary_filter() {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b094      	sub	sp, #80	@ 0x50
 800129c:	af04      	add	r7, sp, #16
    int16_t acc_x, acc_y, acc_z;
    int16_t gyro_x, gyro_y, gyro_z;

    uint8_t data[14];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, DATA_START_ADDR, 1, data, 14, 100);
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	230e      	movs	r3, #14
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	463b      	mov	r3, r7
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	223b      	movs	r2, #59	@ 0x3b
 80012ae:	21d0      	movs	r1, #208	@ 0xd0
 80012b0:	4897      	ldr	r0, [pc, #604]	@ (8001510 <mpu6050_complementary_filter+0x278>)
 80012b2:	f001 f845 	bl	8002340 <HAL_I2C_Mem_Read>

    acc_x = (int16_t)(data[0] << 8 | data[1]);
 80012b6:	783b      	ldrb	r3, [r7, #0]
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	787b      	ldrb	r3, [r7, #1]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    acc_y = (int16_t)(data[2] << 8 | data[3]);
 80012c6:	78bb      	ldrb	r3, [r7, #2]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    acc_z = (int16_t)(data[4] << 8 | data[5]);
 80012d6:	793b      	ldrb	r3, [r7, #4]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80012e6:	7a3b      	ldrb	r3, [r7, #8]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	7a7b      	ldrb	r3, [r7, #9]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	873b      	strh	r3, [r7, #56]	@ 0x38
    gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	86fb      	strh	r3, [r7, #54]	@ 0x36
    gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	b21b      	sxth	r3, r3
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	7b7b      	ldrb	r3, [r7, #13]
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	86bb      	strh	r3, [r7, #52]	@ 0x34

    // Convert to physical values (adjust if using different ranges)
    float ax = acc_x / 8192.0f;   // ±4g range (acc sensitivity = 8192 LSB/g)
 8001316:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001322:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8001514 <mpu6050_complementary_filter+0x27c>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float ay = acc_y / 8192.0f;
 800132e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001514 <mpu6050_complementary_filter+0x27c>
 800133e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001342:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float az = acc_z / 8192.0f;
 8001346:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001352:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001514 <mpu6050_complementary_filter+0x27c>
 8001356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float gx = gyro_x / 65.5f;    // ±500°/s range (gyro sensitivity = 65.5 LSB/°/s)
 800135e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136a:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001518 <mpu6050_complementary_filter+0x280>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = gyro_y / 65.5f;
 8001376:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001382:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001518 <mpu6050_complementary_filter+0x280>
 8001386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138a:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute delta time in seconds
    uint32_t now = HAL_GetTick();
 800138e:	f000 faff 	bl	8001990 <HAL_GetTick>
 8001392:	61f8      	str	r0, [r7, #28]
    float dt = (now - last_time) / 1000.0f;
 8001394:	4b61      	ldr	r3, [pc, #388]	@ (800151c <mpu6050_complementary_filter+0x284>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8001520 <mpu6050_complementary_filter+0x288>
 80013a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ac:	edc7 7a06 	vstr	s15, [r7, #24]
    last_time = now;
 80013b0:	4a5a      	ldr	r2, [pc, #360]	@ (800151c <mpu6050_complementary_filter+0x284>)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	6013      	str	r3, [r2, #0]

    // Compute angles from accelerometer
    float acc_roll = atan2(ay, az) * RAD_TO_DEG;
 80013b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_f2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
 80013c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	ec43 2b11 	vmov	d1, r2, r3
 80013ce:	ec45 4b10 	vmov	d0, r4, r5
 80013d2:	f003 feb9 	bl	8005148 <atan2>
 80013d6:	ec51 0b10 	vmov	r0, r1, d0
 80013da:	a34b      	add	r3, pc, #300	@ (adr r3, 8001508 <mpu6050_complementary_filter+0x270>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f90a 	bl	80005f8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fbb4 	bl	8000b58 <__aeabi_d2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	617b      	str	r3, [r7, #20]
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * RAD_TO_DEG;
 80013f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013f8:	eef1 7a67 	vneg.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	4604      	mov	r4, r0
 8001408:	460d      	mov	r5, r1
 800140a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800140e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001412:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001416:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f003 fe8d 	bl	800514c <sqrt>
 8001432:	eeb0 7a40 	vmov.f32	s14, s0
 8001436:	eef0 7a60 	vmov.f32	s15, s1
 800143a:	eeb0 1a47 	vmov.f32	s2, s14
 800143e:	eef0 1a67 	vmov.f32	s3, s15
 8001442:	ec45 4b10 	vmov	d0, r4, r5
 8001446:	f003 fe7f 	bl	8005148 <atan2>
 800144a:	ec51 0b10 	vmov	r0, r1, d0
 800144e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001508 <mpu6050_complementary_filter+0x270>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8d0 	bl	80005f8 <__aeabi_dmul>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fb7a 	bl	8000b58 <__aeabi_d2f>
 8001464:	4603      	mov	r3, r0
 8001466:	613b      	str	r3, [r7, #16]

    // Complementary filter
    roll = ALPHA * (roll + gx * dt) + (1 - ALPHA) * acc_roll;
 8001468:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <mpu6050_complementary_filter+0x28c>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001528 <mpu6050_complementary_filter+0x290>
 8001482:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800152c <mpu6050_complementary_filter+0x294>
 800148e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <mpu6050_complementary_filter+0x28c>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
    pitch = ALPHA * (pitch + gy * dt) + (1 - ALPHA) * acc_pitch;
 800149c:	ed97 7a08 	vldr	s14, [r7, #32]
 80014a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <mpu6050_complementary_filter+0x298>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001528 <mpu6050_complementary_filter+0x290>
 80014b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80014be:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800152c <mpu6050_complementary_filter+0x294>
 80014c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <mpu6050_complementary_filter+0x298>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]
    // TODO: zapisywać roll, pitch oraz czas od momentu zapisu
    printf("ROLL: %.2f\tPITCH: %.2f\n", roll, pitch);
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <mpu6050_complementary_filter+0x28c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	4604      	mov	r4, r0
 80014dc:	460d      	mov	r5, r1
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <mpu6050_complementary_filter+0x298>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f830 	bl	8000548 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	e9cd 2300 	strd	r2, r3, [sp]
 80014f0:	4622      	mov	r2, r4
 80014f2:	462b      	mov	r3, r5
 80014f4:	480f      	ldr	r0, [pc, #60]	@ (8001534 <mpu6050_complementary_filter+0x29c>)
 80014f6:	f002 ff5d 	bl	80043b4 <iprintf>
}
 80014fa:	bf00      	nop
 80014fc:	3740      	adds	r7, #64	@ 0x40
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	20000000 	.word	0x20000000
 800150c:	404ca5dc 	.word	0x404ca5dc
 8001510:	20000084 	.word	0x20000084
 8001514:	46000000 	.word	0x46000000
 8001518:	42830000 	.word	0x42830000
 800151c:	20000128 	.word	0x20000128
 8001520:	447a0000 	.word	0x447a0000
 8001524:	20000120 	.word	0x20000120
 8001528:	3f7ae148 	.word	0x3f7ae148
 800152c:	3ca3d700 	.word	0x3ca3d700
 8001530:	20000124 	.word	0x20000124
 8001534:	08005a94 	.word	0x08005a94

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <HAL_MspInit+0x4c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <HAL_I2C_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12b      	bne.n	8001602 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_I2C_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a17      	ldr	r2, [pc, #92]	@ (8001610 <HAL_I2C_MspInit+0x88>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_I2C_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c6:	23c0      	movs	r3, #192	@ 0xc0
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d6:	2304      	movs	r3, #4
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <HAL_I2C_MspInit+0x8c>)
 80015e2:	f000 faeb 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_I2C_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_I2C_MspInit+0x88>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_I2C_MspInit+0x88>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	@ 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40005400 	.word	0x40005400
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400

08001618 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	@ (800169c <HAL_UART_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_UART_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001672:	230c      	movs	r3, #12
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <HAL_UART_MspInit+0x8c>)
 800168e:	f000 fa95 	bl	8001bbc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	@ 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f933 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e00a      	b.n	800172e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001718:	f3af 8000 	nop.w
 800171c:	4601      	mov	r1, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf0      	blt.n	8001718 <_read+0x12>
  }

  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e009      	b.n	8001766 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	60ba      	str	r2, [r7, #8]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbe2 	bl	8000f24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbf1      	blt.n	8001752 <_write+0x12>
  }
  return len;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_close>:

int _close(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	605a      	str	r2, [r3, #4]
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_isatty>:

int _isatty(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f002 ff66 	bl	80046e0 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20020000 	.word	0x20020000
 8001840:	00000400 	.word	0x00000400
 8001844:	2000012c 	.word	0x2000012c
 8001848:	20000280 	.word	0x20000280

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001874:	f7ff ffea 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f002 ff25 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff fb57 	bl	8000f54 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018b4:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 80018b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018bc:	20000280 	.word	0x20000280

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f931 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fe1e 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f93b 	bl	8001ba2 <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001944:	f000 f911 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	20000130 	.word	0x20000130

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000130 	.word	0x20000130

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff47 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff5c 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffb0 	bl	8001b10 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e159      	b.n	8001e8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 8148 	bne.w	8001e86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a2 	beq.w	8001e86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b57      	ldr	r3, [pc, #348]	@ (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b54      	ldr	r3, [pc, #336]	@ (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5e:	4a52      	ldr	r2, [pc, #328]	@ (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a49      	ldr	r2, [pc, #292]	@ (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x202>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a48      	ldr	r2, [pc, #288]	@ (8001eb0 <HAL_GPIO_Init+0x2f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x1fe>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a47      	ldr	r2, [pc, #284]	@ (8001eb4 <HAL_GPIO_Init+0x2f8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x1fa>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a46      	ldr	r2, [pc, #280]	@ (8001eb8 <HAL_GPIO_Init+0x2fc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x1f6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <HAL_GPIO_Init+0x300>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x1f2>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	@ (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e32:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e80:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec0 <HAL_GPIO_Init+0x304>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f aea2 	bls.w	8001bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	@ 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e12b      	b.n	800212e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fb4c 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	@ 0x24
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f28:	f001 fd4e 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a81      	ldr	r2, [pc, #516]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d807      	bhi.n	8001f48 <HAL_I2C_Init+0x84>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a80      	ldr	r2, [pc, #512]	@ (800213c <HAL_I2C_Init+0x278>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e006      	b.n	8001f56 <HAL_I2C_Init+0x92>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002140 <HAL_I2C_Init+0x27c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0e7      	b.n	800212e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a78      	ldr	r2, [pc, #480]	@ (8002144 <HAL_I2C_Init+0x280>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d802      	bhi.n	8001f98 <HAL_I2C_Init+0xd4>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	e009      	b.n	8001fac <HAL_I2C_Init+0xe8>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_I2C_Init+0x284>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	3301      	adds	r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	495c      	ldr	r1, [pc, #368]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d819      	bhi.n	8002000 <HAL_I2C_Init+0x13c>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e59      	subs	r1, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_I2C_Init+0x138>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e59      	subs	r1, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffa:	e051      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e04f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d111      	bne.n	800202c <HAL_I2C_Init+0x168>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e012      	b.n	8002052 <HAL_I2C_Init+0x18e>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x196>
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10e      	bne.n	8002080 <HAL_I2C_Init+0x1bc>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e58      	subs	r0, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	fbb0 f3f3 	udiv	r3, r0, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207e:	e00f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	6809      	ldr	r1, [r1, #0]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6911      	ldr	r1, [r2, #16]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	000186a0 	.word	0x000186a0
 800213c:	001e847f 	.word	0x001e847f
 8002140:	003d08ff 	.word	0x003d08ff
 8002144:	431bde83 	.word	0x431bde83
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	817b      	strh	r3, [r7, #10]
 800215e:	460b      	mov	r3, r1
 8002160:	813b      	strh	r3, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002166:	f7ff fc13 	bl	8001990 <HAL_GetTick>
 800216a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b20      	cmp	r3, #32
 8002176:	f040 80d9 	bne.w	800232c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2319      	movs	r3, #25
 8002180:	2201      	movs	r2, #1
 8002182:	496d      	ldr	r1, [pc, #436]	@ (8002338 <HAL_I2C_Mem_Write+0x1ec>)
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fdb9 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	e0cc      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Write+0x56>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0c5      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d007      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2221      	movs	r2, #33	@ 0x21
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a3a      	ldr	r2, [r7, #32]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a4d      	ldr	r2, [pc, #308]	@ (800233c <HAL_I2C_Mem_Write+0x1f0>)
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800220a:	88f8      	ldrh	r0, [r7, #6]
 800220c:	893a      	ldrh	r2, [r7, #8]
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4603      	mov	r3, r0
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fbf0 	bl	8002a00 <I2C_RequestMemoryWrite>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d052      	beq.n	80022cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e081      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fe7e 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b04      	cmp	r3, #4
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	d11b      	bne.n	80022cc <HAL_I2C_Mem_Write+0x180>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1aa      	bne.n	800222a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fe71 	bl	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e016      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000

08002340 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fb19 	bl	8001990 <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	f040 8214 	bne.w	8002796 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2319      	movs	r3, #25
 8002374:	2201      	movs	r2, #1
 8002376:	497b      	ldr	r1, [pc, #492]	@ (8002564 <HAL_I2C_Mem_Read+0x224>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fcbf 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	e207      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Mem_Read+0x56>
 8002392:	2302      	movs	r3, #2
 8002394:	e200      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d007      	beq.n	80023bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2222      	movs	r2, #34	@ 0x22
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002568 <HAL_I2C_Mem_Read+0x228>)
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fe:	88f8      	ldrh	r0, [r7, #6]
 8002400:	893a      	ldrh	r2, [r7, #8]
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4603      	mov	r3, r0
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fb8c 	bl	8002b2c <I2C_RequestMemoryRead>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1bc      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e190      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11b      	bne.n	800248e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e170      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	2b02      	cmp	r3, #2
 8002494:	d11b      	bne.n	80024ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	e150      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024e4:	e144      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	f200 80f1 	bhi.w	80026d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d123      	bne.n	8002540 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fda7 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e145      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800253e:	e117      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b02      	cmp	r3, #2
 8002546:	d14e      	bne.n	80025e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	2200      	movs	r2, #0
 8002550:	4906      	ldr	r1, [pc, #24]	@ (800256c <HAL_I2C_Mem_Read+0x22c>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fbd2 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e11a      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
 8002562:	bf00      	nop
 8002564:	00100002 	.word	0x00100002
 8002568:	ffff0000 	.word	0xffff0000
 800256c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e4:	e0c4      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ec:	2200      	movs	r2, #0
 80025ee:	496c      	ldr	r1, [pc, #432]	@ (80027a0 <HAL_I2C_Mem_Read+0x460>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fb83 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0cb      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002648:	2200      	movs	r2, #0
 800264a:	4955      	ldr	r1, [pc, #340]	@ (80027a0 <HAL_I2C_Mem_Read+0x460>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fb55 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e09d      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026d0:	e04e      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fcba 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e058      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d124      	bne.n	8002770 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f aeb6 	bne.w	80024e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3728      	adds	r7, #40	@ 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	00010004 	.word	0x00010004

080027a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	460b      	mov	r3, r1
 80027b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff f8ec 	bl	8001990 <HAL_GetTick>
 80027b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 8111 	bne.w	80029ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2319      	movs	r3, #25
 80027d2:	2201      	movs	r2, #1
 80027d4:	4988      	ldr	r1, [pc, #544]	@ (80029f8 <HAL_I2C_IsDeviceReady+0x254>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fa90 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e104      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_I2C_IsDeviceReady+0x50>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e0fd      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d007      	beq.n	800281a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2224      	movs	r2, #36	@ 0x24
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a70      	ldr	r2, [pc, #448]	@ (80029fc <HAL_I2C_IsDeviceReady+0x258>)
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800284c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa4e 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002874:	d103      	bne.n	800287e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b6      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002890:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff f87d 	bl	8001990 <HAL_GetTick>
 8002896:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028c6:	e025      	b.n	8002914 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7ff f862 	bl	8001990 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <HAL_I2C_IsDeviceReady+0x13a>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22a0      	movs	r2, #160	@ 0xa0
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2ba0      	cmp	r3, #160	@ 0xa0
 800291e:	d005      	beq.n	800292c <HAL_I2C_IsDeviceReady+0x188>
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <HAL_I2C_IsDeviceReady+0x188>
 8002926:	7dbb      	ldrb	r3, [r7, #22]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0cd      	beq.n	80028c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d129      	bne.n	8002996 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002950:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2319      	movs	r3, #25
 800296e:	2201      	movs	r2, #1
 8002970:	4921      	ldr	r1, [pc, #132]	@ (80029f8 <HAL_I2C_IsDeviceReady+0x254>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f9c2 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e036      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e02c      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2319      	movs	r3, #25
 80029b6:	2201      	movs	r2, #1
 80029b8:	490f      	ldr	r1, [pc, #60]	@ (80029f8 <HAL_I2C_IsDeviceReady+0x254>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f99e 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e012      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f4ff af32 	bcc.w	800283e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	00100002 	.word	0x00100002
 80029fc:	ffff0000 	.word	0xffff0000

08002a00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	813b      	strh	r3, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f960 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a50:	d103      	bne.n	8002a5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e05f      	b.n	8002b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	492d      	ldr	r1, [pc, #180]	@ (8002b28 <I2C_RequestMemoryWrite+0x128>)
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f9bb 	bl	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e04c      	b.n	8002b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9c:	6a39      	ldr	r1, [r7, #32]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa46 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d107      	bne.n	8002ac2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e02b      	b.n	8002b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	e021      	b.n	8002b1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fa20 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00d      	beq.n	8002b12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d107      	bne.n	8002b0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e005      	b.n	8002b1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b12:	893b      	ldrh	r3, [r7, #8]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00010002 	.word	0x00010002

08002b2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	813b      	strh	r3, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f8c2 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b8c:	d103      	bne.n	8002b96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0aa      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ba8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	4952      	ldr	r1, [pc, #328]	@ (8002cf8 <I2C_RequestMemoryRead+0x1cc>)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f91d 	bl	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e097      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	6a39      	ldr	r1, [r7, #32]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f9a8 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d107      	bne.n	8002bfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e076      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c08:	893b      	ldrh	r3, [r7, #8]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]
 8002c12:	e021      	b.n	8002c58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c14:	893b      	ldrh	r3, [r7, #8]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c24:	6a39      	ldr	r1, [r7, #32]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f982 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d107      	bne.n	8002c4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e050      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5a:	6a39      	ldr	r1, [r7, #32]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f967 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d107      	bne.n	8002c80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e035      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f82b 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cba:	d103      	bne.n	8002cc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e013      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cc8:	897b      	ldrh	r3, [r7, #10]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	6a3a      	ldr	r2, [r7, #32]
 8002cdc:	4906      	ldr	r1, [pc, #24]	@ (8002cf8 <I2C_RequestMemoryRead+0x1cc>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f886 	bl	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	00010002 	.word	0x00010002

08002cfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0c:	e048      	b.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d14:	d044      	beq.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fe3b 	bl	8001990 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d139      	bne.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10d      	bne.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	e00c      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d116      	bne.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e023      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10d      	bne.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	e00c      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d093      	beq.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfe:	e071      	b.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e0e:	d123      	bne.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e067      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e5e:	d041      	beq.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7fe fd96 	bl	8001990 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d136      	bne.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10c      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e00b      	b.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e021      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10c      	bne.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e00b      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f af6d 	bne.w	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	e034      	b.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f8e3 	bl	800310a <I2C_IsAcknowledgeFailed>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f54:	d028      	beq.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe fd1b 	bl	8001990 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11d      	bne.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	2b80      	cmp	r3, #128	@ 0x80
 8002f78:	d016      	beq.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb2:	2b80      	cmp	r3, #128	@ 0x80
 8002fb4:	d1c3      	bne.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fcc:	e034      	b.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f89b 	bl	800310a <I2C_IsAcknowledgeFailed>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fe4:	d028      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fcd3 	bl	8001990 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d016      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d1c3      	bne.n	8002fce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800305c:	e049      	b.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	d119      	bne.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0210 	mvn.w	r2, #16
 8003074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e030      	b.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe fc76 	bl	8001990 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11d      	bne.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	d016      	beq.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e007      	b.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d1ae      	bne.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003120:	d11b      	bne.n	800315a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800312a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f043 0204 	orr.w	r2, r3, #4
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e267      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d075      	beq.n	8003272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003186:	4b88      	ldr	r3, [pc, #544]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d00c      	beq.n	80031ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b85      	ldr	r3, [pc, #532]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800319a:	2b08      	cmp	r3, #8
 800319c:	d112      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b82      	ldr	r3, [pc, #520]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	4b7e      	ldr	r3, [pc, #504]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05b      	beq.n	8003270 <HAL_RCC_OscConfig+0x108>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d157      	bne.n	8003270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e242      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x74>
 80031ce:	4b76      	ldr	r3, [pc, #472]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a75      	ldr	r2, [pc, #468]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e01d      	b.n	8003218 <HAL_RCC_OscConfig+0xb0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x98>
 80031e6:	4b70      	ldr	r3, [pc, #448]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6f      	ldr	r2, [pc, #444]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b6d      	ldr	r3, [pc, #436]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6c      	ldr	r2, [pc, #432]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0xb0>
 8003200:	4b69      	ldr	r3, [pc, #420]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a68      	ldr	r2, [pc, #416]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b66      	ldr	r3, [pc, #408]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a65      	ldr	r2, [pc, #404]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe fbb6 	bl	8001990 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe fbb2 	bl	8001990 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e207      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b5b      	ldr	r3, [pc, #364]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0xc0>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe fba2 	bl	8001990 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe fb9e 	bl	8001990 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1f3      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	4b51      	ldr	r3, [pc, #324]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0xe8>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d063      	beq.n	8003346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800327e:	4b4a      	ldr	r3, [pc, #296]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003292:	2b08      	cmp	r3, #8
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b44      	ldr	r3, [pc, #272]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	4b41      	ldr	r3, [pc, #260]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x152>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e1c7      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4937      	ldr	r1, [pc, #220]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	e03a      	b.n	8003346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d8:	4b34      	ldr	r3, [pc, #208]	@ (80033ac <HAL_RCC_OscConfig+0x244>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fb57 	bl	8001990 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe fb53 	bl	8001990 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e1a8      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b28      	ldr	r3, [pc, #160]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4925      	ldr	r1, [pc, #148]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331a:	4b24      	ldr	r3, [pc, #144]	@ (80033ac <HAL_RCC_OscConfig+0x244>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fb36 	bl	8001990 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003328:	f7fe fb32 	bl	8001990 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e187      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d036      	beq.n	80033c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <HAL_RCC_OscConfig+0x248>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fe fb16 	bl	8001990 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fe fb12 	bl	8001990 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e167      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337a:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_OscConfig+0x240>)
 800337c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x200>
 8003386:	e01b      	b.n	80033c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003388:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <HAL_RCC_OscConfig+0x248>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338e:	f7fe faff 	bl	8001990 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	e00e      	b.n	80033b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003396:	f7fe fafb 	bl	8001990 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d907      	bls.n	80033b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e150      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
 80033a8:	40023800 	.word	0x40023800
 80033ac:	42470000 	.word	0x42470000
 80033b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	4b88      	ldr	r3, [pc, #544]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ea      	bne.n	8003396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8097 	beq.w	80034fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d2:	4b81      	ldr	r3, [pc, #516]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	4b7d      	ldr	r3, [pc, #500]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	4a7c      	ldr	r2, [pc, #496]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ee:	4b7a      	ldr	r3, [pc, #488]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b77      	ldr	r3, [pc, #476]	@ (80035dc <HAL_RCC_OscConfig+0x474>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d118      	bne.n	800343c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340a:	4b74      	ldr	r3, [pc, #464]	@ (80035dc <HAL_RCC_OscConfig+0x474>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a73      	ldr	r2, [pc, #460]	@ (80035dc <HAL_RCC_OscConfig+0x474>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003416:	f7fe fabb 	bl	8001990 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341e:	f7fe fab7 	bl	8001990 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e10c      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	4b6a      	ldr	r3, [pc, #424]	@ (80035dc <HAL_RCC_OscConfig+0x474>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x2ea>
 8003444:	4b64      	ldr	r3, [pc, #400]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003448:	4a63      	ldr	r2, [pc, #396]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003450:	e01c      	b.n	800348c <HAL_RCC_OscConfig+0x324>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b05      	cmp	r3, #5
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x30c>
 800345a:	4b5f      	ldr	r3, [pc, #380]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345e:	4a5e      	ldr	r2, [pc, #376]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6713      	str	r3, [r2, #112]	@ 0x70
 8003466:	4b5c      	ldr	r3, [pc, #368]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	4a5b      	ldr	r2, [pc, #364]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6713      	str	r3, [r2, #112]	@ 0x70
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0x324>
 8003474:	4b58      	ldr	r3, [pc, #352]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003478:	4a57      	ldr	r2, [pc, #348]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003480:	4b55      	ldr	r3, [pc, #340]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a54      	ldr	r2, [pc, #336]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003486:	f023 0304 	bic.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fa7c 	bl	8001990 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe fa78 	bl	8001990 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0cb      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	4b49      	ldr	r3, [pc, #292]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ee      	beq.n	800349c <HAL_RCC_OscConfig+0x334>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fe fa66 	bl	8001990 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fe fa62 	bl	8001990 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0b5      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034de:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ee      	bne.n	80034c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b39      	ldr	r3, [pc, #228]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	4a38      	ldr	r2, [pc, #224]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a1 	beq.w	8003648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003506:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	d05c      	beq.n	80035cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d141      	bne.n	800359e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b31      	ldr	r3, [pc, #196]	@ (80035e0 <HAL_RCC_OscConfig+0x478>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fa36 	bl	8001990 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fa32 	bl	8001990 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e087      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b27      	ldr	r3, [pc, #156]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	019b      	lsls	r3, r3, #6
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	491b      	ldr	r1, [pc, #108]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <HAL_RCC_OscConfig+0x478>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fe fa0b 	bl	8001990 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357e:	f7fe fa07 	bl	8001990 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e05c      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x416>
 800359c:	e054      	b.n	8003648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <HAL_RCC_OscConfig+0x478>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe f9f4 	bl	8001990 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe f9f0 	bl	8001990 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e045      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCC_OscConfig+0x470>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x444>
 80035ca:	e03d      	b.n	8003648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e038      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <HAL_RCC_OscConfig+0x4ec>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d028      	beq.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d121      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d11a      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800361a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361c:	4293      	cmp	r3, r2
 800361e:	d111      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	3b01      	subs	r3, #1
 800362e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800

08003658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0cc      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b68      	ldr	r3, [pc, #416]	@ (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d90c      	bls.n	8003694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b65      	ldr	r3, [pc, #404]	@ (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b63      	ldr	r3, [pc, #396]	@ (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0b8      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ac:	4b59      	ldr	r3, [pc, #356]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a58      	ldr	r2, [pc, #352]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c4:	4b53      	ldr	r3, [pc, #332]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a52      	ldr	r2, [pc, #328]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b50      	ldr	r3, [pc, #320]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	494d      	ldr	r1, [pc, #308]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d044      	beq.n	8003778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b47      	ldr	r3, [pc, #284]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d119      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d003      	beq.n	8003716 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003712:	2b03      	cmp	r3, #3
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	4b3f      	ldr	r3, [pc, #252]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e06f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e067      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4934      	ldr	r1, [pc, #208]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003748:	f7fe f922 	bl	8001990 <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fe f91e 	bl	8001990 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e04f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003778:	4b25      	ldr	r3, [pc, #148]	@ (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d20c      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b22      	ldr	r3, [pc, #136]	@ (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e032      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4916      	ldr	r1, [pc, #88]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490e      	ldr	r1, [pc, #56]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037de:	f000 f821 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490a      	ldr	r1, [pc, #40]	@ (8003818 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	4a09      	ldr	r2, [pc, #36]	@ (800381c <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037fa:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe f882 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00
 8003814:	40023800 	.word	0x40023800
 8003818:	08005aac 	.word	0x08005aac
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003828:	b090      	sub	sp, #64	@ 0x40
 800382a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383c:	4b59      	ldr	r3, [pc, #356]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d00d      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x40>
 8003848:	2b08      	cmp	r3, #8
 800384a:	f200 80a1 	bhi.w	8003990 <HAL_RCC_GetSysClockFreq+0x16c>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x34>
 8003852:	2b04      	cmp	r3, #4
 8003854:	d003      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0x3a>
 8003856:	e09b      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003858:	4b53      	ldr	r3, [pc, #332]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800385a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800385c:	e09b      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800385e:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003862:	e098      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003864:	4b4f      	ldr	r3, [pc, #316]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800386c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800386e:	4b4d      	ldr	r3, [pc, #308]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d028      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	099b      	lsrs	r3, r3, #6
 8003880:	2200      	movs	r2, #0
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	627a      	str	r2, [r7, #36]	@ 0x24
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800388c:	2100      	movs	r1, #0
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003890:	fb03 f201 	mul.w	r2, r3, r1
 8003894:	2300      	movs	r3, #0
 8003896:	fb00 f303 	mul.w	r3, r0, r3
 800389a:	4413      	add	r3, r2
 800389c:	4a43      	ldr	r2, [pc, #268]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x188>)
 800389e:	fba0 1202 	umull	r1, r2, r0, r2
 80038a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a4:	460a      	mov	r2, r1
 80038a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038aa:	4413      	add	r3, r2
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b0:	2200      	movs	r2, #0
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	61fa      	str	r2, [r7, #28]
 80038b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038be:	f7fd f99b 	bl	8000bf8 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4613      	mov	r3, r2
 80038c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ca:	e053      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038cc:	4b35      	ldr	r3, [pc, #212]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	2200      	movs	r2, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	617a      	str	r2, [r7, #20]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038de:	f04f 0b00 	mov.w	fp, #0
 80038e2:	4652      	mov	r2, sl
 80038e4:	465b      	mov	r3, fp
 80038e6:	f04f 0000 	mov.w	r0, #0
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f4:	0150      	lsls	r0, r2, #5
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	ebb2 080a 	subs.w	r8, r2, sl
 80038fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800390e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003912:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003916:	ebb2 0408 	subs.w	r4, r2, r8
 800391a:	eb63 0509 	sbc.w	r5, r3, r9
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	00eb      	lsls	r3, r5, #3
 8003928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392c:	00e2      	lsls	r2, r4, #3
 800392e:	4614      	mov	r4, r2
 8003930:	461d      	mov	r5, r3
 8003932:	eb14 030a 	adds.w	r3, r4, sl
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	eb45 030b 	adc.w	r3, r5, fp
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394a:	4629      	mov	r1, r5
 800394c:	028b      	lsls	r3, r1, #10
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003954:	4621      	mov	r1, r4
 8003956:	028a      	lsls	r2, r1, #10
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	2200      	movs	r2, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	60fa      	str	r2, [r7, #12]
 8003964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003968:	f7fd f946 	bl	8000bf8 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	3301      	adds	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003984:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003998:	4618      	mov	r0, r3
 800399a:	3740      	adds	r7, #64	@ 0x40
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	017d7840 	.word	0x017d7840

080039b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b4:	4b03      	ldr	r3, [pc, #12]	@ (80039c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000000 	.word	0x20000000

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039cc:	f7ff fff0 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	08005abc 	.word	0x08005abc

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f4:	f7ff ffdc 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0b5b      	lsrs	r3, r3, #13
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	@ (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08005abc 	.word	0x08005abc

08003a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e042      	b.n	8003ab0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd fdea 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	@ 0x24
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f973 	bl	8003d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	@ 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d175      	bne.n	8003bc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_UART_Transmit+0x2c>
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e06e      	b.n	8003bc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2221      	movs	r2, #33	@ 0x21
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af6:	f7fd ff4b 	bl	8001990 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b10:	d108      	bne.n	8003b24 <HAL_UART_Transmit+0x6c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e003      	b.n	8003b2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b2c:	e02e      	b.n	8003b8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f848 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e03a      	b.n	8003bc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e007      	b.n	8003b7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1cb      	bne.n	8003b2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2140      	movs	r1, #64	@ 0x40
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f814 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e006      	b.n	8003bc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	e03b      	b.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be6:	d037      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be8:	f7fd fed2 	bl	8001990 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	6a3a      	ldr	r2, [r7, #32]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e03a      	b.n	8003c78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b80      	cmp	r3, #128	@ 0x80
 8003c14:	d020      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b40      	cmp	r3, #64	@ 0x40
 8003c1a:	d01d      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d116      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f81d 	bl	8003c80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e00f      	b.n	8003c78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d0b4      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b095      	sub	sp, #84	@ 0x54
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ca8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d119      	bne.n	8003d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	@ 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b0c0      	sub	sp, #256	@ 0x100
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	ea40 0301 	orr.w	r3, r0, r1
 8003d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003da0:	f021 010c 	bic.w	r1, r1, #12
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dae:	430b      	orrs	r3, r1
 8003db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	6999      	ldr	r1, [r3, #24]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	ea40 0301 	orr.w	r3, r0, r1
 8003dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b8f      	ldr	r3, [pc, #572]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d005      	beq.n	8003de8 <UART_SetConfig+0xa0>
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b8d      	ldr	r3, [pc, #564]	@ (8004018 <UART_SetConfig+0x2d0>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d104      	bne.n	8003df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7ff fe02 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8003dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003df0:	e003      	b.n	8003dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7ff fde9 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8003df6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e04:	f040 810c 	bne.w	8004020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e22:	415b      	adcs	r3, r3
 8003e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	eb12 0801 	adds.w	r8, r2, r1
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb43 0901 	adc.w	r9, r3, r1
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4a:	4690      	mov	r8, r2
 8003e4c:	4699      	mov	r9, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	eb18 0303 	adds.w	r3, r8, r3
 8003e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e58:	462b      	mov	r3, r5
 8003e5a:	eb49 0303 	adc.w	r3, r9, r3
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e76:	460b      	mov	r3, r1
 8003e78:	18db      	adds	r3, r3, r3
 8003e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	eb42 0303 	adc.w	r3, r2, r3
 8003e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e8c:	f7fc feb4 	bl	8000bf8 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b61      	ldr	r3, [pc, #388]	@ (800401c <UART_SetConfig+0x2d4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	011c      	lsls	r4, r3, #4
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee0:	4692      	mov	sl, r2
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	18db      	adds	r3, r3, r3
 8003f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f12:	4613      	mov	r3, r2
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f22:	f7fc fe69 	bl	8000bf8 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <UART_SetConfig+0x2d4>)
 8003f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2264      	movs	r2, #100	@ 0x64
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	1acb      	subs	r3, r1, r3
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f42:	4b36      	ldr	r3, [pc, #216]	@ (800401c <UART_SetConfig+0x2d4>)
 8003f44:	fba3 2302 	umull	r2, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f50:	441c      	add	r4, r3
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f74:	4641      	mov	r1, r8
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	00cb      	lsls	r3, r1, #3
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f96:	4651      	mov	r1, sl
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa8:	464b      	mov	r3, r9
 8003faa:	460a      	mov	r2, r1
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc8:	460b      	mov	r3, r1
 8003fca:	18db      	adds	r3, r3, r3
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fce:	4613      	mov	r3, r2
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fde:	f7fc fe0b 	bl	8000bf8 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <UART_SetConfig+0x2d4>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	@ 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3332      	adds	r3, #50	@ 0x32
 8003ffa:	4a08      	ldr	r2, [pc, #32]	@ (800401c <UART_SetConfig+0x2d4>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 0207 	and.w	r2, r3, #7
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4422      	add	r2, r4
 800400e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004010:	e106      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004012:	bf00      	nop
 8004014:	40011000 	.word	0x40011000
 8004018:	40011400 	.word	0x40011400
 800401c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800402a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800402e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004032:	4642      	mov	r2, r8
 8004034:	464b      	mov	r3, r9
 8004036:	1891      	adds	r1, r2, r2
 8004038:	6239      	str	r1, [r7, #32]
 800403a:	415b      	adcs	r3, r3
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004042:	4641      	mov	r1, r8
 8004044:	1854      	adds	r4, r2, r1
 8004046:	4649      	mov	r1, r9
 8004048:	eb43 0501 	adc.w	r5, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	00eb      	lsls	r3, r5, #3
 8004056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	4643      	mov	r3, r8
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004068:	464b      	mov	r3, r9
 800406a:	eb45 0303 	adc.w	r3, r5, r3
 800406e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800408e:	4629      	mov	r1, r5
 8004090:	008b      	lsls	r3, r1, #2
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004098:	4621      	mov	r1, r4
 800409a:	008a      	lsls	r2, r1, #2
 800409c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040a0:	f7fc fdaa 	bl	8000bf8 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b60      	ldr	r3, [pc, #384]	@ (800422c <UART_SetConfig+0x4e4>)
 80040aa:	fba3 2302 	umull	r2, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	011c      	lsls	r4, r3, #4
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	61b9      	str	r1, [r7, #24]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6139      	str	r1, [r7, #16]
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800413e:	f7fc fd5b 	bl	8000bf8 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4611      	mov	r1, r2
 8004148:	4b38      	ldr	r3, [pc, #224]	@ (800422c <UART_SetConfig+0x4e4>)
 800414a:	fba3 2301 	umull	r2, r3, r3, r1
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2264      	movs	r2, #100	@ 0x64
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	1acb      	subs	r3, r1, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	@ 0x32
 800415c:	4a33      	ldr	r2, [pc, #204]	@ (800422c <UART_SetConfig+0x4e4>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	441c      	add	r4, r3
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	673b      	str	r3, [r7, #112]	@ 0x70
 8004172:	677a      	str	r2, [r7, #116]	@ 0x74
 8004174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	415b      	adcs	r3, r3
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ba:	464b      	mov	r3, r9
 80041bc:	460a      	mov	r2, r1
 80041be:	eb42 0303 	adc.w	r3, r2, r3
 80041c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041dc:	4649      	mov	r1, r9
 80041de:	008b      	lsls	r3, r1, #2
 80041e0:	4641      	mov	r1, r8
 80041e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e6:	4641      	mov	r1, r8
 80041e8:	008a      	lsls	r2, r1, #2
 80041ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ee:	f7fc fd03 	bl	8000bf8 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <UART_SetConfig+0x4e4>)
 80041f8:	fba3 1302 	umull	r1, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	2164      	movs	r1, #100	@ 0x64
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	3332      	adds	r3, #50	@ 0x32
 800420a:	4a08      	ldr	r2, [pc, #32]	@ (800422c <UART_SetConfig+0x4e4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4422      	add	r2, r4
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004226:	46bd      	mov	sp, r7
 8004228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <std>:
 8004230:	2300      	movs	r3, #0
 8004232:	b510      	push	{r4, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	e9c0 3300 	strd	r3, r3, [r0]
 800423a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800423e:	6083      	str	r3, [r0, #8]
 8004240:	8181      	strh	r1, [r0, #12]
 8004242:	6643      	str	r3, [r0, #100]	@ 0x64
 8004244:	81c2      	strh	r2, [r0, #14]
 8004246:	6183      	str	r3, [r0, #24]
 8004248:	4619      	mov	r1, r3
 800424a:	2208      	movs	r2, #8
 800424c:	305c      	adds	r0, #92	@ 0x5c
 800424e:	f000 f9f9 	bl	8004644 <memset>
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <std+0x58>)
 8004254:	6263      	str	r3, [r4, #36]	@ 0x24
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <std+0x5c>)
 8004258:	62a3      	str	r3, [r4, #40]	@ 0x28
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <std+0x60>)
 800425c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <std+0x64>)
 8004260:	6323      	str	r3, [r4, #48]	@ 0x30
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <std+0x68>)
 8004264:	6224      	str	r4, [r4, #32]
 8004266:	429c      	cmp	r4, r3
 8004268:	d006      	beq.n	8004278 <std+0x48>
 800426a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800426e:	4294      	cmp	r4, r2
 8004270:	d002      	beq.n	8004278 <std+0x48>
 8004272:	33d0      	adds	r3, #208	@ 0xd0
 8004274:	429c      	cmp	r4, r3
 8004276:	d105      	bne.n	8004284 <std+0x54>
 8004278:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800427c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004280:	f000 ba58 	b.w	8004734 <__retarget_lock_init_recursive>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	bf00      	nop
 8004288:	08004495 	.word	0x08004495
 800428c:	080044b7 	.word	0x080044b7
 8004290:	080044ef 	.word	0x080044ef
 8004294:	08004513 	.word	0x08004513
 8004298:	20000134 	.word	0x20000134

0800429c <stdio_exit_handler>:
 800429c:	4a02      	ldr	r2, [pc, #8]	@ (80042a8 <stdio_exit_handler+0xc>)
 800429e:	4903      	ldr	r1, [pc, #12]	@ (80042ac <stdio_exit_handler+0x10>)
 80042a0:	4803      	ldr	r0, [pc, #12]	@ (80042b0 <stdio_exit_handler+0x14>)
 80042a2:	f000 b869 	b.w	8004378 <_fwalk_sglue>
 80042a6:	bf00      	nop
 80042a8:	2000000c 	.word	0x2000000c
 80042ac:	08004fd1 	.word	0x08004fd1
 80042b0:	2000001c 	.word	0x2000001c

080042b4 <cleanup_stdio>:
 80042b4:	6841      	ldr	r1, [r0, #4]
 80042b6:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <cleanup_stdio+0x34>)
 80042b8:	4299      	cmp	r1, r3
 80042ba:	b510      	push	{r4, lr}
 80042bc:	4604      	mov	r4, r0
 80042be:	d001      	beq.n	80042c4 <cleanup_stdio+0x10>
 80042c0:	f000 fe86 	bl	8004fd0 <_fflush_r>
 80042c4:	68a1      	ldr	r1, [r4, #8]
 80042c6:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <cleanup_stdio+0x38>)
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d002      	beq.n	80042d2 <cleanup_stdio+0x1e>
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 fe7f 	bl	8004fd0 <_fflush_r>
 80042d2:	68e1      	ldr	r1, [r4, #12]
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <cleanup_stdio+0x3c>)
 80042d6:	4299      	cmp	r1, r3
 80042d8:	d004      	beq.n	80042e4 <cleanup_stdio+0x30>
 80042da:	4620      	mov	r0, r4
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	f000 be76 	b.w	8004fd0 <_fflush_r>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	bf00      	nop
 80042e8:	20000134 	.word	0x20000134
 80042ec:	2000019c 	.word	0x2000019c
 80042f0:	20000204 	.word	0x20000204

080042f4 <global_stdio_init.part.0>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <global_stdio_init.part.0+0x30>)
 80042f8:	4c0b      	ldr	r4, [pc, #44]	@ (8004328 <global_stdio_init.part.0+0x34>)
 80042fa:	4a0c      	ldr	r2, [pc, #48]	@ (800432c <global_stdio_init.part.0+0x38>)
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	4620      	mov	r0, r4
 8004300:	2200      	movs	r2, #0
 8004302:	2104      	movs	r1, #4
 8004304:	f7ff ff94 	bl	8004230 <std>
 8004308:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800430c:	2201      	movs	r2, #1
 800430e:	2109      	movs	r1, #9
 8004310:	f7ff ff8e 	bl	8004230 <std>
 8004314:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004318:	2202      	movs	r2, #2
 800431a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431e:	2112      	movs	r1, #18
 8004320:	f7ff bf86 	b.w	8004230 <std>
 8004324:	2000026c 	.word	0x2000026c
 8004328:	20000134 	.word	0x20000134
 800432c:	0800429d 	.word	0x0800429d

08004330 <__sfp_lock_acquire>:
 8004330:	4801      	ldr	r0, [pc, #4]	@ (8004338 <__sfp_lock_acquire+0x8>)
 8004332:	f000 ba00 	b.w	8004736 <__retarget_lock_acquire_recursive>
 8004336:	bf00      	nop
 8004338:	20000275 	.word	0x20000275

0800433c <__sfp_lock_release>:
 800433c:	4801      	ldr	r0, [pc, #4]	@ (8004344 <__sfp_lock_release+0x8>)
 800433e:	f000 b9fb 	b.w	8004738 <__retarget_lock_release_recursive>
 8004342:	bf00      	nop
 8004344:	20000275 	.word	0x20000275

08004348 <__sinit>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	f7ff fff0 	bl	8004330 <__sfp_lock_acquire>
 8004350:	6a23      	ldr	r3, [r4, #32]
 8004352:	b11b      	cbz	r3, 800435c <__sinit+0x14>
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004358:	f7ff bff0 	b.w	800433c <__sfp_lock_release>
 800435c:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <__sinit+0x28>)
 800435e:	6223      	str	r3, [r4, #32]
 8004360:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <__sinit+0x2c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f5      	bne.n	8004354 <__sinit+0xc>
 8004368:	f7ff ffc4 	bl	80042f4 <global_stdio_init.part.0>
 800436c:	e7f2      	b.n	8004354 <__sinit+0xc>
 800436e:	bf00      	nop
 8004370:	080042b5 	.word	0x080042b5
 8004374:	2000026c 	.word	0x2000026c

08004378 <_fwalk_sglue>:
 8004378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800437c:	4607      	mov	r7, r0
 800437e:	4688      	mov	r8, r1
 8004380:	4614      	mov	r4, r2
 8004382:	2600      	movs	r6, #0
 8004384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004388:	f1b9 0901 	subs.w	r9, r9, #1
 800438c:	d505      	bpl.n	800439a <_fwalk_sglue+0x22>
 800438e:	6824      	ldr	r4, [r4, #0]
 8004390:	2c00      	cmp	r4, #0
 8004392:	d1f7      	bne.n	8004384 <_fwalk_sglue+0xc>
 8004394:	4630      	mov	r0, r6
 8004396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439a:	89ab      	ldrh	r3, [r5, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d907      	bls.n	80043b0 <_fwalk_sglue+0x38>
 80043a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043a4:	3301      	adds	r3, #1
 80043a6:	d003      	beq.n	80043b0 <_fwalk_sglue+0x38>
 80043a8:	4629      	mov	r1, r5
 80043aa:	4638      	mov	r0, r7
 80043ac:	47c0      	blx	r8
 80043ae:	4306      	orrs	r6, r0
 80043b0:	3568      	adds	r5, #104	@ 0x68
 80043b2:	e7e9      	b.n	8004388 <_fwalk_sglue+0x10>

080043b4 <iprintf>:
 80043b4:	b40f      	push	{r0, r1, r2, r3}
 80043b6:	b507      	push	{r0, r1, r2, lr}
 80043b8:	4906      	ldr	r1, [pc, #24]	@ (80043d4 <iprintf+0x20>)
 80043ba:	ab04      	add	r3, sp, #16
 80043bc:	6808      	ldr	r0, [r1, #0]
 80043be:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c2:	6881      	ldr	r1, [r0, #8]
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	f000 fadb 	bl	8004980 <_vfiprintf_r>
 80043ca:	b003      	add	sp, #12
 80043cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d0:	b004      	add	sp, #16
 80043d2:	4770      	bx	lr
 80043d4:	20000018 	.word	0x20000018

080043d8 <_puts_r>:
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	b570      	push	{r4, r5, r6, lr}
 80043dc:	6884      	ldr	r4, [r0, #8]
 80043de:	4605      	mov	r5, r0
 80043e0:	460e      	mov	r6, r1
 80043e2:	b90b      	cbnz	r3, 80043e8 <_puts_r+0x10>
 80043e4:	f7ff ffb0 	bl	8004348 <__sinit>
 80043e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043ea:	07db      	lsls	r3, r3, #31
 80043ec:	d405      	bmi.n	80043fa <_puts_r+0x22>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0598      	lsls	r0, r3, #22
 80043f2:	d402      	bmi.n	80043fa <_puts_r+0x22>
 80043f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043f6:	f000 f99e 	bl	8004736 <__retarget_lock_acquire_recursive>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	0719      	lsls	r1, r3, #28
 80043fe:	d502      	bpl.n	8004406 <_puts_r+0x2e>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d135      	bne.n	8004472 <_puts_r+0x9a>
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 f8c5 	bl	8004598 <__swsetup_r>
 800440e:	b380      	cbz	r0, 8004472 <_puts_r+0x9a>
 8004410:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004416:	07da      	lsls	r2, r3, #31
 8004418:	d405      	bmi.n	8004426 <_puts_r+0x4e>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	059b      	lsls	r3, r3, #22
 800441e:	d402      	bmi.n	8004426 <_puts_r+0x4e>
 8004420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004422:	f000 f989 	bl	8004738 <__retarget_lock_release_recursive>
 8004426:	4628      	mov	r0, r5
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	2b00      	cmp	r3, #0
 800442c:	da04      	bge.n	8004438 <_puts_r+0x60>
 800442e:	69a2      	ldr	r2, [r4, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	dc17      	bgt.n	8004464 <_puts_r+0x8c>
 8004434:	290a      	cmp	r1, #10
 8004436:	d015      	beq.n	8004464 <_puts_r+0x8c>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	7019      	strb	r1, [r3, #0]
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004446:	3b01      	subs	r3, #1
 8004448:	60a3      	str	r3, [r4, #8]
 800444a:	2900      	cmp	r1, #0
 800444c:	d1ed      	bne.n	800442a <_puts_r+0x52>
 800444e:	2b00      	cmp	r3, #0
 8004450:	da11      	bge.n	8004476 <_puts_r+0x9e>
 8004452:	4622      	mov	r2, r4
 8004454:	210a      	movs	r1, #10
 8004456:	4628      	mov	r0, r5
 8004458:	f000 f85f 	bl	800451a <__swbuf_r>
 800445c:	3001      	adds	r0, #1
 800445e:	d0d7      	beq.n	8004410 <_puts_r+0x38>
 8004460:	250a      	movs	r5, #10
 8004462:	e7d7      	b.n	8004414 <_puts_r+0x3c>
 8004464:	4622      	mov	r2, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f857 	bl	800451a <__swbuf_r>
 800446c:	3001      	adds	r0, #1
 800446e:	d1e7      	bne.n	8004440 <_puts_r+0x68>
 8004470:	e7ce      	b.n	8004410 <_puts_r+0x38>
 8004472:	3e01      	subs	r6, #1
 8004474:	e7e4      	b.n	8004440 <_puts_r+0x68>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	220a      	movs	r2, #10
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e7ee      	b.n	8004460 <_puts_r+0x88>
	...

08004484 <puts>:
 8004484:	4b02      	ldr	r3, [pc, #8]	@ (8004490 <puts+0xc>)
 8004486:	4601      	mov	r1, r0
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	f7ff bfa5 	b.w	80043d8 <_puts_r>
 800448e:	bf00      	nop
 8004490:	20000018 	.word	0x20000018

08004494 <__sread>:
 8004494:	b510      	push	{r4, lr}
 8004496:	460c      	mov	r4, r1
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	f000 f8fc 	bl	8004698 <_read_r>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	bfab      	itete	ge
 80044a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044a6:	89a3      	ldrhlt	r3, [r4, #12]
 80044a8:	181b      	addge	r3, r3, r0
 80044aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044ae:	bfac      	ite	ge
 80044b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044b2:	81a3      	strhlt	r3, [r4, #12]
 80044b4:	bd10      	pop	{r4, pc}

080044b6 <__swrite>:
 80044b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ba:	461f      	mov	r7, r3
 80044bc:	898b      	ldrh	r3, [r1, #12]
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	4605      	mov	r5, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	4616      	mov	r6, r2
 80044c6:	d505      	bpl.n	80044d4 <__swrite+0x1e>
 80044c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044cc:	2302      	movs	r3, #2
 80044ce:	2200      	movs	r2, #0
 80044d0:	f000 f8d0 	bl	8004674 <_lseek_r>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	4632      	mov	r2, r6
 80044e2:	463b      	mov	r3, r7
 80044e4:	4628      	mov	r0, r5
 80044e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ea:	f000 b8e7 	b.w	80046bc <_write_r>

080044ee <__sseek>:
 80044ee:	b510      	push	{r4, lr}
 80044f0:	460c      	mov	r4, r1
 80044f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f6:	f000 f8bd 	bl	8004674 <_lseek_r>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	bf15      	itete	ne
 8004500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800450a:	81a3      	strheq	r3, [r4, #12]
 800450c:	bf18      	it	ne
 800450e:	81a3      	strhne	r3, [r4, #12]
 8004510:	bd10      	pop	{r4, pc}

08004512 <__sclose>:
 8004512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004516:	f000 b89d 	b.w	8004654 <_close_r>

0800451a <__swbuf_r>:
 800451a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451c:	460e      	mov	r6, r1
 800451e:	4614      	mov	r4, r2
 8004520:	4605      	mov	r5, r0
 8004522:	b118      	cbz	r0, 800452c <__swbuf_r+0x12>
 8004524:	6a03      	ldr	r3, [r0, #32]
 8004526:	b90b      	cbnz	r3, 800452c <__swbuf_r+0x12>
 8004528:	f7ff ff0e 	bl	8004348 <__sinit>
 800452c:	69a3      	ldr	r3, [r4, #24]
 800452e:	60a3      	str	r3, [r4, #8]
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	071a      	lsls	r2, r3, #28
 8004534:	d501      	bpl.n	800453a <__swbuf_r+0x20>
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	b943      	cbnz	r3, 800454c <__swbuf_r+0x32>
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 f82b 	bl	8004598 <__swsetup_r>
 8004542:	b118      	cbz	r0, 800454c <__swbuf_r+0x32>
 8004544:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004548:	4638      	mov	r0, r7
 800454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	6922      	ldr	r2, [r4, #16]
 8004550:	1a98      	subs	r0, r3, r2
 8004552:	6963      	ldr	r3, [r4, #20]
 8004554:	b2f6      	uxtb	r6, r6
 8004556:	4283      	cmp	r3, r0
 8004558:	4637      	mov	r7, r6
 800455a:	dc05      	bgt.n	8004568 <__swbuf_r+0x4e>
 800455c:	4621      	mov	r1, r4
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fd36 	bl	8004fd0 <_fflush_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	d1ed      	bne.n	8004544 <__swbuf_r+0x2a>
 8004568:	68a3      	ldr	r3, [r4, #8]
 800456a:	3b01      	subs	r3, #1
 800456c:	60a3      	str	r3, [r4, #8]
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	6022      	str	r2, [r4, #0]
 8004574:	701e      	strb	r6, [r3, #0]
 8004576:	6962      	ldr	r2, [r4, #20]
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	429a      	cmp	r2, r3
 800457c:	d004      	beq.n	8004588 <__swbuf_r+0x6e>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	07db      	lsls	r3, r3, #31
 8004582:	d5e1      	bpl.n	8004548 <__swbuf_r+0x2e>
 8004584:	2e0a      	cmp	r6, #10
 8004586:	d1df      	bne.n	8004548 <__swbuf_r+0x2e>
 8004588:	4621      	mov	r1, r4
 800458a:	4628      	mov	r0, r5
 800458c:	f000 fd20 	bl	8004fd0 <_fflush_r>
 8004590:	2800      	cmp	r0, #0
 8004592:	d0d9      	beq.n	8004548 <__swbuf_r+0x2e>
 8004594:	e7d6      	b.n	8004544 <__swbuf_r+0x2a>
	...

08004598 <__swsetup_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4b29      	ldr	r3, [pc, #164]	@ (8004640 <__swsetup_r+0xa8>)
 800459c:	4605      	mov	r5, r0
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	460c      	mov	r4, r1
 80045a2:	b118      	cbz	r0, 80045ac <__swsetup_r+0x14>
 80045a4:	6a03      	ldr	r3, [r0, #32]
 80045a6:	b90b      	cbnz	r3, 80045ac <__swsetup_r+0x14>
 80045a8:	f7ff fece 	bl	8004348 <__sinit>
 80045ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b0:	0719      	lsls	r1, r3, #28
 80045b2:	d422      	bmi.n	80045fa <__swsetup_r+0x62>
 80045b4:	06da      	lsls	r2, r3, #27
 80045b6:	d407      	bmi.n	80045c8 <__swsetup_r+0x30>
 80045b8:	2209      	movs	r2, #9
 80045ba:	602a      	str	r2, [r5, #0]
 80045bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c0:	81a3      	strh	r3, [r4, #12]
 80045c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045c6:	e033      	b.n	8004630 <__swsetup_r+0x98>
 80045c8:	0758      	lsls	r0, r3, #29
 80045ca:	d512      	bpl.n	80045f2 <__swsetup_r+0x5a>
 80045cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045ce:	b141      	cbz	r1, 80045e2 <__swsetup_r+0x4a>
 80045d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045d4:	4299      	cmp	r1, r3
 80045d6:	d002      	beq.n	80045de <__swsetup_r+0x46>
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f8af 	bl	800473c <_free_r>
 80045de:	2300      	movs	r3, #0
 80045e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b94b      	cbnz	r3, 8004612 <__swsetup_r+0x7a>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004608:	d003      	beq.n	8004612 <__swsetup_r+0x7a>
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 fd2d 	bl	800506c <__smakebuf_r>
 8004612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004616:	f013 0201 	ands.w	r2, r3, #1
 800461a:	d00a      	beq.n	8004632 <__swsetup_r+0x9a>
 800461c:	2200      	movs	r2, #0
 800461e:	60a2      	str	r2, [r4, #8]
 8004620:	6962      	ldr	r2, [r4, #20]
 8004622:	4252      	negs	r2, r2
 8004624:	61a2      	str	r2, [r4, #24]
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	b942      	cbnz	r2, 800463c <__swsetup_r+0xa4>
 800462a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800462e:	d1c5      	bne.n	80045bc <__swsetup_r+0x24>
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	0799      	lsls	r1, r3, #30
 8004634:	bf58      	it	pl
 8004636:	6962      	ldrpl	r2, [r4, #20]
 8004638:	60a2      	str	r2, [r4, #8]
 800463a:	e7f4      	b.n	8004626 <__swsetup_r+0x8e>
 800463c:	2000      	movs	r0, #0
 800463e:	e7f7      	b.n	8004630 <__swsetup_r+0x98>
 8004640:	20000018 	.word	0x20000018

08004644 <memset>:
 8004644:	4402      	add	r2, r0
 8004646:	4603      	mov	r3, r0
 8004648:	4293      	cmp	r3, r2
 800464a:	d100      	bne.n	800464e <memset+0xa>
 800464c:	4770      	bx	lr
 800464e:	f803 1b01 	strb.w	r1, [r3], #1
 8004652:	e7f9      	b.n	8004648 <memset+0x4>

08004654 <_close_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d06      	ldr	r5, [pc, #24]	@ (8004670 <_close_r+0x1c>)
 8004658:	2300      	movs	r3, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fd f88a 	bl	8001778 <_close>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_close_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_close_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	20000270 	.word	0x20000270

08004674 <_lseek_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	@ (8004694 <_lseek_r+0x20>)
 8004678:	4604      	mov	r4, r0
 800467a:	4608      	mov	r0, r1
 800467c:	4611      	mov	r1, r2
 800467e:	2200      	movs	r2, #0
 8004680:	602a      	str	r2, [r5, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	f7fd f89f 	bl	80017c6 <_lseek>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_lseek_r+0x1e>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_lseek_r+0x1e>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	20000270 	.word	0x20000270

08004698 <_read_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d07      	ldr	r5, [pc, #28]	@ (80046b8 <_read_r+0x20>)
 800469c:	4604      	mov	r4, r0
 800469e:	4608      	mov	r0, r1
 80046a0:	4611      	mov	r1, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	602a      	str	r2, [r5, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f7fd f82d 	bl	8001706 <_read>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_read_r+0x1e>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_read_r+0x1e>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000270 	.word	0x20000270

080046bc <_write_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d07      	ldr	r5, [pc, #28]	@ (80046dc <_write_r+0x20>)
 80046c0:	4604      	mov	r4, r0
 80046c2:	4608      	mov	r0, r1
 80046c4:	4611      	mov	r1, r2
 80046c6:	2200      	movs	r2, #0
 80046c8:	602a      	str	r2, [r5, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f7fd f838 	bl	8001740 <_write>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_write_r+0x1e>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b103      	cbz	r3, 80046da <_write_r+0x1e>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	20000270 	.word	0x20000270

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	@ (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000018 	.word	0x20000018

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	@ (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004730 <__libc_init_array+0x44>)
 8004700:	f001 f88e 	bl	8005820 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08005b80 	.word	0x08005b80
 8004728:	08005b80 	.word	0x08005b80
 800472c:	08005b80 	.word	0x08005b80
 8004730:	08005b84 	.word	0x08005b84

08004734 <__retarget_lock_init_recursive>:
 8004734:	4770      	bx	lr

08004736 <__retarget_lock_acquire_recursive>:
 8004736:	4770      	bx	lr

08004738 <__retarget_lock_release_recursive>:
 8004738:	4770      	bx	lr
	...

0800473c <_free_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4605      	mov	r5, r0
 8004740:	2900      	cmp	r1, #0
 8004742:	d041      	beq.n	80047c8 <_free_r+0x8c>
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f0c      	subs	r4, r1, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	18e4      	addlt	r4, r4, r3
 8004750:	f000 f8e0 	bl	8004914 <__malloc_lock>
 8004754:	4a1d      	ldr	r2, [pc, #116]	@ (80047cc <_free_r+0x90>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x2c>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	4628      	mov	r0, r5
 8004760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004764:	f000 b8dc 	b.w	8004920 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x42>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1809      	addeq	r1, r1, r0
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x1e>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x4c>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x42>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1850      	adds	r0, r2, r1
 800478c:	42a0      	cmp	r0, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x6c>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	4401      	add	r1, r0
 8004794:	1850      	adds	r0, r2, r1
 8004796:	4283      	cmp	r3, r0
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x22>
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	4408      	add	r0, r1
 80047a4:	6010      	str	r0, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x22>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x74>
 80047aa:	230c      	movs	r3, #12
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x22>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	1821      	adds	r1, r4, r0
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1809      	addeq	r1, r1, r0
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x22>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	2000027c 	.word	0x2000027c

080047d0 <sbrk_aligned>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004810 <sbrk_aligned+0x40>)
 80047d4:	460c      	mov	r4, r1
 80047d6:	6831      	ldr	r1, [r6, #0]
 80047d8:	4605      	mov	r5, r0
 80047da:	b911      	cbnz	r1, 80047e2 <sbrk_aligned+0x12>
 80047dc:	f000 fca4 	bl	8005128 <_sbrk_r>
 80047e0:	6030      	str	r0, [r6, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 fc9f 	bl	8005128 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d103      	bne.n	80047f6 <sbrk_aligned+0x26>
 80047ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80047f2:	4620      	mov	r0, r4
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	1cc4      	adds	r4, r0, #3
 80047f8:	f024 0403 	bic.w	r4, r4, #3
 80047fc:	42a0      	cmp	r0, r4
 80047fe:	d0f8      	beq.n	80047f2 <sbrk_aligned+0x22>
 8004800:	1a21      	subs	r1, r4, r0
 8004802:	4628      	mov	r0, r5
 8004804:	f000 fc90 	bl	8005128 <_sbrk_r>
 8004808:	3001      	adds	r0, #1
 800480a:	d1f2      	bne.n	80047f2 <sbrk_aligned+0x22>
 800480c:	e7ef      	b.n	80047ee <sbrk_aligned+0x1e>
 800480e:	bf00      	nop
 8004810:	20000278 	.word	0x20000278

08004814 <_malloc_r>:
 8004814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004818:	1ccd      	adds	r5, r1, #3
 800481a:	f025 0503 	bic.w	r5, r5, #3
 800481e:	3508      	adds	r5, #8
 8004820:	2d0c      	cmp	r5, #12
 8004822:	bf38      	it	cc
 8004824:	250c      	movcc	r5, #12
 8004826:	2d00      	cmp	r5, #0
 8004828:	4606      	mov	r6, r0
 800482a:	db01      	blt.n	8004830 <_malloc_r+0x1c>
 800482c:	42a9      	cmp	r1, r5
 800482e:	d904      	bls.n	800483a <_malloc_r+0x26>
 8004830:	230c      	movs	r3, #12
 8004832:	6033      	str	r3, [r6, #0]
 8004834:	2000      	movs	r0, #0
 8004836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800483a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004910 <_malloc_r+0xfc>
 800483e:	f000 f869 	bl	8004914 <__malloc_lock>
 8004842:	f8d8 3000 	ldr.w	r3, [r8]
 8004846:	461c      	mov	r4, r3
 8004848:	bb44      	cbnz	r4, 800489c <_malloc_r+0x88>
 800484a:	4629      	mov	r1, r5
 800484c:	4630      	mov	r0, r6
 800484e:	f7ff ffbf 	bl	80047d0 <sbrk_aligned>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	4604      	mov	r4, r0
 8004856:	d158      	bne.n	800490a <_malloc_r+0xf6>
 8004858:	f8d8 4000 	ldr.w	r4, [r8]
 800485c:	4627      	mov	r7, r4
 800485e:	2f00      	cmp	r7, #0
 8004860:	d143      	bne.n	80048ea <_malloc_r+0xd6>
 8004862:	2c00      	cmp	r4, #0
 8004864:	d04b      	beq.n	80048fe <_malloc_r+0xea>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	4639      	mov	r1, r7
 800486a:	4630      	mov	r0, r6
 800486c:	eb04 0903 	add.w	r9, r4, r3
 8004870:	f000 fc5a 	bl	8005128 <_sbrk_r>
 8004874:	4581      	cmp	r9, r0
 8004876:	d142      	bne.n	80048fe <_malloc_r+0xea>
 8004878:	6821      	ldr	r1, [r4, #0]
 800487a:	1a6d      	subs	r5, r5, r1
 800487c:	4629      	mov	r1, r5
 800487e:	4630      	mov	r0, r6
 8004880:	f7ff ffa6 	bl	80047d0 <sbrk_aligned>
 8004884:	3001      	adds	r0, #1
 8004886:	d03a      	beq.n	80048fe <_malloc_r+0xea>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	442b      	add	r3, r5
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	f8d8 3000 	ldr.w	r3, [r8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	bb62      	cbnz	r2, 80048f0 <_malloc_r+0xdc>
 8004896:	f8c8 7000 	str.w	r7, [r8]
 800489a:	e00f      	b.n	80048bc <_malloc_r+0xa8>
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	1b52      	subs	r2, r2, r5
 80048a0:	d420      	bmi.n	80048e4 <_malloc_r+0xd0>
 80048a2:	2a0b      	cmp	r2, #11
 80048a4:	d917      	bls.n	80048d6 <_malloc_r+0xc2>
 80048a6:	1961      	adds	r1, r4, r5
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	6025      	str	r5, [r4, #0]
 80048ac:	bf18      	it	ne
 80048ae:	6059      	strne	r1, [r3, #4]
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	bf08      	it	eq
 80048b4:	f8c8 1000 	streq.w	r1, [r8]
 80048b8:	5162      	str	r2, [r4, r5]
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f82f 	bl	8004920 <__malloc_unlock>
 80048c2:	f104 000b 	add.w	r0, r4, #11
 80048c6:	1d23      	adds	r3, r4, #4
 80048c8:	f020 0007 	bic.w	r0, r0, #7
 80048cc:	1ac2      	subs	r2, r0, r3
 80048ce:	bf1c      	itt	ne
 80048d0:	1a1b      	subne	r3, r3, r0
 80048d2:	50a3      	strne	r3, [r4, r2]
 80048d4:	e7af      	b.n	8004836 <_malloc_r+0x22>
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	42a3      	cmp	r3, r4
 80048da:	bf0c      	ite	eq
 80048dc:	f8c8 2000 	streq.w	r2, [r8]
 80048e0:	605a      	strne	r2, [r3, #4]
 80048e2:	e7eb      	b.n	80048bc <_malloc_r+0xa8>
 80048e4:	4623      	mov	r3, r4
 80048e6:	6864      	ldr	r4, [r4, #4]
 80048e8:	e7ae      	b.n	8004848 <_malloc_r+0x34>
 80048ea:	463c      	mov	r4, r7
 80048ec:	687f      	ldr	r7, [r7, #4]
 80048ee:	e7b6      	b.n	800485e <_malloc_r+0x4a>
 80048f0:	461a      	mov	r2, r3
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d1fb      	bne.n	80048f0 <_malloc_r+0xdc>
 80048f8:	2300      	movs	r3, #0
 80048fa:	6053      	str	r3, [r2, #4]
 80048fc:	e7de      	b.n	80048bc <_malloc_r+0xa8>
 80048fe:	230c      	movs	r3, #12
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f80c 	bl	8004920 <__malloc_unlock>
 8004908:	e794      	b.n	8004834 <_malloc_r+0x20>
 800490a:	6005      	str	r5, [r0, #0]
 800490c:	e7d6      	b.n	80048bc <_malloc_r+0xa8>
 800490e:	bf00      	nop
 8004910:	2000027c 	.word	0x2000027c

08004914 <__malloc_lock>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__malloc_lock+0x8>)
 8004916:	f7ff bf0e 	b.w	8004736 <__retarget_lock_acquire_recursive>
 800491a:	bf00      	nop
 800491c:	20000274 	.word	0x20000274

08004920 <__malloc_unlock>:
 8004920:	4801      	ldr	r0, [pc, #4]	@ (8004928 <__malloc_unlock+0x8>)
 8004922:	f7ff bf09 	b.w	8004738 <__retarget_lock_release_recursive>
 8004926:	bf00      	nop
 8004928:	20000274 	.word	0x20000274

0800492c <__sfputc_r>:
 800492c:	6893      	ldr	r3, [r2, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	b410      	push	{r4}
 8004934:	6093      	str	r3, [r2, #8]
 8004936:	da08      	bge.n	800494a <__sfputc_r+0x1e>
 8004938:	6994      	ldr	r4, [r2, #24]
 800493a:	42a3      	cmp	r3, r4
 800493c:	db01      	blt.n	8004942 <__sfputc_r+0x16>
 800493e:	290a      	cmp	r1, #10
 8004940:	d103      	bne.n	800494a <__sfputc_r+0x1e>
 8004942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004946:	f7ff bde8 	b.w	800451a <__swbuf_r>
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	1c58      	adds	r0, r3, #1
 800494e:	6010      	str	r0, [r2, #0]
 8004950:	7019      	strb	r1, [r3, #0]
 8004952:	4608      	mov	r0, r1
 8004954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004958:	4770      	bx	lr

0800495a <__sfputs_r>:
 800495a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495c:	4606      	mov	r6, r0
 800495e:	460f      	mov	r7, r1
 8004960:	4614      	mov	r4, r2
 8004962:	18d5      	adds	r5, r2, r3
 8004964:	42ac      	cmp	r4, r5
 8004966:	d101      	bne.n	800496c <__sfputs_r+0x12>
 8004968:	2000      	movs	r0, #0
 800496a:	e007      	b.n	800497c <__sfputs_r+0x22>
 800496c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004970:	463a      	mov	r2, r7
 8004972:	4630      	mov	r0, r6
 8004974:	f7ff ffda 	bl	800492c <__sfputc_r>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d1f3      	bne.n	8004964 <__sfputs_r+0xa>
 800497c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004980 <_vfiprintf_r>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	460d      	mov	r5, r1
 8004986:	b09d      	sub	sp, #116	@ 0x74
 8004988:	4614      	mov	r4, r2
 800498a:	4698      	mov	r8, r3
 800498c:	4606      	mov	r6, r0
 800498e:	b118      	cbz	r0, 8004998 <_vfiprintf_r+0x18>
 8004990:	6a03      	ldr	r3, [r0, #32]
 8004992:	b90b      	cbnz	r3, 8004998 <_vfiprintf_r+0x18>
 8004994:	f7ff fcd8 	bl	8004348 <__sinit>
 8004998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800499a:	07d9      	lsls	r1, r3, #31
 800499c:	d405      	bmi.n	80049aa <_vfiprintf_r+0x2a>
 800499e:	89ab      	ldrh	r3, [r5, #12]
 80049a0:	059a      	lsls	r2, r3, #22
 80049a2:	d402      	bmi.n	80049aa <_vfiprintf_r+0x2a>
 80049a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049a6:	f7ff fec6 	bl	8004736 <__retarget_lock_acquire_recursive>
 80049aa:	89ab      	ldrh	r3, [r5, #12]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	d501      	bpl.n	80049b4 <_vfiprintf_r+0x34>
 80049b0:	692b      	ldr	r3, [r5, #16]
 80049b2:	b99b      	cbnz	r3, 80049dc <_vfiprintf_r+0x5c>
 80049b4:	4629      	mov	r1, r5
 80049b6:	4630      	mov	r0, r6
 80049b8:	f7ff fdee 	bl	8004598 <__swsetup_r>
 80049bc:	b170      	cbz	r0, 80049dc <_vfiprintf_r+0x5c>
 80049be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049c0:	07dc      	lsls	r4, r3, #31
 80049c2:	d504      	bpl.n	80049ce <_vfiprintf_r+0x4e>
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c8:	b01d      	add	sp, #116	@ 0x74
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	0598      	lsls	r0, r3, #22
 80049d2:	d4f7      	bmi.n	80049c4 <_vfiprintf_r+0x44>
 80049d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049d6:	f7ff feaf 	bl	8004738 <__retarget_lock_release_recursive>
 80049da:	e7f3      	b.n	80049c4 <_vfiprintf_r+0x44>
 80049dc:	2300      	movs	r3, #0
 80049de:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e0:	2320      	movs	r3, #32
 80049e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ea:	2330      	movs	r3, #48	@ 0x30
 80049ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b9c <_vfiprintf_r+0x21c>
 80049f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049f4:	f04f 0901 	mov.w	r9, #1
 80049f8:	4623      	mov	r3, r4
 80049fa:	469a      	mov	sl, r3
 80049fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a00:	b10a      	cbz	r2, 8004a06 <_vfiprintf_r+0x86>
 8004a02:	2a25      	cmp	r2, #37	@ 0x25
 8004a04:	d1f9      	bne.n	80049fa <_vfiprintf_r+0x7a>
 8004a06:	ebba 0b04 	subs.w	fp, sl, r4
 8004a0a:	d00b      	beq.n	8004a24 <_vfiprintf_r+0xa4>
 8004a0c:	465b      	mov	r3, fp
 8004a0e:	4622      	mov	r2, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	f7ff ffa1 	bl	800495a <__sfputs_r>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f000 80a7 	beq.w	8004b6c <_vfiprintf_r+0x1ec>
 8004a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a20:	445a      	add	r2, fp
 8004a22:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a24:	f89a 3000 	ldrb.w	r3, [sl]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 809f 	beq.w	8004b6c <_vfiprintf_r+0x1ec>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a38:	f10a 0a01 	add.w	sl, sl, #1
 8004a3c:	9304      	str	r3, [sp, #16]
 8004a3e:	9307      	str	r3, [sp, #28]
 8004a40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a44:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a46:	4654      	mov	r4, sl
 8004a48:	2205      	movs	r2, #5
 8004a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4e:	4853      	ldr	r0, [pc, #332]	@ (8004b9c <_vfiprintf_r+0x21c>)
 8004a50:	f7fb fbc6 	bl	80001e0 <memchr>
 8004a54:	9a04      	ldr	r2, [sp, #16]
 8004a56:	b9d8      	cbnz	r0, 8004a90 <_vfiprintf_r+0x110>
 8004a58:	06d1      	lsls	r1, r2, #27
 8004a5a:	bf44      	itt	mi
 8004a5c:	2320      	movmi	r3, #32
 8004a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a62:	0713      	lsls	r3, r2, #28
 8004a64:	bf44      	itt	mi
 8004a66:	232b      	movmi	r3, #43	@ 0x2b
 8004a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a72:	d015      	beq.n	8004aa0 <_vfiprintf_r+0x120>
 8004a74:	9a07      	ldr	r2, [sp, #28]
 8004a76:	4654      	mov	r4, sl
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f04f 0c0a 	mov.w	ip, #10
 8004a7e:	4621      	mov	r1, r4
 8004a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a84:	3b30      	subs	r3, #48	@ 0x30
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d94b      	bls.n	8004b22 <_vfiprintf_r+0x1a2>
 8004a8a:	b1b0      	cbz	r0, 8004aba <_vfiprintf_r+0x13a>
 8004a8c:	9207      	str	r2, [sp, #28]
 8004a8e:	e014      	b.n	8004aba <_vfiprintf_r+0x13a>
 8004a90:	eba0 0308 	sub.w	r3, r0, r8
 8004a94:	fa09 f303 	lsl.w	r3, r9, r3
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	46a2      	mov	sl, r4
 8004a9e:	e7d2      	b.n	8004a46 <_vfiprintf_r+0xc6>
 8004aa0:	9b03      	ldr	r3, [sp, #12]
 8004aa2:	1d19      	adds	r1, r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	9103      	str	r1, [sp, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bfbb      	ittet	lt
 8004aac:	425b      	neglt	r3, r3
 8004aae:	f042 0202 	orrlt.w	r2, r2, #2
 8004ab2:	9307      	strge	r3, [sp, #28]
 8004ab4:	9307      	strlt	r3, [sp, #28]
 8004ab6:	bfb8      	it	lt
 8004ab8:	9204      	strlt	r2, [sp, #16]
 8004aba:	7823      	ldrb	r3, [r4, #0]
 8004abc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004abe:	d10a      	bne.n	8004ad6 <_vfiprintf_r+0x156>
 8004ac0:	7863      	ldrb	r3, [r4, #1]
 8004ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ac4:	d132      	bne.n	8004b2c <_vfiprintf_r+0x1ac>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	1d1a      	adds	r2, r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	9203      	str	r2, [sp, #12]
 8004ace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ad2:	3402      	adds	r4, #2
 8004ad4:	9305      	str	r3, [sp, #20]
 8004ad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004bac <_vfiprintf_r+0x22c>
 8004ada:	7821      	ldrb	r1, [r4, #0]
 8004adc:	2203      	movs	r2, #3
 8004ade:	4650      	mov	r0, sl
 8004ae0:	f7fb fb7e 	bl	80001e0 <memchr>
 8004ae4:	b138      	cbz	r0, 8004af6 <_vfiprintf_r+0x176>
 8004ae6:	9b04      	ldr	r3, [sp, #16]
 8004ae8:	eba0 000a 	sub.w	r0, r0, sl
 8004aec:	2240      	movs	r2, #64	@ 0x40
 8004aee:	4082      	lsls	r2, r0
 8004af0:	4313      	orrs	r3, r2
 8004af2:	3401      	adds	r4, #1
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afa:	4829      	ldr	r0, [pc, #164]	@ (8004ba0 <_vfiprintf_r+0x220>)
 8004afc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b00:	2206      	movs	r2, #6
 8004b02:	f7fb fb6d 	bl	80001e0 <memchr>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d03f      	beq.n	8004b8a <_vfiprintf_r+0x20a>
 8004b0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ba4 <_vfiprintf_r+0x224>)
 8004b0c:	bb1b      	cbnz	r3, 8004b56 <_vfiprintf_r+0x1d6>
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	3308      	adds	r3, #8
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1c:	443b      	add	r3, r7
 8004b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b20:	e76a      	b.n	80049f8 <_vfiprintf_r+0x78>
 8004b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b26:	460c      	mov	r4, r1
 8004b28:	2001      	movs	r0, #1
 8004b2a:	e7a8      	b.n	8004a7e <_vfiprintf_r+0xfe>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	3401      	adds	r4, #1
 8004b30:	9305      	str	r3, [sp, #20]
 8004b32:	4619      	mov	r1, r3
 8004b34:	f04f 0c0a 	mov.w	ip, #10
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b3e:	3a30      	subs	r2, #48	@ 0x30
 8004b40:	2a09      	cmp	r2, #9
 8004b42:	d903      	bls.n	8004b4c <_vfiprintf_r+0x1cc>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0c6      	beq.n	8004ad6 <_vfiprintf_r+0x156>
 8004b48:	9105      	str	r1, [sp, #20]
 8004b4a:	e7c4      	b.n	8004ad6 <_vfiprintf_r+0x156>
 8004b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b50:	4604      	mov	r4, r0
 8004b52:	2301      	movs	r3, #1
 8004b54:	e7f0      	b.n	8004b38 <_vfiprintf_r+0x1b8>
 8004b56:	ab03      	add	r3, sp, #12
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ba8 <_vfiprintf_r+0x228>)
 8004b5e:	a904      	add	r1, sp, #16
 8004b60:	4630      	mov	r0, r6
 8004b62:	f3af 8000 	nop.w
 8004b66:	4607      	mov	r7, r0
 8004b68:	1c78      	adds	r0, r7, #1
 8004b6a:	d1d6      	bne.n	8004b1a <_vfiprintf_r+0x19a>
 8004b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b6e:	07d9      	lsls	r1, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <_vfiprintf_r+0x1fe>
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	059a      	lsls	r2, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_vfiprintf_r+0x1fe>
 8004b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b7a:	f7ff fddd 	bl	8004738 <__retarget_lock_release_recursive>
 8004b7e:	89ab      	ldrh	r3, [r5, #12]
 8004b80:	065b      	lsls	r3, r3, #25
 8004b82:	f53f af1f 	bmi.w	80049c4 <_vfiprintf_r+0x44>
 8004b86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b88:	e71e      	b.n	80049c8 <_vfiprintf_r+0x48>
 8004b8a:	ab03      	add	r3, sp, #12
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	462a      	mov	r2, r5
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <_vfiprintf_r+0x228>)
 8004b92:	a904      	add	r1, sp, #16
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f879 	bl	8004c8c <_printf_i>
 8004b9a:	e7e4      	b.n	8004b66 <_vfiprintf_r+0x1e6>
 8004b9c:	08005ac4 	.word	0x08005ac4
 8004ba0:	08005ace 	.word	0x08005ace
 8004ba4:	00000000 	.word	0x00000000
 8004ba8:	0800495b 	.word	0x0800495b
 8004bac:	08005aca 	.word	0x08005aca

08004bb0 <_printf_common>:
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	4698      	mov	r8, r3
 8004bb8:	688a      	ldr	r2, [r1, #8]
 8004bba:	690b      	ldr	r3, [r1, #16]
 8004bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	bfb8      	it	lt
 8004bc4:	4613      	movlt	r3, r2
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bcc:	4607      	mov	r7, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	b10a      	cbz	r2, 8004bd6 <_printf_common+0x26>
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	0699      	lsls	r1, r3, #26
 8004bda:	bf42      	ittt	mi
 8004bdc:	6833      	ldrmi	r3, [r6, #0]
 8004bde:	3302      	addmi	r3, #2
 8004be0:	6033      	strmi	r3, [r6, #0]
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	f015 0506 	ands.w	r5, r5, #6
 8004be8:	d106      	bne.n	8004bf8 <_printf_common+0x48>
 8004bea:	f104 0a19 	add.w	sl, r4, #25
 8004bee:	68e3      	ldr	r3, [r4, #12]
 8004bf0:	6832      	ldr	r2, [r6, #0]
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	42ab      	cmp	r3, r5
 8004bf6:	dc26      	bgt.n	8004c46 <_printf_common+0x96>
 8004bf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	3b00      	subs	r3, #0
 8004c00:	bf18      	it	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	0692      	lsls	r2, r2, #26
 8004c06:	d42b      	bmi.n	8004c60 <_printf_common+0xb0>
 8004c08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	4638      	mov	r0, r7
 8004c10:	47c8      	blx	r9
 8004c12:	3001      	adds	r0, #1
 8004c14:	d01e      	beq.n	8004c54 <_printf_common+0xa4>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	6922      	ldr	r2, [r4, #16]
 8004c1a:	f003 0306 	and.w	r3, r3, #6
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	bf02      	ittt	eq
 8004c22:	68e5      	ldreq	r5, [r4, #12]
 8004c24:	6833      	ldreq	r3, [r6, #0]
 8004c26:	1aed      	subeq	r5, r5, r3
 8004c28:	68a3      	ldr	r3, [r4, #8]
 8004c2a:	bf0c      	ite	eq
 8004c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c30:	2500      	movne	r5, #0
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bfc4      	itt	gt
 8004c36:	1a9b      	subgt	r3, r3, r2
 8004c38:	18ed      	addgt	r5, r5, r3
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	341a      	adds	r4, #26
 8004c3e:	42b5      	cmp	r5, r6
 8004c40:	d11a      	bne.n	8004c78 <_printf_common+0xc8>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e008      	b.n	8004c58 <_printf_common+0xa8>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4652      	mov	r2, sl
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	47c8      	blx	r9
 8004c50:	3001      	adds	r0, #1
 8004c52:	d103      	bne.n	8004c5c <_printf_common+0xac>
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	e7c6      	b.n	8004bee <_printf_common+0x3e>
 8004c60:	18e1      	adds	r1, r4, r3
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	2030      	movs	r0, #48	@ 0x30
 8004c66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c6a:	4422      	add	r2, r4
 8004c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c74:	3302      	adds	r3, #2
 8004c76:	e7c7      	b.n	8004c08 <_printf_common+0x58>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c8      	blx	r9
 8004c82:	3001      	adds	r0, #1
 8004c84:	d0e6      	beq.n	8004c54 <_printf_common+0xa4>
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7d9      	b.n	8004c3e <_printf_common+0x8e>
	...

08004c8c <_printf_i>:
 8004c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	7e0f      	ldrb	r7, [r1, #24]
 8004c92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c94:	2f78      	cmp	r7, #120	@ 0x78
 8004c96:	4691      	mov	r9, r2
 8004c98:	4680      	mov	r8, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	469a      	mov	sl, r3
 8004c9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ca2:	d807      	bhi.n	8004cb4 <_printf_i+0x28>
 8004ca4:	2f62      	cmp	r7, #98	@ 0x62
 8004ca6:	d80a      	bhi.n	8004cbe <_printf_i+0x32>
 8004ca8:	2f00      	cmp	r7, #0
 8004caa:	f000 80d1 	beq.w	8004e50 <_printf_i+0x1c4>
 8004cae:	2f58      	cmp	r7, #88	@ 0x58
 8004cb0:	f000 80b8 	beq.w	8004e24 <_printf_i+0x198>
 8004cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cbc:	e03a      	b.n	8004d34 <_printf_i+0xa8>
 8004cbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cc2:	2b15      	cmp	r3, #21
 8004cc4:	d8f6      	bhi.n	8004cb4 <_printf_i+0x28>
 8004cc6:	a101      	add	r1, pc, #4	@ (adr r1, 8004ccc <_printf_i+0x40>)
 8004cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004cb5 	.word	0x08004cb5
 8004cd8:	08004cb5 	.word	0x08004cb5
 8004cdc:	08004cb5 	.word	0x08004cb5
 8004ce0:	08004cb5 	.word	0x08004cb5
 8004ce4:	08004d39 	.word	0x08004d39
 8004ce8:	08004cb5 	.word	0x08004cb5
 8004cec:	08004cb5 	.word	0x08004cb5
 8004cf0:	08004cb5 	.word	0x08004cb5
 8004cf4:	08004cb5 	.word	0x08004cb5
 8004cf8:	08004e37 	.word	0x08004e37
 8004cfc:	08004d63 	.word	0x08004d63
 8004d00:	08004df1 	.word	0x08004df1
 8004d04:	08004cb5 	.word	0x08004cb5
 8004d08:	08004cb5 	.word	0x08004cb5
 8004d0c:	08004e59 	.word	0x08004e59
 8004d10:	08004cb5 	.word	0x08004cb5
 8004d14:	08004d63 	.word	0x08004d63
 8004d18:	08004cb5 	.word	0x08004cb5
 8004d1c:	08004cb5 	.word	0x08004cb5
 8004d20:	08004df9 	.word	0x08004df9
 8004d24:	6833      	ldr	r3, [r6, #0]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6032      	str	r2, [r6, #0]
 8004d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d34:	2301      	movs	r3, #1
 8004d36:	e09c      	b.n	8004e72 <_printf_i+0x1e6>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	6031      	str	r1, [r6, #0]
 8004d40:	0606      	lsls	r6, r0, #24
 8004d42:	d501      	bpl.n	8004d48 <_printf_i+0xbc>
 8004d44:	681d      	ldr	r5, [r3, #0]
 8004d46:	e003      	b.n	8004d50 <_printf_i+0xc4>
 8004d48:	0645      	lsls	r5, r0, #25
 8004d4a:	d5fb      	bpl.n	8004d44 <_printf_i+0xb8>
 8004d4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	da03      	bge.n	8004d5c <_printf_i+0xd0>
 8004d54:	232d      	movs	r3, #45	@ 0x2d
 8004d56:	426d      	negs	r5, r5
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5c:	4858      	ldr	r0, [pc, #352]	@ (8004ec0 <_printf_i+0x234>)
 8004d5e:	230a      	movs	r3, #10
 8004d60:	e011      	b.n	8004d86 <_printf_i+0xfa>
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	6833      	ldr	r3, [r6, #0]
 8004d66:	0608      	lsls	r0, r1, #24
 8004d68:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d6c:	d402      	bmi.n	8004d74 <_printf_i+0xe8>
 8004d6e:	0649      	lsls	r1, r1, #25
 8004d70:	bf48      	it	mi
 8004d72:	b2ad      	uxthmi	r5, r5
 8004d74:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d76:	4852      	ldr	r0, [pc, #328]	@ (8004ec0 <_printf_i+0x234>)
 8004d78:	6033      	str	r3, [r6, #0]
 8004d7a:	bf14      	ite	ne
 8004d7c:	230a      	movne	r3, #10
 8004d7e:	2308      	moveq	r3, #8
 8004d80:	2100      	movs	r1, #0
 8004d82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d86:	6866      	ldr	r6, [r4, #4]
 8004d88:	60a6      	str	r6, [r4, #8]
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	db05      	blt.n	8004d9a <_printf_i+0x10e>
 8004d8e:	6821      	ldr	r1, [r4, #0]
 8004d90:	432e      	orrs	r6, r5
 8004d92:	f021 0104 	bic.w	r1, r1, #4
 8004d96:	6021      	str	r1, [r4, #0]
 8004d98:	d04b      	beq.n	8004e32 <_printf_i+0x1a6>
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004da0:	fb03 5711 	mls	r7, r3, r1, r5
 8004da4:	5dc7      	ldrb	r7, [r0, r7]
 8004da6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004daa:	462f      	mov	r7, r5
 8004dac:	42bb      	cmp	r3, r7
 8004dae:	460d      	mov	r5, r1
 8004db0:	d9f4      	bls.n	8004d9c <_printf_i+0x110>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d10b      	bne.n	8004dce <_printf_i+0x142>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	07df      	lsls	r7, r3, #31
 8004dba:	d508      	bpl.n	8004dce <_printf_i+0x142>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	6861      	ldr	r1, [r4, #4]
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	bfde      	ittt	le
 8004dc4:	2330      	movle	r3, #48	@ 0x30
 8004dc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004dce:	1b92      	subs	r2, r2, r6
 8004dd0:	6122      	str	r2, [r4, #16]
 8004dd2:	f8cd a000 	str.w	sl, [sp]
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	aa03      	add	r2, sp, #12
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4640      	mov	r0, r8
 8004dde:	f7ff fee7 	bl	8004bb0 <_printf_common>
 8004de2:	3001      	adds	r0, #1
 8004de4:	d14a      	bne.n	8004e7c <_printf_i+0x1f0>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dea:	b004      	add	sp, #16
 8004dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f043 0320 	orr.w	r3, r3, #32
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	4832      	ldr	r0, [pc, #200]	@ (8004ec4 <_printf_i+0x238>)
 8004dfa:	2778      	movs	r7, #120	@ 0x78
 8004dfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	6831      	ldr	r1, [r6, #0]
 8004e04:	061f      	lsls	r7, r3, #24
 8004e06:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e0a:	d402      	bmi.n	8004e12 <_printf_i+0x186>
 8004e0c:	065f      	lsls	r7, r3, #25
 8004e0e:	bf48      	it	mi
 8004e10:	b2ad      	uxthmi	r5, r5
 8004e12:	6031      	str	r1, [r6, #0]
 8004e14:	07d9      	lsls	r1, r3, #31
 8004e16:	bf44      	itt	mi
 8004e18:	f043 0320 	orrmi.w	r3, r3, #32
 8004e1c:	6023      	strmi	r3, [r4, #0]
 8004e1e:	b11d      	cbz	r5, 8004e28 <_printf_i+0x19c>
 8004e20:	2310      	movs	r3, #16
 8004e22:	e7ad      	b.n	8004d80 <_printf_i+0xf4>
 8004e24:	4826      	ldr	r0, [pc, #152]	@ (8004ec0 <_printf_i+0x234>)
 8004e26:	e7e9      	b.n	8004dfc <_printf_i+0x170>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	f023 0320 	bic.w	r3, r3, #32
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	e7f6      	b.n	8004e20 <_printf_i+0x194>
 8004e32:	4616      	mov	r6, r2
 8004e34:	e7bd      	b.n	8004db2 <_printf_i+0x126>
 8004e36:	6833      	ldr	r3, [r6, #0]
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	6961      	ldr	r1, [r4, #20]
 8004e3c:	1d18      	adds	r0, r3, #4
 8004e3e:	6030      	str	r0, [r6, #0]
 8004e40:	062e      	lsls	r6, r5, #24
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	d501      	bpl.n	8004e4a <_printf_i+0x1be>
 8004e46:	6019      	str	r1, [r3, #0]
 8004e48:	e002      	b.n	8004e50 <_printf_i+0x1c4>
 8004e4a:	0668      	lsls	r0, r5, #25
 8004e4c:	d5fb      	bpl.n	8004e46 <_printf_i+0x1ba>
 8004e4e:	8019      	strh	r1, [r3, #0]
 8004e50:	2300      	movs	r3, #0
 8004e52:	6123      	str	r3, [r4, #16]
 8004e54:	4616      	mov	r6, r2
 8004e56:	e7bc      	b.n	8004dd2 <_printf_i+0x146>
 8004e58:	6833      	ldr	r3, [r6, #0]
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	6032      	str	r2, [r6, #0]
 8004e5e:	681e      	ldr	r6, [r3, #0]
 8004e60:	6862      	ldr	r2, [r4, #4]
 8004e62:	2100      	movs	r1, #0
 8004e64:	4630      	mov	r0, r6
 8004e66:	f7fb f9bb 	bl	80001e0 <memchr>
 8004e6a:	b108      	cbz	r0, 8004e70 <_printf_i+0x1e4>
 8004e6c:	1b80      	subs	r0, r0, r6
 8004e6e:	6060      	str	r0, [r4, #4]
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	2300      	movs	r3, #0
 8004e76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e7a:	e7aa      	b.n	8004dd2 <_printf_i+0x146>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	4632      	mov	r2, r6
 8004e80:	4649      	mov	r1, r9
 8004e82:	4640      	mov	r0, r8
 8004e84:	47d0      	blx	sl
 8004e86:	3001      	adds	r0, #1
 8004e88:	d0ad      	beq.n	8004de6 <_printf_i+0x15a>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	079b      	lsls	r3, r3, #30
 8004e8e:	d413      	bmi.n	8004eb8 <_printf_i+0x22c>
 8004e90:	68e0      	ldr	r0, [r4, #12]
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	4298      	cmp	r0, r3
 8004e96:	bfb8      	it	lt
 8004e98:	4618      	movlt	r0, r3
 8004e9a:	e7a6      	b.n	8004dea <_printf_i+0x15e>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	47d0      	blx	sl
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d09d      	beq.n	8004de6 <_printf_i+0x15a>
 8004eaa:	3501      	adds	r5, #1
 8004eac:	68e3      	ldr	r3, [r4, #12]
 8004eae:	9903      	ldr	r1, [sp, #12]
 8004eb0:	1a5b      	subs	r3, r3, r1
 8004eb2:	42ab      	cmp	r3, r5
 8004eb4:	dcf2      	bgt.n	8004e9c <_printf_i+0x210>
 8004eb6:	e7eb      	b.n	8004e90 <_printf_i+0x204>
 8004eb8:	2500      	movs	r5, #0
 8004eba:	f104 0619 	add.w	r6, r4, #25
 8004ebe:	e7f5      	b.n	8004eac <_printf_i+0x220>
 8004ec0:	08005ad5 	.word	0x08005ad5
 8004ec4:	08005ae6 	.word	0x08005ae6

08004ec8 <__sflush_r>:
 8004ec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed0:	0716      	lsls	r6, r2, #28
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	d454      	bmi.n	8004f82 <__sflush_r+0xba>
 8004ed8:	684b      	ldr	r3, [r1, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	dc02      	bgt.n	8004ee4 <__sflush_r+0x1c>
 8004ede:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dd48      	ble.n	8004f76 <__sflush_r+0xae>
 8004ee4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	d045      	beq.n	8004f76 <__sflush_r+0xae>
 8004eea:	2300      	movs	r3, #0
 8004eec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ef0:	682f      	ldr	r7, [r5, #0]
 8004ef2:	6a21      	ldr	r1, [r4, #32]
 8004ef4:	602b      	str	r3, [r5, #0]
 8004ef6:	d030      	beq.n	8004f5a <__sflush_r+0x92>
 8004ef8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	0759      	lsls	r1, r3, #29
 8004efe:	d505      	bpl.n	8004f0c <__sflush_r+0x44>
 8004f00:	6863      	ldr	r3, [r4, #4]
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f06:	b10b      	cbz	r3, 8004f0c <__sflush_r+0x44>
 8004f08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f10:	6a21      	ldr	r1, [r4, #32]
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b0      	blx	r6
 8004f16:	1c43      	adds	r3, r0, #1
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	d106      	bne.n	8004f2a <__sflush_r+0x62>
 8004f1c:	6829      	ldr	r1, [r5, #0]
 8004f1e:	291d      	cmp	r1, #29
 8004f20:	d82b      	bhi.n	8004f7a <__sflush_r+0xb2>
 8004f22:	4a2a      	ldr	r2, [pc, #168]	@ (8004fcc <__sflush_r+0x104>)
 8004f24:	40ca      	lsrs	r2, r1
 8004f26:	07d6      	lsls	r6, r2, #31
 8004f28:	d527      	bpl.n	8004f7a <__sflush_r+0xb2>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	6062      	str	r2, [r4, #4]
 8004f2e:	04d9      	lsls	r1, r3, #19
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	6022      	str	r2, [r4, #0]
 8004f34:	d504      	bpl.n	8004f40 <__sflush_r+0x78>
 8004f36:	1c42      	adds	r2, r0, #1
 8004f38:	d101      	bne.n	8004f3e <__sflush_r+0x76>
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	b903      	cbnz	r3, 8004f40 <__sflush_r+0x78>
 8004f3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f42:	602f      	str	r7, [r5, #0]
 8004f44:	b1b9      	cbz	r1, 8004f76 <__sflush_r+0xae>
 8004f46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f4a:	4299      	cmp	r1, r3
 8004f4c:	d002      	beq.n	8004f54 <__sflush_r+0x8c>
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7ff fbf4 	bl	800473c <_free_r>
 8004f54:	2300      	movs	r3, #0
 8004f56:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f58:	e00d      	b.n	8004f76 <__sflush_r+0xae>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b0      	blx	r6
 8004f60:	4602      	mov	r2, r0
 8004f62:	1c50      	adds	r0, r2, #1
 8004f64:	d1c9      	bne.n	8004efa <__sflush_r+0x32>
 8004f66:	682b      	ldr	r3, [r5, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0c6      	beq.n	8004efa <__sflush_r+0x32>
 8004f6c:	2b1d      	cmp	r3, #29
 8004f6e:	d001      	beq.n	8004f74 <__sflush_r+0xac>
 8004f70:	2b16      	cmp	r3, #22
 8004f72:	d11e      	bne.n	8004fb2 <__sflush_r+0xea>
 8004f74:	602f      	str	r7, [r5, #0]
 8004f76:	2000      	movs	r0, #0
 8004f78:	e022      	b.n	8004fc0 <__sflush_r+0xf8>
 8004f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	e01b      	b.n	8004fba <__sflush_r+0xf2>
 8004f82:	690f      	ldr	r7, [r1, #16]
 8004f84:	2f00      	cmp	r7, #0
 8004f86:	d0f6      	beq.n	8004f76 <__sflush_r+0xae>
 8004f88:	0793      	lsls	r3, r2, #30
 8004f8a:	680e      	ldr	r6, [r1, #0]
 8004f8c:	bf08      	it	eq
 8004f8e:	694b      	ldreq	r3, [r1, #20]
 8004f90:	600f      	str	r7, [r1, #0]
 8004f92:	bf18      	it	ne
 8004f94:	2300      	movne	r3, #0
 8004f96:	eba6 0807 	sub.w	r8, r6, r7
 8004f9a:	608b      	str	r3, [r1, #8]
 8004f9c:	f1b8 0f00 	cmp.w	r8, #0
 8004fa0:	dde9      	ble.n	8004f76 <__sflush_r+0xae>
 8004fa2:	6a21      	ldr	r1, [r4, #32]
 8004fa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004fa6:	4643      	mov	r3, r8
 8004fa8:	463a      	mov	r2, r7
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b0      	blx	r6
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	dc08      	bgt.n	8004fc4 <__sflush_r+0xfc>
 8004fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc4:	4407      	add	r7, r0
 8004fc6:	eba8 0800 	sub.w	r8, r8, r0
 8004fca:	e7e7      	b.n	8004f9c <__sflush_r+0xd4>
 8004fcc:	20400001 	.word	0x20400001

08004fd0 <_fflush_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	690b      	ldr	r3, [r1, #16]
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	b913      	cbnz	r3, 8004fe0 <_fflush_r+0x10>
 8004fda:	2500      	movs	r5, #0
 8004fdc:	4628      	mov	r0, r5
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	b118      	cbz	r0, 8004fea <_fflush_r+0x1a>
 8004fe2:	6a03      	ldr	r3, [r0, #32]
 8004fe4:	b90b      	cbnz	r3, 8004fea <_fflush_r+0x1a>
 8004fe6:	f7ff f9af 	bl	8004348 <__sinit>
 8004fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f3      	beq.n	8004fda <_fflush_r+0xa>
 8004ff2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ff4:	07d0      	lsls	r0, r2, #31
 8004ff6:	d404      	bmi.n	8005002 <_fflush_r+0x32>
 8004ff8:	0599      	lsls	r1, r3, #22
 8004ffa:	d402      	bmi.n	8005002 <_fflush_r+0x32>
 8004ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffe:	f7ff fb9a 	bl	8004736 <__retarget_lock_acquire_recursive>
 8005002:	4628      	mov	r0, r5
 8005004:	4621      	mov	r1, r4
 8005006:	f7ff ff5f 	bl	8004ec8 <__sflush_r>
 800500a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800500c:	07da      	lsls	r2, r3, #31
 800500e:	4605      	mov	r5, r0
 8005010:	d4e4      	bmi.n	8004fdc <_fflush_r+0xc>
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	059b      	lsls	r3, r3, #22
 8005016:	d4e1      	bmi.n	8004fdc <_fflush_r+0xc>
 8005018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800501a:	f7ff fb8d 	bl	8004738 <__retarget_lock_release_recursive>
 800501e:	e7dd      	b.n	8004fdc <_fflush_r+0xc>

08005020 <__swhatbuf_r>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	460c      	mov	r4, r1
 8005024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005028:	2900      	cmp	r1, #0
 800502a:	b096      	sub	sp, #88	@ 0x58
 800502c:	4615      	mov	r5, r2
 800502e:	461e      	mov	r6, r3
 8005030:	da0d      	bge.n	800504e <__swhatbuf_r+0x2e>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	bf14      	ite	ne
 800503e:	2340      	movne	r3, #64	@ 0x40
 8005040:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005044:	2000      	movs	r0, #0
 8005046:	6031      	str	r1, [r6, #0]
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	b016      	add	sp, #88	@ 0x58
 800504c:	bd70      	pop	{r4, r5, r6, pc}
 800504e:	466a      	mov	r2, sp
 8005050:	f000 f848 	bl	80050e4 <_fstat_r>
 8005054:	2800      	cmp	r0, #0
 8005056:	dbec      	blt.n	8005032 <__swhatbuf_r+0x12>
 8005058:	9901      	ldr	r1, [sp, #4]
 800505a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800505e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005062:	4259      	negs	r1, r3
 8005064:	4159      	adcs	r1, r3
 8005066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800506a:	e7eb      	b.n	8005044 <__swhatbuf_r+0x24>

0800506c <__smakebuf_r>:
 800506c:	898b      	ldrh	r3, [r1, #12]
 800506e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005070:	079d      	lsls	r5, r3, #30
 8005072:	4606      	mov	r6, r0
 8005074:	460c      	mov	r4, r1
 8005076:	d507      	bpl.n	8005088 <__smakebuf_r+0x1c>
 8005078:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	6123      	str	r3, [r4, #16]
 8005080:	2301      	movs	r3, #1
 8005082:	6163      	str	r3, [r4, #20]
 8005084:	b003      	add	sp, #12
 8005086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005088:	ab01      	add	r3, sp, #4
 800508a:	466a      	mov	r2, sp
 800508c:	f7ff ffc8 	bl	8005020 <__swhatbuf_r>
 8005090:	9f00      	ldr	r7, [sp, #0]
 8005092:	4605      	mov	r5, r0
 8005094:	4639      	mov	r1, r7
 8005096:	4630      	mov	r0, r6
 8005098:	f7ff fbbc 	bl	8004814 <_malloc_r>
 800509c:	b948      	cbnz	r0, 80050b2 <__smakebuf_r+0x46>
 800509e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a2:	059a      	lsls	r2, r3, #22
 80050a4:	d4ee      	bmi.n	8005084 <__smakebuf_r+0x18>
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	e7e2      	b.n	8005078 <__smakebuf_r+0xc>
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	6020      	str	r0, [r4, #0]
 80050b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050c2:	b15b      	cbz	r3, 80050dc <__smakebuf_r+0x70>
 80050c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f81d 	bl	8005108 <_isatty_r>
 80050ce:	b128      	cbz	r0, 80050dc <__smakebuf_r+0x70>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	431d      	orrs	r5, r3
 80050e0:	81a5      	strh	r5, [r4, #12]
 80050e2:	e7cf      	b.n	8005084 <__smakebuf_r+0x18>

080050e4 <_fstat_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d07      	ldr	r5, [pc, #28]	@ (8005104 <_fstat_r+0x20>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	f7fc fb4d 	bl	8001790 <_fstat>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	d102      	bne.n	8005100 <_fstat_r+0x1c>
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	b103      	cbz	r3, 8005100 <_fstat_r+0x1c>
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	bf00      	nop
 8005104:	20000270 	.word	0x20000270

08005108 <_isatty_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4d06      	ldr	r5, [pc, #24]	@ (8005124 <_isatty_r+0x1c>)
 800510c:	2300      	movs	r3, #0
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	f7fc fb4c 	bl	80017b0 <_isatty>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_isatty_r+0x1a>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_isatty_r+0x1a>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20000270 	.word	0x20000270

08005128 <_sbrk_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4d06      	ldr	r5, [pc, #24]	@ (8005144 <_sbrk_r+0x1c>)
 800512c:	2300      	movs	r3, #0
 800512e:	4604      	mov	r4, r0
 8005130:	4608      	mov	r0, r1
 8005132:	602b      	str	r3, [r5, #0]
 8005134:	f7fc fb54 	bl	80017e0 <_sbrk>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_sbrk_r+0x1a>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_sbrk_r+0x1a>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	20000270 	.word	0x20000270

08005148 <atan2>:
 8005148:	f000 b902 	b.w	8005350 <__ieee754_atan2>

0800514c <sqrt>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	ed2d 8b02 	vpush	{d8}
 8005152:	ec55 4b10 	vmov	r4, r5, d0
 8005156:	f000 f825 	bl	80051a4 <__ieee754_sqrt>
 800515a:	4622      	mov	r2, r4
 800515c:	462b      	mov	r3, r5
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	eeb0 8a40 	vmov.f32	s16, s0
 8005166:	eef0 8a60 	vmov.f32	s17, s1
 800516a:	f7fb fcdf 	bl	8000b2c <__aeabi_dcmpun>
 800516e:	b990      	cbnz	r0, 8005196 <sqrt+0x4a>
 8005170:	2200      	movs	r2, #0
 8005172:	2300      	movs	r3, #0
 8005174:	4620      	mov	r0, r4
 8005176:	4629      	mov	r1, r5
 8005178:	f7fb fcb0 	bl	8000adc <__aeabi_dcmplt>
 800517c:	b158      	cbz	r0, 8005196 <sqrt+0x4a>
 800517e:	f7ff faaf 	bl	80046e0 <__errno>
 8005182:	2321      	movs	r3, #33	@ 0x21
 8005184:	6003      	str	r3, [r0, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	2300      	movs	r3, #0
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	f7fb fb5d 	bl	800084c <__aeabi_ddiv>
 8005192:	ec41 0b18 	vmov	d8, r0, r1
 8005196:	eeb0 0a48 	vmov.f32	s0, s16
 800519a:	eef0 0a68 	vmov.f32	s1, s17
 800519e:	ecbd 8b02 	vpop	{d8}
 80051a2:	bd38      	pop	{r3, r4, r5, pc}

080051a4 <__ieee754_sqrt>:
 80051a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	4a66      	ldr	r2, [pc, #408]	@ (8005344 <__ieee754_sqrt+0x1a0>)
 80051aa:	ec55 4b10 	vmov	r4, r5, d0
 80051ae:	43aa      	bics	r2, r5
 80051b0:	462b      	mov	r3, r5
 80051b2:	4621      	mov	r1, r4
 80051b4:	d110      	bne.n	80051d8 <__ieee754_sqrt+0x34>
 80051b6:	4622      	mov	r2, r4
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb fa1c 	bl	80005f8 <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4620      	mov	r0, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7fb f860 	bl	800028c <__adddf3>
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	ec45 4b10 	vmov	d0, r4, r5
 80051d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	2d00      	cmp	r5, #0
 80051da:	dc0e      	bgt.n	80051fa <__ieee754_sqrt+0x56>
 80051dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80051e0:	4322      	orrs	r2, r4
 80051e2:	d0f5      	beq.n	80051d0 <__ieee754_sqrt+0x2c>
 80051e4:	b19d      	cbz	r5, 800520e <__ieee754_sqrt+0x6a>
 80051e6:	4622      	mov	r2, r4
 80051e8:	4620      	mov	r0, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	f7fb f84c 	bl	8000288 <__aeabi_dsub>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	f7fb fb2a 	bl	800084c <__aeabi_ddiv>
 80051f8:	e7e8      	b.n	80051cc <__ieee754_sqrt+0x28>
 80051fa:	152a      	asrs	r2, r5, #20
 80051fc:	d115      	bne.n	800522a <__ieee754_sqrt+0x86>
 80051fe:	2000      	movs	r0, #0
 8005200:	e009      	b.n	8005216 <__ieee754_sqrt+0x72>
 8005202:	0acb      	lsrs	r3, r1, #11
 8005204:	3a15      	subs	r2, #21
 8005206:	0549      	lsls	r1, r1, #21
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0fa      	beq.n	8005202 <__ieee754_sqrt+0x5e>
 800520c:	e7f7      	b.n	80051fe <__ieee754_sqrt+0x5a>
 800520e:	462a      	mov	r2, r5
 8005210:	e7fa      	b.n	8005208 <__ieee754_sqrt+0x64>
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	3001      	adds	r0, #1
 8005216:	02dc      	lsls	r4, r3, #11
 8005218:	d5fb      	bpl.n	8005212 <__ieee754_sqrt+0x6e>
 800521a:	1e44      	subs	r4, r0, #1
 800521c:	1b12      	subs	r2, r2, r4
 800521e:	f1c0 0420 	rsb	r4, r0, #32
 8005222:	fa21 f404 	lsr.w	r4, r1, r4
 8005226:	4323      	orrs	r3, r4
 8005228:	4081      	lsls	r1, r0
 800522a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800522e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005236:	07d2      	lsls	r2, r2, #31
 8005238:	bf5c      	itt	pl
 800523a:	005b      	lslpl	r3, r3, #1
 800523c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005240:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005244:	bf58      	it	pl
 8005246:	0049      	lslpl	r1, r1, #1
 8005248:	2600      	movs	r6, #0
 800524a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800524e:	107f      	asrs	r7, r7, #1
 8005250:	0049      	lsls	r1, r1, #1
 8005252:	2016      	movs	r0, #22
 8005254:	4632      	mov	r2, r6
 8005256:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800525a:	1915      	adds	r5, r2, r4
 800525c:	429d      	cmp	r5, r3
 800525e:	bfde      	ittt	le
 8005260:	192a      	addle	r2, r5, r4
 8005262:	1b5b      	suble	r3, r3, r5
 8005264:	1936      	addle	r6, r6, r4
 8005266:	0fcd      	lsrs	r5, r1, #31
 8005268:	3801      	subs	r0, #1
 800526a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800526e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005272:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005276:	d1f0      	bne.n	800525a <__ieee754_sqrt+0xb6>
 8005278:	4605      	mov	r5, r0
 800527a:	2420      	movs	r4, #32
 800527c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005280:	4293      	cmp	r3, r2
 8005282:	eb0c 0e00 	add.w	lr, ip, r0
 8005286:	dc02      	bgt.n	800528e <__ieee754_sqrt+0xea>
 8005288:	d113      	bne.n	80052b2 <__ieee754_sqrt+0x10e>
 800528a:	458e      	cmp	lr, r1
 800528c:	d811      	bhi.n	80052b2 <__ieee754_sqrt+0x10e>
 800528e:	f1be 0f00 	cmp.w	lr, #0
 8005292:	eb0e 000c 	add.w	r0, lr, ip
 8005296:	da3f      	bge.n	8005318 <__ieee754_sqrt+0x174>
 8005298:	2800      	cmp	r0, #0
 800529a:	db3d      	blt.n	8005318 <__ieee754_sqrt+0x174>
 800529c:	f102 0801 	add.w	r8, r2, #1
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	458e      	cmp	lr, r1
 80052a4:	bf88      	it	hi
 80052a6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80052aa:	eba1 010e 	sub.w	r1, r1, lr
 80052ae:	4465      	add	r5, ip
 80052b0:	4642      	mov	r2, r8
 80052b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80052b6:	3c01      	subs	r4, #1
 80052b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80052bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80052c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80052c4:	d1dc      	bne.n	8005280 <__ieee754_sqrt+0xdc>
 80052c6:	4319      	orrs	r1, r3
 80052c8:	d01b      	beq.n	8005302 <__ieee754_sqrt+0x15e>
 80052ca:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8005348 <__ieee754_sqrt+0x1a4>
 80052ce:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800534c <__ieee754_sqrt+0x1a8>
 80052d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80052d6:	e9db 2300 	ldrd	r2, r3, [fp]
 80052da:	f7fa ffd5 	bl	8000288 <__aeabi_dsub>
 80052de:	e9da 8900 	ldrd	r8, r9, [sl]
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4640      	mov	r0, r8
 80052e8:	4649      	mov	r1, r9
 80052ea:	f7fb fc01 	bl	8000af0 <__aeabi_dcmple>
 80052ee:	b140      	cbz	r0, 8005302 <__ieee754_sqrt+0x15e>
 80052f0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80052f4:	e9da 0100 	ldrd	r0, r1, [sl]
 80052f8:	e9db 2300 	ldrd	r2, r3, [fp]
 80052fc:	d10e      	bne.n	800531c <__ieee754_sqrt+0x178>
 80052fe:	3601      	adds	r6, #1
 8005300:	4625      	mov	r5, r4
 8005302:	1073      	asrs	r3, r6, #1
 8005304:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005308:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800530c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8005310:	086b      	lsrs	r3, r5, #1
 8005312:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8005316:	e759      	b.n	80051cc <__ieee754_sqrt+0x28>
 8005318:	4690      	mov	r8, r2
 800531a:	e7c1      	b.n	80052a0 <__ieee754_sqrt+0xfc>
 800531c:	f7fa ffb6 	bl	800028c <__adddf3>
 8005320:	e9da 8900 	ldrd	r8, r9, [sl]
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4640      	mov	r0, r8
 800532a:	4649      	mov	r1, r9
 800532c:	f7fb fbd6 	bl	8000adc <__aeabi_dcmplt>
 8005330:	b120      	cbz	r0, 800533c <__ieee754_sqrt+0x198>
 8005332:	1cab      	adds	r3, r5, #2
 8005334:	bf08      	it	eq
 8005336:	3601      	addeq	r6, #1
 8005338:	3502      	adds	r5, #2
 800533a:	e7e2      	b.n	8005302 <__ieee754_sqrt+0x15e>
 800533c:	1c6b      	adds	r3, r5, #1
 800533e:	f023 0501 	bic.w	r5, r3, #1
 8005342:	e7de      	b.n	8005302 <__ieee754_sqrt+0x15e>
 8005344:	7ff00000 	.word	0x7ff00000
 8005348:	08005b00 	.word	0x08005b00
 800534c:	08005af8 	.word	0x08005af8

08005350 <__ieee754_atan2>:
 8005350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005354:	ec57 6b11 	vmov	r6, r7, d1
 8005358:	4273      	negs	r3, r6
 800535a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80054d8 <__ieee754_atan2+0x188>
 800535e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8005362:	4333      	orrs	r3, r6
 8005364:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005368:	4543      	cmp	r3, r8
 800536a:	ec51 0b10 	vmov	r0, r1, d0
 800536e:	4635      	mov	r5, r6
 8005370:	d809      	bhi.n	8005386 <__ieee754_atan2+0x36>
 8005372:	4244      	negs	r4, r0
 8005374:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005378:	4304      	orrs	r4, r0
 800537a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800537e:	4544      	cmp	r4, r8
 8005380:	468e      	mov	lr, r1
 8005382:	4681      	mov	r9, r0
 8005384:	d907      	bls.n	8005396 <__ieee754_atan2+0x46>
 8005386:	4632      	mov	r2, r6
 8005388:	463b      	mov	r3, r7
 800538a:	f7fa ff7f 	bl	800028c <__adddf3>
 800538e:	ec41 0b10 	vmov	d0, r0, r1
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800539a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800539e:	4334      	orrs	r4, r6
 80053a0:	d103      	bne.n	80053aa <__ieee754_atan2+0x5a>
 80053a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a6:	f000 b89b 	b.w	80054e0 <atan>
 80053aa:	17bc      	asrs	r4, r7, #30
 80053ac:	f004 0402 	and.w	r4, r4, #2
 80053b0:	ea53 0909 	orrs.w	r9, r3, r9
 80053b4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80053b8:	d107      	bne.n	80053ca <__ieee754_atan2+0x7a>
 80053ba:	2c02      	cmp	r4, #2
 80053bc:	d05f      	beq.n	800547e <__ieee754_atan2+0x12e>
 80053be:	2c03      	cmp	r4, #3
 80053c0:	d1e5      	bne.n	800538e <__ieee754_atan2+0x3e>
 80053c2:	a143      	add	r1, pc, #268	@ (adr r1, 80054d0 <__ieee754_atan2+0x180>)
 80053c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053c8:	e7e1      	b.n	800538e <__ieee754_atan2+0x3e>
 80053ca:	4315      	orrs	r5, r2
 80053cc:	d106      	bne.n	80053dc <__ieee754_atan2+0x8c>
 80053ce:	f1be 0f00 	cmp.w	lr, #0
 80053d2:	db5f      	blt.n	8005494 <__ieee754_atan2+0x144>
 80053d4:	a136      	add	r1, pc, #216	@ (adr r1, 80054b0 <__ieee754_atan2+0x160>)
 80053d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053da:	e7d8      	b.n	800538e <__ieee754_atan2+0x3e>
 80053dc:	4542      	cmp	r2, r8
 80053de:	d10f      	bne.n	8005400 <__ieee754_atan2+0xb0>
 80053e0:	4293      	cmp	r3, r2
 80053e2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80053e6:	d107      	bne.n	80053f8 <__ieee754_atan2+0xa8>
 80053e8:	2c02      	cmp	r4, #2
 80053ea:	d84c      	bhi.n	8005486 <__ieee754_atan2+0x136>
 80053ec:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <__ieee754_atan2+0x178>)
 80053ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053f6:	e7ca      	b.n	800538e <__ieee754_atan2+0x3e>
 80053f8:	2c02      	cmp	r4, #2
 80053fa:	d848      	bhi.n	800548e <__ieee754_atan2+0x13e>
 80053fc:	4b33      	ldr	r3, [pc, #204]	@ (80054cc <__ieee754_atan2+0x17c>)
 80053fe:	e7f6      	b.n	80053ee <__ieee754_atan2+0x9e>
 8005400:	4543      	cmp	r3, r8
 8005402:	d0e4      	beq.n	80053ce <__ieee754_atan2+0x7e>
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800540a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800540e:	da1e      	bge.n	800544e <__ieee754_atan2+0xfe>
 8005410:	2f00      	cmp	r7, #0
 8005412:	da01      	bge.n	8005418 <__ieee754_atan2+0xc8>
 8005414:	323c      	adds	r2, #60	@ 0x3c
 8005416:	db1e      	blt.n	8005456 <__ieee754_atan2+0x106>
 8005418:	4632      	mov	r2, r6
 800541a:	463b      	mov	r3, r7
 800541c:	f7fb fa16 	bl	800084c <__aeabi_ddiv>
 8005420:	ec41 0b10 	vmov	d0, r0, r1
 8005424:	f000 f9f4 	bl	8005810 <fabs>
 8005428:	f000 f85a 	bl	80054e0 <atan>
 800542c:	ec51 0b10 	vmov	r0, r1, d0
 8005430:	2c01      	cmp	r4, #1
 8005432:	d013      	beq.n	800545c <__ieee754_atan2+0x10c>
 8005434:	2c02      	cmp	r4, #2
 8005436:	d015      	beq.n	8005464 <__ieee754_atan2+0x114>
 8005438:	2c00      	cmp	r4, #0
 800543a:	d0a8      	beq.n	800538e <__ieee754_atan2+0x3e>
 800543c:	a318      	add	r3, pc, #96	@ (adr r3, 80054a0 <__ieee754_atan2+0x150>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fa ff21 	bl	8000288 <__aeabi_dsub>
 8005446:	a318      	add	r3, pc, #96	@ (adr r3, 80054a8 <__ieee754_atan2+0x158>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	e014      	b.n	8005478 <__ieee754_atan2+0x128>
 800544e:	a118      	add	r1, pc, #96	@ (adr r1, 80054b0 <__ieee754_atan2+0x160>)
 8005450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005454:	e7ec      	b.n	8005430 <__ieee754_atan2+0xe0>
 8005456:	2000      	movs	r0, #0
 8005458:	2100      	movs	r1, #0
 800545a:	e7e9      	b.n	8005430 <__ieee754_atan2+0xe0>
 800545c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005460:	4619      	mov	r1, r3
 8005462:	e794      	b.n	800538e <__ieee754_atan2+0x3e>
 8005464:	a30e      	add	r3, pc, #56	@ (adr r3, 80054a0 <__ieee754_atan2+0x150>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f7fa ff0d 	bl	8000288 <__aeabi_dsub>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	a10d      	add	r1, pc, #52	@ (adr r1, 80054a8 <__ieee754_atan2+0x158>)
 8005474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005478:	f7fa ff06 	bl	8000288 <__aeabi_dsub>
 800547c:	e787      	b.n	800538e <__ieee754_atan2+0x3e>
 800547e:	a10a      	add	r1, pc, #40	@ (adr r1, 80054a8 <__ieee754_atan2+0x158>)
 8005480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005484:	e783      	b.n	800538e <__ieee754_atan2+0x3e>
 8005486:	a10c      	add	r1, pc, #48	@ (adr r1, 80054b8 <__ieee754_atan2+0x168>)
 8005488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800548c:	e77f      	b.n	800538e <__ieee754_atan2+0x3e>
 800548e:	2000      	movs	r0, #0
 8005490:	2100      	movs	r1, #0
 8005492:	e77c      	b.n	800538e <__ieee754_atan2+0x3e>
 8005494:	a10a      	add	r1, pc, #40	@ (adr r1, 80054c0 <__ieee754_atan2+0x170>)
 8005496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800549a:	e778      	b.n	800538e <__ieee754_atan2+0x3e>
 800549c:	f3af 8000 	nop.w
 80054a0:	33145c07 	.word	0x33145c07
 80054a4:	3ca1a626 	.word	0x3ca1a626
 80054a8:	54442d18 	.word	0x54442d18
 80054ac:	400921fb 	.word	0x400921fb
 80054b0:	54442d18 	.word	0x54442d18
 80054b4:	3ff921fb 	.word	0x3ff921fb
 80054b8:	54442d18 	.word	0x54442d18
 80054bc:	3fe921fb 	.word	0x3fe921fb
 80054c0:	54442d18 	.word	0x54442d18
 80054c4:	bff921fb 	.word	0xbff921fb
 80054c8:	08005b20 	.word	0x08005b20
 80054cc:	08005b08 	.word	0x08005b08
 80054d0:	54442d18 	.word	0x54442d18
 80054d4:	c00921fb 	.word	0xc00921fb
 80054d8:	7ff00000 	.word	0x7ff00000
 80054dc:	00000000 	.word	0x00000000

080054e0 <atan>:
 80054e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ec55 4b10 	vmov	r4, r5, d0
 80054e8:	4bbf      	ldr	r3, [pc, #764]	@ (80057e8 <atan+0x308>)
 80054ea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80054ee:	429e      	cmp	r6, r3
 80054f0:	46ab      	mov	fp, r5
 80054f2:	d918      	bls.n	8005526 <atan+0x46>
 80054f4:	4bbd      	ldr	r3, [pc, #756]	@ (80057ec <atan+0x30c>)
 80054f6:	429e      	cmp	r6, r3
 80054f8:	d801      	bhi.n	80054fe <atan+0x1e>
 80054fa:	d109      	bne.n	8005510 <atan+0x30>
 80054fc:	b144      	cbz	r4, 8005510 <atan+0x30>
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f7fa fec1 	bl	800028c <__adddf3>
 800550a:	4604      	mov	r4, r0
 800550c:	460d      	mov	r5, r1
 800550e:	e006      	b.n	800551e <atan+0x3e>
 8005510:	f1bb 0f00 	cmp.w	fp, #0
 8005514:	f340 812b 	ble.w	800576e <atan+0x28e>
 8005518:	a597      	add	r5, pc, #604	@ (adr r5, 8005778 <atan+0x298>)
 800551a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800551e:	ec45 4b10 	vmov	d0, r4, r5
 8005522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	4bb2      	ldr	r3, [pc, #712]	@ (80057f0 <atan+0x310>)
 8005528:	429e      	cmp	r6, r3
 800552a:	d813      	bhi.n	8005554 <atan+0x74>
 800552c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005530:	429e      	cmp	r6, r3
 8005532:	d80c      	bhi.n	800554e <atan+0x6e>
 8005534:	a392      	add	r3, pc, #584	@ (adr r3, 8005780 <atan+0x2a0>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa fea5 	bl	800028c <__adddf3>
 8005542:	4bac      	ldr	r3, [pc, #688]	@ (80057f4 <atan+0x314>)
 8005544:	2200      	movs	r2, #0
 8005546:	f7fb fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800554a:	2800      	cmp	r0, #0
 800554c:	d1e7      	bne.n	800551e <atan+0x3e>
 800554e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005552:	e029      	b.n	80055a8 <atan+0xc8>
 8005554:	f000 f95c 	bl	8005810 <fabs>
 8005558:	4ba7      	ldr	r3, [pc, #668]	@ (80057f8 <atan+0x318>)
 800555a:	429e      	cmp	r6, r3
 800555c:	ec55 4b10 	vmov	r4, r5, d0
 8005560:	f200 80bc 	bhi.w	80056dc <atan+0x1fc>
 8005564:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005568:	429e      	cmp	r6, r3
 800556a:	f200 809e 	bhi.w	80056aa <atan+0x1ca>
 800556e:	4622      	mov	r2, r4
 8005570:	462b      	mov	r3, r5
 8005572:	4620      	mov	r0, r4
 8005574:	4629      	mov	r1, r5
 8005576:	f7fa fe89 	bl	800028c <__adddf3>
 800557a:	4b9e      	ldr	r3, [pc, #632]	@ (80057f4 <atan+0x314>)
 800557c:	2200      	movs	r2, #0
 800557e:	f7fa fe83 	bl	8000288 <__aeabi_dsub>
 8005582:	2200      	movs	r2, #0
 8005584:	4606      	mov	r6, r0
 8005586:	460f      	mov	r7, r1
 8005588:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800558c:	4620      	mov	r0, r4
 800558e:	4629      	mov	r1, r5
 8005590:	f7fa fe7c 	bl	800028c <__adddf3>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fb f956 	bl	800084c <__aeabi_ddiv>
 80055a0:	f04f 0a00 	mov.w	sl, #0
 80055a4:	4604      	mov	r4, r0
 80055a6:	460d      	mov	r5, r1
 80055a8:	4622      	mov	r2, r4
 80055aa:	462b      	mov	r3, r5
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fb f822 	bl	80005f8 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4680      	mov	r8, r0
 80055ba:	4689      	mov	r9, r1
 80055bc:	f7fb f81c 	bl	80005f8 <__aeabi_dmul>
 80055c0:	a371      	add	r3, pc, #452	@ (adr r3, 8005788 <atan+0x2a8>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	4606      	mov	r6, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	f7fb f815 	bl	80005f8 <__aeabi_dmul>
 80055ce:	a370      	add	r3, pc, #448	@ (adr r3, 8005790 <atan+0x2b0>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa fe5a 	bl	800028c <__adddf3>
 80055d8:	4632      	mov	r2, r6
 80055da:	463b      	mov	r3, r7
 80055dc:	f7fb f80c 	bl	80005f8 <__aeabi_dmul>
 80055e0:	a36d      	add	r3, pc, #436	@ (adr r3, 8005798 <atan+0x2b8>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fe51 	bl	800028c <__adddf3>
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	f7fb f803 	bl	80005f8 <__aeabi_dmul>
 80055f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80057a0 <atan+0x2c0>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fe48 	bl	800028c <__adddf3>
 80055fc:	4632      	mov	r2, r6
 80055fe:	463b      	mov	r3, r7
 8005600:	f7fa fffa 	bl	80005f8 <__aeabi_dmul>
 8005604:	a368      	add	r3, pc, #416	@ (adr r3, 80057a8 <atan+0x2c8>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fa fe3f 	bl	800028c <__adddf3>
 800560e:	4632      	mov	r2, r6
 8005610:	463b      	mov	r3, r7
 8005612:	f7fa fff1 	bl	80005f8 <__aeabi_dmul>
 8005616:	a366      	add	r3, pc, #408	@ (adr r3, 80057b0 <atan+0x2d0>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fa fe36 	bl	800028c <__adddf3>
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	a363      	add	r3, pc, #396	@ (adr r3, 80057b8 <atan+0x2d8>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	4680      	mov	r8, r0
 8005630:	4689      	mov	r9, r1
 8005632:	4630      	mov	r0, r6
 8005634:	4639      	mov	r1, r7
 8005636:	f7fa ffdf 	bl	80005f8 <__aeabi_dmul>
 800563a:	a361      	add	r3, pc, #388	@ (adr r3, 80057c0 <atan+0x2e0>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fe22 	bl	8000288 <__aeabi_dsub>
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	f7fa ffd6 	bl	80005f8 <__aeabi_dmul>
 800564c:	a35e      	add	r3, pc, #376	@ (adr r3, 80057c8 <atan+0x2e8>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fa fe19 	bl	8000288 <__aeabi_dsub>
 8005656:	4632      	mov	r2, r6
 8005658:	463b      	mov	r3, r7
 800565a:	f7fa ffcd 	bl	80005f8 <__aeabi_dmul>
 800565e:	a35c      	add	r3, pc, #368	@ (adr r3, 80057d0 <atan+0x2f0>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa fe10 	bl	8000288 <__aeabi_dsub>
 8005668:	4632      	mov	r2, r6
 800566a:	463b      	mov	r3, r7
 800566c:	f7fa ffc4 	bl	80005f8 <__aeabi_dmul>
 8005670:	a359      	add	r3, pc, #356	@ (adr r3, 80057d8 <atan+0x2f8>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa fe07 	bl	8000288 <__aeabi_dsub>
 800567a:	4632      	mov	r2, r6
 800567c:	463b      	mov	r3, r7
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4640      	mov	r0, r8
 8005688:	4649      	mov	r1, r9
 800568a:	f7fa fdff 	bl	800028c <__adddf3>
 800568e:	4622      	mov	r2, r4
 8005690:	462b      	mov	r3, r5
 8005692:	f7fa ffb1 	bl	80005f8 <__aeabi_dmul>
 8005696:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	d148      	bne.n	8005732 <atan+0x252>
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fdf0 	bl	8000288 <__aeabi_dsub>
 80056a8:	e72f      	b.n	800550a <atan+0x2a>
 80056aa:	4b52      	ldr	r3, [pc, #328]	@ (80057f4 <atan+0x314>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f7fa fde9 	bl	8000288 <__aeabi_dsub>
 80056b6:	4b4f      	ldr	r3, [pc, #316]	@ (80057f4 <atan+0x314>)
 80056b8:	4606      	mov	r6, r0
 80056ba:	460f      	mov	r7, r1
 80056bc:	2200      	movs	r2, #0
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fa fde3 	bl	800028c <__adddf3>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	f7fb f8bd 	bl	800084c <__aeabi_ddiv>
 80056d2:	f04f 0a01 	mov.w	sl, #1
 80056d6:	4604      	mov	r4, r0
 80056d8:	460d      	mov	r5, r1
 80056da:	e765      	b.n	80055a8 <atan+0xc8>
 80056dc:	4b47      	ldr	r3, [pc, #284]	@ (80057fc <atan+0x31c>)
 80056de:	429e      	cmp	r6, r3
 80056e0:	d21c      	bcs.n	800571c <atan+0x23c>
 80056e2:	4b47      	ldr	r3, [pc, #284]	@ (8005800 <atan+0x320>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fa fdcd 	bl	8000288 <__aeabi_dsub>
 80056ee:	4b44      	ldr	r3, [pc, #272]	@ (8005800 <atan+0x320>)
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	2200      	movs	r2, #0
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa ff7d 	bl	80005f8 <__aeabi_dmul>
 80056fe:	4b3d      	ldr	r3, [pc, #244]	@ (80057f4 <atan+0x314>)
 8005700:	2200      	movs	r2, #0
 8005702:	f7fa fdc3 	bl	800028c <__adddf3>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4630      	mov	r0, r6
 800570c:	4639      	mov	r1, r7
 800570e:	f7fb f89d 	bl	800084c <__aeabi_ddiv>
 8005712:	f04f 0a02 	mov.w	sl, #2
 8005716:	4604      	mov	r4, r0
 8005718:	460d      	mov	r5, r1
 800571a:	e745      	b.n	80055a8 <atan+0xc8>
 800571c:	4622      	mov	r2, r4
 800571e:	462b      	mov	r3, r5
 8005720:	4938      	ldr	r1, [pc, #224]	@ (8005804 <atan+0x324>)
 8005722:	2000      	movs	r0, #0
 8005724:	f7fb f892 	bl	800084c <__aeabi_ddiv>
 8005728:	f04f 0a03 	mov.w	sl, #3
 800572c:	4604      	mov	r4, r0
 800572e:	460d      	mov	r5, r1
 8005730:	e73a      	b.n	80055a8 <atan+0xc8>
 8005732:	4b35      	ldr	r3, [pc, #212]	@ (8005808 <atan+0x328>)
 8005734:	4e35      	ldr	r6, [pc, #212]	@ (800580c <atan+0x32c>)
 8005736:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa fda3 	bl	8000288 <__aeabi_dsub>
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	f7fa fd9f 	bl	8000288 <__aeabi_dsub>
 800574a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005756:	f7fa fd97 	bl	8000288 <__aeabi_dsub>
 800575a:	f1bb 0f00 	cmp.w	fp, #0
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	f6bf aedc 	bge.w	800551e <atan+0x3e>
 8005766:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800576a:	461d      	mov	r5, r3
 800576c:	e6d7      	b.n	800551e <atan+0x3e>
 800576e:	a51c      	add	r5, pc, #112	@ (adr r5, 80057e0 <atan+0x300>)
 8005770:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005774:	e6d3      	b.n	800551e <atan+0x3e>
 8005776:	bf00      	nop
 8005778:	54442d18 	.word	0x54442d18
 800577c:	3ff921fb 	.word	0x3ff921fb
 8005780:	8800759c 	.word	0x8800759c
 8005784:	7e37e43c 	.word	0x7e37e43c
 8005788:	e322da11 	.word	0xe322da11
 800578c:	3f90ad3a 	.word	0x3f90ad3a
 8005790:	24760deb 	.word	0x24760deb
 8005794:	3fa97b4b 	.word	0x3fa97b4b
 8005798:	a0d03d51 	.word	0xa0d03d51
 800579c:	3fb10d66 	.word	0x3fb10d66
 80057a0:	c54c206e 	.word	0xc54c206e
 80057a4:	3fb745cd 	.word	0x3fb745cd
 80057a8:	920083ff 	.word	0x920083ff
 80057ac:	3fc24924 	.word	0x3fc24924
 80057b0:	5555550d 	.word	0x5555550d
 80057b4:	3fd55555 	.word	0x3fd55555
 80057b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80057bc:	bfa2b444 	.word	0xbfa2b444
 80057c0:	52defd9a 	.word	0x52defd9a
 80057c4:	3fadde2d 	.word	0x3fadde2d
 80057c8:	af749a6d 	.word	0xaf749a6d
 80057cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80057d0:	fe231671 	.word	0xfe231671
 80057d4:	3fbc71c6 	.word	0x3fbc71c6
 80057d8:	9998ebc4 	.word	0x9998ebc4
 80057dc:	3fc99999 	.word	0x3fc99999
 80057e0:	54442d18 	.word	0x54442d18
 80057e4:	bff921fb 	.word	0xbff921fb
 80057e8:	440fffff 	.word	0x440fffff
 80057ec:	7ff00000 	.word	0x7ff00000
 80057f0:	3fdbffff 	.word	0x3fdbffff
 80057f4:	3ff00000 	.word	0x3ff00000
 80057f8:	3ff2ffff 	.word	0x3ff2ffff
 80057fc:	40038000 	.word	0x40038000
 8005800:	3ff80000 	.word	0x3ff80000
 8005804:	bff00000 	.word	0xbff00000
 8005808:	08005b38 	.word	0x08005b38
 800580c:	08005b58 	.word	0x08005b58

08005810 <fabs>:
 8005810:	ec51 0b10 	vmov	r0, r1, d0
 8005814:	4602      	mov	r2, r0
 8005816:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800581a:	ec43 2b10 	vmov	d0, r2, r3
 800581e:	4770      	bx	lr

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
